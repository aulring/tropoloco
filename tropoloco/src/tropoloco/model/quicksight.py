from __future__ import annotations
from typing import Optional, List, Dict, Tuple, Any, Union

from pydantic import BaseModel, Field

import troposphere
from tropoloco.tag import Tag, Tags
from tropoloco import resource_to_troposphere, property_to_troposphere


######################################################################
# AWS Property
######################################################################



class AggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html
    Properties:
        - Name: AttributeAggregationFunction
        - Name: DateAggregationFunction
        - Name: NumericalAggregationFunction
        - Name: CategoricalAggregationFunction
    
    """
    
    AttributeAggregationFunction_: Optional['AttributeAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-attributeaggregationfunction""", alias="AttributeAggregationFunction")
    DateAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-dateaggregationfunction""", alias="DateAggregationFunction")
    NumericalAggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-numericalaggregationfunction""", alias="NumericalAggregationFunction")
    CategoricalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationfunction.html#cfn-quicksight-analysis-aggregationfunction-categoricalaggregationfunction""", alias="CategoricalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationFunction:
        from troposphere.quicksight import AggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AggregationSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html
    Properties:
        - Name: AggregationFunction
        - Name: SortDirection
        - Name: Column
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-aggregationfunction""", alias="AggregationFunction")
    SortDirection_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-sortdirection""", alias="SortDirection")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-aggregationsortconfiguration.html#cfn-quicksight-analysis-aggregationsortconfiguration-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationSortConfiguration:
        from troposphere.quicksight import AggregationSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisDefaults(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefaults.html
    Properties:
        - Name: DefaultNewSheetConfiguration
    
    """
    
    DefaultNewSheetConfiguration_: 'DefaultNewSheetConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefaults.html#cfn-quicksight-analysis-analysisdefaults-defaultnewsheetconfiguration""", alias="DefaultNewSheetConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisDefaults:
        from troposphere.quicksight import AnalysisDefaults as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html
    Properties:
        - Name: Options
        - Name: FilterGroups
        - Name: CalculatedFields
        - Name: DataSetIdentifierDeclarations
        - Name: ColumnConfigurations
        - Name: AnalysisDefaults
        - Name: Sheets
        - Name: ParameterDeclarations
    
    """
    
    Options_: Optional['AssetOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-options""", alias="Options")
    FilterGroups_: Optional[List['FilterGroup']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-filtergroups""", alias="FilterGroups")
    CalculatedFields_: Optional[List['CalculatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-calculatedfields""", alias="CalculatedFields")
    DataSetIdentifierDeclarations_: List['DataSetIdentifierDeclaration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-datasetidentifierdeclarations""", alias="DataSetIdentifierDeclarations")
    ColumnConfigurations_: Optional[List['ColumnConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-columnconfigurations""", alias="ColumnConfigurations")
    AnalysisDefaults_: Optional['AnalysisDefaults'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-analysisdefaults""", alias="AnalysisDefaults")
    Sheets_: Optional[List['SheetDefinition']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-sheets""", alias="Sheets")
    ParameterDeclarations_: Optional[List['ParameterDeclaration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysisdefinition.html#cfn-quicksight-analysis-analysisdefinition-parameterdeclarations""", alias="ParameterDeclarations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisDefinition:
        from troposphere.quicksight import AnalysisDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisError(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html
    Properties:
        - Name: Type
        - Name: Message
        - Name: ViolatedEntities
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-type""", alias="Type")
    Message_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-message""", alias="Message")
    ViolatedEntities_: Optional[List['Entity']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysiserror.html#cfn-quicksight-analysis-analysiserror-violatedentities""", alias="ViolatedEntities")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisError:
        from troposphere.quicksight import AnalysisError as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisSourceEntity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourceentity.html
    Properties:
        - Name: SourceTemplate
    
    """
    
    SourceTemplate_: Optional['AnalysisSourceTemplate'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourceentity.html#cfn-quicksight-analysis-analysissourceentity-sourcetemplate""", alias="SourceTemplate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisSourceEntity:
        from troposphere.quicksight import AnalysisSourceEntity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisSourceTemplate(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html
    Properties:
        - Name: DataSetReferences
        - Name: Arn
    
    """
    
    DataSetReferences_: List['DataSetReference'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-datasetreferences""", alias="DataSetReferences")
    Arn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-analysissourcetemplate.html#cfn-quicksight-analysis-analysissourcetemplate-arn""", alias="Arn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisSourceTemplate:
        from troposphere.quicksight import AnalysisSourceTemplate as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnchorDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html
    Properties:
        - Name: AnchorOption
        - Name: ParameterName
    
    """
    
    AnchorOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-anchoroption""", alias="AnchorOption")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-anchordateconfiguration.html#cfn-quicksight-analysis-anchordateconfiguration-parametername""", alias="ParameterName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnchorDateConfiguration:
        from troposphere.quicksight import AnchorDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html
    Properties:
        - Name: Range
        - Name: ReserveRange
    
    """
    
    Range_: Optional['ArcAxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-range""", alias="Range")
    ReserveRange_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisconfiguration.html#cfn-quicksight-analysis-arcaxisconfiguration-reserverange""", alias="ReserveRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisConfiguration:
        from troposphere.quicksight import ArcAxisConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html
    Properties:
        - Name: Min
        - Name: Max
    
    """
    
    Min_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-min""", alias="Min")
    Max_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcaxisdisplayrange.html#cfn-quicksight-analysis-arcaxisdisplayrange-max""", alias="Max")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisDisplayRange:
        from troposphere.quicksight import ArcAxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html
    Properties:
        - Name: ArcAngle
        - Name: ArcThickness
    
    """
    
    ArcAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcangle""", alias="ArcAngle")
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcconfiguration.html#cfn-quicksight-analysis-arcconfiguration-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcConfiguration:
        from troposphere.quicksight import ArcConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcoptions.html
    Properties:
        - Name: ArcThickness
    
    """
    
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-arcoptions.html#cfn-quicksight-analysis-arcoptions-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcOptions:
        from troposphere.quicksight import ArcOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AssetOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html
    Properties:
        - Name: Timezone
        - Name: WeekStart
    
    """
    
    Timezone_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-timezone""", alias="Timezone")
    WeekStart_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-assetoptions.html#cfn-quicksight-analysis-assetoptions-weekstart""", alias="WeekStart")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AssetOptions:
        from troposphere.quicksight import AssetOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AttributeAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html
    Properties:
        - Name: SimpleAttributeAggregation
        - Name: ValueForMultipleValues
    
    """
    
    SimpleAttributeAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-simpleattributeaggregation""", alias="SimpleAttributeAggregation")
    ValueForMultipleValues_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-attributeaggregationfunction.html#cfn-quicksight-analysis-attributeaggregationfunction-valueformultiplevalues""", alias="ValueForMultipleValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AttributeAggregationFunction:
        from troposphere.quicksight import AttributeAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDataOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html
    Properties:
        - Name: DateAxisOptions
        - Name: NumericAxisOptions
    
    """
    
    DateAxisOptions_: Optional['DateAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-dateaxisoptions""", alias="DateAxisOptions")
    NumericAxisOptions_: Optional['NumericAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdataoptions.html#cfn-quicksight-analysis-axisdataoptions-numericaxisoptions""", alias="NumericAxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDataOptions:
        from troposphere.quicksight import AxisDataOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayMinMaxRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html
    Properties:
        - Name: Minimum
        - Name: Maximum
    
    """
    
    Minimum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-minimum""", alias="Minimum")
    Maximum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayminmaxrange.html#cfn-quicksight-analysis-axisdisplayminmaxrange-maximum""", alias="Maximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayMinMaxRange:
        from troposphere.quicksight import AxisDisplayMinMaxRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html
    Properties:
        - Name: DataOptions
        - Name: TickLabelOptions
        - Name: AxisOffset
        - Name: AxisLineVisibility
        - Name: GridLineVisibility
        - Name: ScrollbarOptions
    
    """
    
    DataOptions_: Optional['AxisDataOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-dataoptions""", alias="DataOptions")
    TickLabelOptions_: Optional['AxisTickLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-ticklabeloptions""", alias="TickLabelOptions")
    AxisOffset_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axisoffset""", alias="AxisOffset")
    AxisLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-axislinevisibility""", alias="AxisLineVisibility")
    GridLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-gridlinevisibility""", alias="GridLineVisibility")
    ScrollbarOptions_: Optional['ScrollBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayoptions.html#cfn-quicksight-analysis-axisdisplayoptions-scrollbaroptions""", alias="ScrollbarOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayOptions:
        from troposphere.quicksight import AxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html
    Properties:
        - Name: DataDriven
        - Name: MinMax
    
    """
    
    DataDriven_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-datadriven""", alias="DataDriven")
    MinMax_: Optional['AxisDisplayMinMaxRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisdisplayrange.html#cfn-quicksight-analysis-axisdisplayrange-minmax""", alias="MinMax")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayRange:
        from troposphere.quicksight import AxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: ApplyTo
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-customlabel""", alias="CustomLabel")
    ApplyTo_: Optional['AxisLabelReferenceOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-applyto""", alias="ApplyTo")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabeloptions.html#cfn-quicksight-analysis-axislabeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelOptions:
        from troposphere.quicksight import AxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelReferenceOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html
    Properties:
        - Name: Column
        - Name: FieldId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislabelreferenceoptions.html#cfn-quicksight-analysis-axislabelreferenceoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelReferenceOptions:
        from troposphere.quicksight import AxisLabelReferenceOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLinearScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html
    Properties:
        - Name: StepSize
        - Name: StepCount
    
    """
    
    StepSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepsize""", alias="StepSize")
    StepCount_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislinearscale.html#cfn-quicksight-analysis-axislinearscale-stepcount""", alias="StepCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLinearScale:
        from troposphere.quicksight import AxisLinearScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLogarithmicScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislogarithmicscale.html
    Properties:
        - Name: Base
    
    """
    
    Base_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axislogarithmicscale.html#cfn-quicksight-analysis-axislogarithmicscale-base""", alias="Base")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLogarithmicScale:
        from troposphere.quicksight import AxisLogarithmicScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html
    Properties:
        - Name: Logarithmic
        - Name: Linear
    
    """
    
    Logarithmic_: Optional['AxisLogarithmicScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-logarithmic""", alias="Logarithmic")
    Linear_: Optional['AxisLinearScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisscale.html#cfn-quicksight-analysis-axisscale-linear""", alias="Linear")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisScale:
        from troposphere.quicksight import AxisScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisTickLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html
    Properties:
        - Name: RotationAngle
        - Name: LabelOptions
    
    """
    
    RotationAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-rotationangle""", alias="RotationAngle")
    LabelOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-axisticklabeloptions.html#cfn-quicksight-analysis-axisticklabeloptions-labeloptions""", alias="LabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisTickLabelOptions:
        from troposphere.quicksight import AxisTickLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartaggregatedfieldwells.html#cfn-quicksight-analysis-barchartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartAggregatedFieldWells:
        from troposphere.quicksight import BarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: Orientation
        - Name: VisualPalette
        - Name: ValueLabelOptions
        - Name: BarsArrangement
        - Name: CategoryAxis
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: ValueAxis
    
    """
    
    SortConfiguration_: Optional['BarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-orientation""", alias="Orientation")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-visualpalette""", alias="VisualPalette")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-barsarrangement""", alias="BarsArrangement")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-categoryaxis""", alias="CategoryAxis")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['BarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-fieldwells""", alias="FieldWells")
    ValueAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartconfiguration.html#cfn-quicksight-analysis-barchartconfiguration-valueaxis""", alias="ValueAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartConfiguration:
        from troposphere.quicksight import BarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartfieldwells.html
    Properties:
        - Name: BarChartAggregatedFieldWells
    
    """
    
    BarChartAggregatedFieldWells_: Optional['BarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartfieldwells.html#cfn-quicksight-analysis-barchartfieldwells-barchartaggregatedfieldwells""", alias="BarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartFieldWells:
        from troposphere.quicksight import BarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartsortconfiguration.html#cfn-quicksight-analysis-barchartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartSortConfiguration:
        from troposphere.quicksight import BarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-barchartvisual.html#cfn-quicksight-analysis-barchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartVisual:
        from troposphere.quicksight import BarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinCountOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bincountoptions.html
    Properties:
        - Name: Value
    
    """
    
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bincountoptions.html#cfn-quicksight-analysis-bincountoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinCountOptions:
        from troposphere.quicksight import BinCountOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinWidthOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html
    Properties:
        - Name: BinCountLimit
        - Name: Value
    
    """
    
    BinCountLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-bincountlimit""", alias="BinCountLimit")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-binwidthoptions.html#cfn-quicksight-analysis-binwidthoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinWidthOptions:
        from troposphere.quicksight import BinWidthOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html
    Properties:
        - Name: Content
        - Name: Style
        - Name: PageBreakConfiguration
        - Name: SectionId
    
    """
    
    Content_: 'BodySectionContent' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-content""", alias="Content")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-style""", alias="Style")
    PageBreakConfiguration_: Optional['SectionPageBreakConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-pagebreakconfiguration""", alias="PageBreakConfiguration")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectionconfiguration.html#cfn-quicksight-analysis-bodysectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionConfiguration:
        from troposphere.quicksight import BodySectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectioncontent.html
    Properties:
        - Name: Layout
    
    """
    
    Layout_: Optional['SectionLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-bodysectioncontent.html#cfn-quicksight-analysis-bodysectioncontent-layout""", alias="Layout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionContent:
        from troposphere.quicksight import BodySectionContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotaggregatedfieldwells.html#cfn-quicksight-analysis-boxplotaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotAggregatedFieldWells:
        from troposphere.quicksight import BoxPlotAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: BoxPlotOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['BoxPlotSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-referencelines""", alias="ReferenceLines")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['BoxPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-tooltip""", alias="Tooltip")
    BoxPlotOptions_: Optional['BoxPlotOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-boxplotoptions""", alias="BoxPlotOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotchartconfiguration.html#cfn-quicksight-analysis-boxplotchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotChartConfiguration:
        from troposphere.quicksight import BoxPlotChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotfieldwells.html
    Properties:
        - Name: BoxPlotAggregatedFieldWells
    
    """
    
    BoxPlotAggregatedFieldWells_: Optional['BoxPlotAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotfieldwells.html#cfn-quicksight-analysis-boxplotfieldwells-boxplotaggregatedfieldwells""", alias="BoxPlotAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotFieldWells:
        from troposphere.quicksight import BoxPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html
    Properties:
        - Name: StyleOptions
        - Name: OutlierVisibility
        - Name: AllDataPointsVisibility
    
    """
    
    StyleOptions_: Optional['BoxPlotStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-styleoptions""", alias="StyleOptions")
    OutlierVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-outliervisibility""", alias="OutlierVisibility")
    AllDataPointsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotoptions.html#cfn-quicksight-analysis-boxplotoptions-alldatapointsvisibility""", alias="AllDataPointsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotOptions:
        from troposphere.quicksight import BoxPlotOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html
    Properties:
        - Name: CategorySort
        - Name: PaginationConfiguration
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-categorysort""", alias="CategorySort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotsortconfiguration.html#cfn-quicksight-analysis-boxplotsortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotSortConfiguration:
        from troposphere.quicksight import BoxPlotSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotstyleoptions.html
    Properties:
        - Name: FillStyle
    
    """
    
    FillStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotstyleoptions.html#cfn-quicksight-analysis-boxplotstyleoptions-fillstyle""", alias="FillStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotStyleOptions:
        from troposphere.quicksight import BoxPlotStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BoxPlotChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-boxplotvisual.html#cfn-quicksight-analysis-boxplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotVisual:
        from troposphere.quicksight import BoxPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
        - Name: Name
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-expression""", alias="Expression")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-datasetidentifier""", alias="DataSetIdentifier")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedfield.html#cfn-quicksight-analysis-calculatedfield-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedField:
        from troposphere.quicksight import CalculatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html
    Properties:
        - Name: Expression
        - Name: FieldId
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-expression""", alias="Expression")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-calculatedmeasurefield.html#cfn-quicksight-analysis-calculatedmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedMeasureField:
        from troposphere.quicksight import CalculatedMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolconfiguration.html
    Properties:
        - Name: SourceControls
    
    """
    
    SourceControls_: Optional[List['CascadingControlSource']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolconfiguration.html#cfn-quicksight-analysis-cascadingcontrolconfiguration-sourcecontrols""", alias="SourceControls")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlConfiguration:
        from troposphere.quicksight import CascadingControlConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlSource(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html
    Properties:
        - Name: SourceSheetControlId
        - Name: ColumnToMatch
    
    """
    
    SourceSheetControlId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-sourcesheetcontrolid""", alias="SourceSheetControlId")
    ColumnToMatch_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-cascadingcontrolsource.html#cfn-quicksight-analysis-cascadingcontrolsource-columntomatch""", alias="ColumnToMatch")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlSource:
        from troposphere.quicksight import CascadingControlSource as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricaldimensionfield.html#cfn-quicksight-analysis-categoricaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalDimensionField:
        from troposphere.quicksight import CategoricalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoricalmeasurefield.html#cfn-quicksight-analysis-categoricalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalMeasureField:
        from troposphere.quicksight import CategoricalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: CategoryValues
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-column""", alias="Column")
    CategoryValues_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categorydrilldownfilter.html#cfn-quicksight-analysis-categorydrilldownfilter-categoryvalues""", alias="CategoryValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryDrillDownFilter:
        from troposphere.quicksight import CategoryDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html
    Properties:
        - Name: Configuration
        - Name: Column
        - Name: FilterId
    
    """
    
    Configuration_: 'CategoryFilterConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-configuration""", alias="Configuration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-column""", alias="Column")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilter.html#cfn-quicksight-analysis-categoryfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilter:
        from troposphere.quicksight import CategoryFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html
    Properties:
        - Name: CustomFilterListConfiguration
        - Name: CustomFilterConfiguration
        - Name: FilterListConfiguration
    
    """
    
    CustomFilterListConfiguration_: Optional['CustomFilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterlistconfiguration""", alias="CustomFilterListConfiguration")
    CustomFilterConfiguration_: Optional['CustomFilterConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-customfilterconfiguration""", alias="CustomFilterConfiguration")
    FilterListConfiguration_: Optional['FilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-categoryfilterconfiguration.html#cfn-quicksight-analysis-categoryfilterconfiguration-filterlistconfiguration""", alias="FilterListConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilterConfiguration:
        from troposphere.quicksight import CategoryFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ChartAxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html
    Properties:
        - Name: Visibility
        - Name: SortIconVisibility
        - Name: AxisLabelOptions
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-visibility""", alias="Visibility")
    SortIconVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-sorticonvisibility""", alias="SortIconVisibility")
    AxisLabelOptions_: Optional[List['AxisLabelOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-chartaxislabeloptions.html#cfn-quicksight-analysis-chartaxislabeloptions-axislabeloptions""", alias="AxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ChartAxisLabelOptions:
        from troposphere.quicksight import ChartAxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarker.html
    Properties:
        - Name: SimpleClusterMarker
    
    """
    
    SimpleClusterMarker_: Optional['SimpleClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarker.html#cfn-quicksight-analysis-clustermarker-simpleclustermarker""", alias="SimpleClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarker:
        from troposphere.quicksight import ClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarkerConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarkerconfiguration.html
    Properties:
        - Name: ClusterMarker
    
    """
    
    ClusterMarker_: Optional['ClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-clustermarkerconfiguration.html#cfn-quicksight-analysis-clustermarkerconfiguration-clustermarker""", alias="ClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarkerConfiguration:
        from troposphere.quicksight import ClusterMarkerConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html
    Properties:
        - Name: Colors
        - Name: ColorFillType
        - Name: NullValueColor
    
    """
    
    Colors_: List['DataColor'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colors""", alias="Colors")
    ColorFillType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-colorfilltype""", alias="ColorFillType")
    NullValueColor_: Optional['DataColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorscale.html#cfn-quicksight-analysis-colorscale-nullvaluecolor""", alias="NullValueColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorScale:
        from troposphere.quicksight import ColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorsconfiguration.html
    Properties:
        - Name: CustomColors
    
    """
    
    CustomColors_: Optional[List['CustomColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-colorsconfiguration.html#cfn-quicksight-analysis-colorsconfiguration-customcolors""", alias="CustomColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorsConfiguration:
        from troposphere.quicksight import ColorsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html
    Properties:
        - Name: Role
        - Name: FormatConfiguration
        - Name: Column
        - Name: ColorsConfiguration
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-role""", alias="Role")
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-column""", alias="Column")
    ColorsConfiguration_: Optional['ColorsConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnconfiguration.html#cfn-quicksight-analysis-columnconfiguration-colorsconfiguration""", alias="ColorsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnConfiguration:
        from troposphere.quicksight import ColumnConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html
    Properties:
        - Name: DateTimeHierarchy
        - Name: ExplicitHierarchy
        - Name: PredefinedHierarchy
    
    """
    
    DateTimeHierarchy_: Optional['DateTimeHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-datetimehierarchy""", alias="DateTimeHierarchy")
    ExplicitHierarchy_: Optional['ExplicitHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-explicithierarchy""", alias="ExplicitHierarchy")
    PredefinedHierarchy_: Optional['PredefinedHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnhierarchy.html#cfn-quicksight-analysis-columnhierarchy-predefinedhierarchy""", alias="PredefinedHierarchy")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnHierarchy:
        from troposphere.quicksight import ColumnHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnIdentifier(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html
    Properties:
        - Name: ColumnName
        - Name: DataSetIdentifier
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-columnname""", alias="ColumnName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnidentifier.html#cfn-quicksight-analysis-columnidentifier-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnIdentifier:
        from troposphere.quicksight import ColumnIdentifier as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html
    Properties:
        - Name: AggregationFunction
        - Name: SortBy
        - Name: Direction
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-aggregationfunction""", alias="AggregationFunction")
    SortBy_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-sortby""", alias="SortBy")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columnsort.html#cfn-quicksight-analysis-columnsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnSort:
        from troposphere.quicksight import ColumnSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html
    Properties:
        - Name: Aggregation
        - Name: Column
        - Name: Label
        - Name: Visibility
    
    """
    
    Aggregation_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-aggregation""", alias="Aggregation")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-column""", alias="Column")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-columntooltipitem.html#cfn-quicksight-analysis-columntooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnTooltipItem:
        from troposphere.quicksight import ColumnTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html
    Properties:
        - Name: BarValues
        - Name: Category
        - Name: Colors
        - Name: LineValues
    
    """
    
    BarValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-barvalues""", alias="BarValues")
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-colors""", alias="Colors")
    LineValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartaggregatedfieldwells.html#cfn-quicksight-analysis-combochartaggregatedfieldwells-linevalues""", alias="LineValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartAggregatedFieldWells:
        from troposphere.quicksight import ComboChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: ColorLabelOptions
        - Name: BarDataLabels
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: BarsArrangement
        - Name: SecondaryYAxisLabelOptions
        - Name: LineDataLabels
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
    
    """
    
    SortConfiguration_: Optional['ComboChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-referencelines""", alias="ReferenceLines")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    BarDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-bardatalabels""", alias="BarDataLabels")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-tooltip""", alias="Tooltip")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-visualpalette""", alias="VisualPalette")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-barsarrangement""", alias="BarsArrangement")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    LineDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-linedatalabels""", alias="LineDataLabels")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['ComboChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartconfiguration.html#cfn-quicksight-analysis-combochartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartConfiguration:
        from troposphere.quicksight import ComboChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartfieldwells.html
    Properties:
        - Name: ComboChartAggregatedFieldWells
    
    """
    
    ComboChartAggregatedFieldWells_: Optional['ComboChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartfieldwells.html#cfn-quicksight-analysis-combochartfieldwells-combochartaggregatedfieldwells""", alias="ComboChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartFieldWells:
        from troposphere.quicksight import ComboChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartsortconfiguration.html#cfn-quicksight-analysis-combochartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartSortConfiguration:
        from troposphere.quicksight import ComboChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ComboChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-combochartvisual.html#cfn-quicksight-analysis-combochartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartVisual:
        from troposphere.quicksight import ComboChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html
    Properties:
        - Name: ComparisonMethod
        - Name: ComparisonFormat
    
    """
    
    ComparisonMethod_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonmethod""", alias="ComparisonMethod")
    ComparisonFormat_: Optional['ComparisonFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonconfiguration.html#cfn-quicksight-analysis-comparisonconfiguration-comparisonformat""", alias="ComparisonFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonConfiguration:
        from troposphere.quicksight import ComparisonConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-comparisonformatconfiguration.html#cfn-quicksight-analysis-comparisonformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonFormatConfiguration:
        from troposphere.quicksight import ComparisonFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Computation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html
    Properties:
        - Name: PeriodToDate
        - Name: GrowthRate
        - Name: TopBottomRanked
        - Name: TotalAggregation
        - Name: Forecast
        - Name: MaximumMinimum
        - Name: PeriodOverPeriod
        - Name: MetricComparison
        - Name: TopBottomMovers
        - Name: UniqueValues
    
    """
    
    PeriodToDate_: Optional['PeriodToDateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodtodate""", alias="PeriodToDate")
    GrowthRate_: Optional['GrowthRateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-growthrate""", alias="GrowthRate")
    TopBottomRanked_: Optional['TopBottomRankedComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottomranked""", alias="TopBottomRanked")
    TotalAggregation_: Optional['TotalAggregationComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-totalaggregation""", alias="TotalAggregation")
    Forecast_: Optional['ForecastComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-forecast""", alias="Forecast")
    MaximumMinimum_: Optional['MaximumMinimumComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-maximumminimum""", alias="MaximumMinimum")
    PeriodOverPeriod_: Optional['PeriodOverPeriodComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-periodoverperiod""", alias="PeriodOverPeriod")
    MetricComparison_: Optional['MetricComparisonComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-metriccomparison""", alias="MetricComparison")
    TopBottomMovers_: Optional['TopBottomMoversComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-topbottommovers""", alias="TopBottomMovers")
    UniqueValues_: Optional['UniqueValuesComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-computation.html#cfn-quicksight-analysis-computation-uniquevalues""", alias="UniqueValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Computation:
        from troposphere.quicksight import Computation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html
    Properties:
        - Name: Gradient
        - Name: Solid
    
    """
    
    Gradient_: Optional['ConditionalFormattingGradientColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-gradient""", alias="Gradient")
    Solid_: Optional['ConditionalFormattingSolidColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcolor.html#cfn-quicksight-analysis-conditionalformattingcolor-solid""", alias="Solid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingColor:
        from troposphere.quicksight import ConditionalFormattingColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconCondition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html
    Properties:
        - Name: Expression
        - Name: Color
        - Name: DisplayConfiguration
        - Name: IconOptions
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-color""", alias="Color")
    DisplayConfiguration_: Optional['ConditionalFormattingIconDisplayConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-displayconfiguration""", alias="DisplayConfiguration")
    IconOptions_: 'ConditionalFormattingCustomIconOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconcondition.html#cfn-quicksight-analysis-conditionalformattingcustomiconcondition-iconoptions""", alias="IconOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconCondition:
        from troposphere.quicksight import ConditionalFormattingCustomIconCondition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html
    Properties:
        - Name: UnicodeIcon
        - Name: Icon
    
    """
    
    UnicodeIcon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-unicodeicon""", alias="UnicodeIcon")
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingcustomiconoptions.html#cfn-quicksight-analysis-conditionalformattingcustomiconoptions-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconOptions:
        from troposphere.quicksight import ConditionalFormattingCustomIconOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingGradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-expression""", alias="Expression")
    Color_: 'GradientColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattinggradientcolor.html#cfn-quicksight-analysis-conditionalformattinggradientcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingGradientColor:
        from troposphere.quicksight import ConditionalFormattingGradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIcon(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html
    Properties:
        - Name: CustomCondition
        - Name: IconSet
    
    """
    
    CustomCondition_: Optional['ConditionalFormattingCustomIconCondition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-customcondition""", alias="CustomCondition")
    IconSet_: Optional['ConditionalFormattingIconSet'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicon.html#cfn-quicksight-analysis-conditionalformattingicon-iconset""", alias="IconSet")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIcon:
        from troposphere.quicksight import ConditionalFormattingIcon as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconDisplayConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicondisplayconfiguration.html
    Properties:
        - Name: IconDisplayOption
    
    """
    
    IconDisplayOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingicondisplayconfiguration.html#cfn-quicksight-analysis-conditionalformattingicondisplayconfiguration-icondisplayoption""", alias="IconDisplayOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconDisplayConfiguration:
        from troposphere.quicksight import ConditionalFormattingIconDisplayConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconSet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html
    Properties:
        - Name: Expression
        - Name: IconSetType
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-expression""", alias="Expression")
    IconSetType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingiconset.html#cfn-quicksight-analysis-conditionalformattingiconset-iconsettype""", alias="IconSetType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconSet:
        from troposphere.quicksight import ConditionalFormattingIconSet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingSolidColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-conditionalformattingsolidcolor.html#cfn-quicksight-analysis-conditionalformattingsolidcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingSolidColor:
        from troposphere.quicksight import ConditionalFormattingSolidColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ContributionAnalysisDefault(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html
    Properties:
        - Name: MeasureFieldId
        - Name: ContributorDimensions
    
    """
    
    MeasureFieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-measurefieldid""", alias="MeasureFieldId")
    ContributorDimensions_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-contributionanalysisdefault.html#cfn-quicksight-analysis-contributionanalysisdefault-contributordimensions""", alias="ContributorDimensions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ContributionAnalysisDefault:
        from troposphere.quicksight import ContributionAnalysisDefault as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CurrencyDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Symbol
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-symbol""", alias="Symbol")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-currencydisplayformatconfiguration.html#cfn-quicksight-analysis-currencydisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CurrencyDisplayFormatConfiguration:
        from troposphere.quicksight import CurrencyDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionFilterOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html
    Properties:
        - Name: SelectedFieldsConfiguration
        - Name: TargetVisualsConfiguration
    
    """
    
    SelectedFieldsConfiguration_: 'FilterOperationSelectedFieldsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-selectedfieldsconfiguration""", alias="SelectedFieldsConfiguration")
    TargetVisualsConfiguration_: 'FilterOperationTargetVisualsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionfilteroperation.html#cfn-quicksight-analysis-customactionfilteroperation-targetvisualsconfiguration""", alias="TargetVisualsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionFilterOperation:
        from troposphere.quicksight import CustomActionFilterOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionNavigationOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionnavigationoperation.html
    Properties:
        - Name: LocalNavigationConfiguration
    
    """
    
    LocalNavigationConfiguration_: Optional['LocalNavigationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionnavigationoperation.html#cfn-quicksight-analysis-customactionnavigationoperation-localnavigationconfiguration""", alias="LocalNavigationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionNavigationOperation:
        from troposphere.quicksight import CustomActionNavigationOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionSetParametersOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionsetparametersoperation.html
    Properties:
        - Name: ParameterValueConfigurations
    
    """
    
    ParameterValueConfigurations_: List['SetParameterValueConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionsetparametersoperation.html#cfn-quicksight-analysis-customactionsetparametersoperation-parametervalueconfigurations""", alias="ParameterValueConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionSetParametersOperation:
        from troposphere.quicksight import CustomActionSetParametersOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionURLOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html
    Properties:
        - Name: URLTemplate
        - Name: URLTarget
    
    """
    
    URLTemplate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltemplate""", alias="URLTemplate")
    URLTarget_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customactionurloperation.html#cfn-quicksight-analysis-customactionurloperation-urltarget""", alias="URLTarget")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionURLOperation:
        from troposphere.quicksight import CustomActionURLOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html
    Properties:
        - Name: Color
        - Name: FieldValue
        - Name: SpecialValue
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-color""", alias="Color")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-fieldvalue""", alias="FieldValue")
    SpecialValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcolor.html#cfn-quicksight-analysis-customcolor-specialvalue""", alias="SpecialValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomColor:
        from troposphere.quicksight import CustomColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html
    Properties:
        - Name: ContentUrl
        - Name: ContentType
        - Name: ImageScaling
    
    """
    
    ContentUrl_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenturl""", alias="ContentUrl")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-contenttype""", alias="ContentType")
    ImageScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentconfiguration.html#cfn-quicksight-analysis-customcontentconfiguration-imagescaling""", alias="ImageScaling")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentConfiguration:
        from troposphere.quicksight import CustomContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['CustomContentConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-datasetidentifier""", alias="DataSetIdentifier")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customcontentvisual.html#cfn-quicksight-analysis-customcontentvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentVisual:
        from troposphere.quicksight import CustomContentVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html
    Properties:
        - Name: CategoryValue
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-categoryvalue""", alias="CategoryValue")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterconfiguration.html#cfn-quicksight-analysis-customfilterconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterConfiguration:
        from troposphere.quicksight import CustomFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customfilterlistconfiguration.html#cfn-quicksight-analysis-customfilterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterListConfiguration:
        from troposphere.quicksight import CustomFilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomNarrativeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customnarrativeoptions.html
    Properties:
        - Name: Narrative
    
    """
    
    Narrative_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customnarrativeoptions.html#cfn-quicksight-analysis-customnarrativeoptions-narrative""", alias="Narrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomNarrativeOptions:
        from troposphere.quicksight import CustomNarrativeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomParameterValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html
    Properties:
        - Name: DecimalValues
        - Name: IntegerValues
        - Name: StringValues
        - Name: DateTimeValues
    
    """
    
    DecimalValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-decimalvalues""", alias="DecimalValues")
    IntegerValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-integervalues""", alias="IntegerValues")
    StringValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-stringvalues""", alias="StringValues")
    DateTimeValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customparametervalues.html#cfn-quicksight-analysis-customparametervalues-datetimevalues""", alias="DateTimeValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomParameterValues:
        from troposphere.quicksight import CustomParameterValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomValuesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html
    Properties:
        - Name: IncludeNullValue
        - Name: CustomValues
    
    """
    
    IncludeNullValue_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-includenullvalue""", alias="IncludeNullValue")
    CustomValues_: 'CustomParameterValues' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-customvaluesconfiguration.html#cfn-quicksight-analysis-customvaluesconfiguration-customvalues""", alias="CustomValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomValuesConfiguration:
        from troposphere.quicksight import CustomValuesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataBarsOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html
    Properties:
        - Name: PositiveColor
        - Name: FieldId
        - Name: NegativeColor
    
    """
    
    PositiveColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-positivecolor""", alias="PositiveColor")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-fieldid""", alias="FieldId")
    NegativeColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-databarsoptions.html#cfn-quicksight-analysis-databarsoptions-negativecolor""", alias="NegativeColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataBarsOptions:
        from troposphere.quicksight import DataBarsOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html
    Properties:
        - Name: DataValue
        - Name: Color
    
    """
    
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datacolor.html#cfn-quicksight-analysis-datacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataColor:
        from troposphere.quicksight import DataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataFieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: FieldValue
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-axisbinding""", alias="AxisBinding")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-fieldvalue""", alias="FieldValue")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datafieldseriesitem.html#cfn-quicksight-analysis-datafieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataFieldSeriesItem:
        from troposphere.quicksight import DataFieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html
    Properties:
        - Name: DataLabelTypes
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: LabelContent
        - Name: Visibility
        - Name: TotalsVisibility
        - Name: Overlap
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: LabelFontConfiguration
    
    """
    
    DataLabelTypes_: Optional[List['DataLabelType']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-datalabeltypes""", alias="DataLabelTypes")
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-position""", alias="Position")
    LabelContent_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcontent""", alias="LabelContent")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-visibility""", alias="Visibility")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-totalsvisibility""", alias="TotalsVisibility")
    Overlap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-overlap""", alias="Overlap")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelcolor""", alias="LabelColor")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeloptions.html#cfn-quicksight-analysis-datalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelOptions:
        from troposphere.quicksight import DataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html
    Properties:
        - Name: MaximumLabelType
        - Name: DataPathLabelType
        - Name: RangeEndsLabelType
        - Name: FieldLabelType
        - Name: MinimumLabelType
    
    """
    
    MaximumLabelType_: Optional['MaximumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-maximumlabeltype""", alias="MaximumLabelType")
    DataPathLabelType_: Optional['DataPathLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-datapathlabeltype""", alias="DataPathLabelType")
    RangeEndsLabelType_: Optional['RangeEndsLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-rangeendslabeltype""", alias="RangeEndsLabelType")
    FieldLabelType_: Optional['FieldLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-fieldlabeltype""", alias="FieldLabelType")
    MinimumLabelType_: Optional['MinimumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datalabeltype.html#cfn-quicksight-analysis-datalabeltype-minimumlabeltype""", alias="MinimumLabelType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelType:
        from troposphere.quicksight import DataLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html
    Properties:
        - Name: Element
        - Name: Color
        - Name: TimeGranularity
    
    """
    
    Element_: 'DataPathValue' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-element""", alias="Element")
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-color""", alias="Color")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathcolor.html#cfn-quicksight-analysis-datapathcolor-timegranularity""", alias="TimeGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathColor:
        from troposphere.quicksight import DataPathColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
        - Name: FieldValue
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-visibility""", alias="Visibility")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathlabeltype.html#cfn-quicksight-analysis-datapathlabeltype-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathLabelType:
        from troposphere.quicksight import DataPathLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html
    Properties:
        - Name: SortPaths
        - Name: Direction
    
    """
    
    SortPaths_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-sortpaths""", alias="SortPaths")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathsort.html#cfn-quicksight-analysis-datapathsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathSort:
        from troposphere.quicksight import DataPathSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathtype.html
    Properties:
        - Name: PivotTableDataPathType
    
    """
    
    PivotTableDataPathType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathtype.html#cfn-quicksight-analysis-datapathtype-pivottabledatapathtype""", alias="PivotTableDataPathType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathType:
        from troposphere.quicksight import DataPathType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html
    Properties:
        - Name: DataPathType
        - Name: FieldId
        - Name: FieldValue
    
    """
    
    DataPathType_: Optional['DataPathType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-datapathtype""", alias="DataPathType")
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldid""", alias="FieldId")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datapathvalue.html#cfn-quicksight-analysis-datapathvalue-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathValue:
        from troposphere.quicksight import DataPathValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetIdentifierDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html
    Properties:
        - Name: Identifier
        - Name: DataSetArn
    
    """
    
    Identifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-identifier""", alias="Identifier")
    DataSetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetidentifierdeclaration.html#cfn-quicksight-analysis-datasetidentifierdeclaration-datasetarn""", alias="DataSetArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetIdentifierDeclaration:
        from troposphere.quicksight import DataSetIdentifierDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetReference(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html
    Properties:
        - Name: DataSetArn
        - Name: DataSetPlaceholder
    
    """
    
    DataSetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetarn""", alias="DataSetArn")
    DataSetPlaceholder_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datasetreference.html#cfn-quicksight-analysis-datasetreference-datasetplaceholder""", alias="DataSetPlaceholder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetReference:
        from troposphere.quicksight import DataSetReference as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dateaxisoptions.html
    Properties:
        - Name: MissingDateVisibility
    
    """
    
    MissingDateVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dateaxisoptions.html#cfn-quicksight-analysis-dateaxisoptions-missingdatevisibility""", alias="MissingDateVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateAxisOptions:
        from troposphere.quicksight import DateAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
        - Name: DateGranularity
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-fieldid""", alias="FieldId")
    DateGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datedimensionfield.html#cfn-quicksight-analysis-datedimensionfield-dategranularity""", alias="DateGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateDimensionField:
        from troposphere.quicksight import DateDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datemeasurefield.html#cfn-quicksight-analysis-datemeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateMeasureField:
        from troposphere.quicksight import DateMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html
    Properties:
        - Name: RollingDate
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-rollingdate""", alias="RollingDate")
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimedefaultvalues.html#cfn-quicksight-analysis-datetimedefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeDefaultValues:
        from troposphere.quicksight import DateTimeDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
        - Name: DateTimeFormat
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeformatconfiguration.html#cfn-quicksight-analysis-datetimeformatconfiguration-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeFormatConfiguration:
        from troposphere.quicksight import DateTimeFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimehierarchy.html#cfn-quicksight-analysis-datetimehierarchy-drilldownfilters""", alias="DrillDownFilters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeHierarchy:
        from troposphere.quicksight import DateTimeHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameter.html#cfn-quicksight-analysis-datetimeparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeParameter:
        from troposphere.quicksight import DateTimeParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: TimeGranularity
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DateTimeDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-defaultvalues""", alias="DefaultValues")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-timegranularity""", alias="TimeGranularity")
    ValueWhenUnset_: Optional['DateTimeValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimeparameterdeclaration.html#cfn-quicksight-analysis-datetimeparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeParameterDeclaration:
        from troposphere.quicksight import DateTimeParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimePickerControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimepickercontroldisplayoptions.html#cfn-quicksight-analysis-datetimepickercontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimePickerControlDisplayOptions:
        from troposphere.quicksight import DateTimePickerControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-analysis-datetimevaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeValueWhenUnsetConfiguration:
        from troposphere.quicksight import DateTimeValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimaldefaultvalues.html#cfn-quicksight-analysis-decimaldefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalDefaultValues:
        from troposphere.quicksight import DecimalDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[float] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameter.html#cfn-quicksight-analysis-decimalparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalParameter:
        from troposphere.quicksight import DecimalParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DecimalDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['DecimalValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalparameterdeclaration.html#cfn-quicksight-analysis-decimalparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalParameterDeclaration:
        from troposphere.quicksight import DecimalParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalPlacesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalplacesconfiguration.html
    Properties:
        - Name: DecimalPlaces
    
    """
    
    DecimalPlaces_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalplacesconfiguration.html#cfn-quicksight-analysis-decimalplacesconfiguration-decimalplaces""", alias="DecimalPlaces")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalPlacesConfiguration:
        from troposphere.quicksight import DecimalPlacesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-decimalvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalValueWhenUnsetConfiguration:
        from troposphere.quicksight import DecimalValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultFreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultfreeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'FreeFormLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultfreeformlayoutconfiguration.html#cfn-quicksight-analysis-defaultfreeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultFreeFormLayoutConfiguration:
        from troposphere.quicksight import DefaultFreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultGridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultgridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'GridLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultgridlayoutconfiguration.html#cfn-quicksight-analysis-defaultgridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultGridLayoutConfiguration:
        from troposphere.quicksight import DefaultGridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultInteractiveLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html
    Properties:
        - Name: FreeForm
        - Name: Grid
    
    """
    
    FreeForm_: Optional['DefaultFreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-freeform""", alias="FreeForm")
    Grid_: Optional['DefaultGridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultinteractivelayoutconfiguration.html#cfn-quicksight-analysis-defaultinteractivelayoutconfiguration-grid""", alias="Grid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultInteractiveLayoutConfiguration:
        from troposphere.quicksight import DefaultInteractiveLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultNewSheetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html
    Properties:
        - Name: SheetContentType
        - Name: InteractiveLayoutConfiguration
        - Name: PaginatedLayoutConfiguration
    
    """
    
    SheetContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-sheetcontenttype""", alias="SheetContentType")
    InteractiveLayoutConfiguration_: Optional['DefaultInteractiveLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-interactivelayoutconfiguration""", alias="InteractiveLayoutConfiguration")
    PaginatedLayoutConfiguration_: Optional['DefaultPaginatedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultnewsheetconfiguration.html#cfn-quicksight-analysis-defaultnewsheetconfiguration-paginatedlayoutconfiguration""", alias="PaginatedLayoutConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultNewSheetConfiguration:
        from troposphere.quicksight import DefaultNewSheetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultPaginatedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultpaginatedlayoutconfiguration.html
    Properties:
        - Name: SectionBased
    
    """
    
    SectionBased_: Optional['DefaultSectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultpaginatedlayoutconfiguration.html#cfn-quicksight-analysis-defaultpaginatedlayoutconfiguration-sectionbased""", alias="SectionBased")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultPaginatedLayoutConfiguration:
        from troposphere.quicksight import DefaultPaginatedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultSectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultsectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-defaultsectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-defaultsectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultSectionBasedLayoutConfiguration:
        from troposphere.quicksight import DefaultSectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DestinationParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html
    Properties:
        - Name: CustomValuesConfiguration
        - Name: SourceParameterName
        - Name: SelectAllValueOptions
        - Name: SourceField
        - Name: SourceColumn
    
    """
    
    CustomValuesConfiguration_: Optional['CustomValuesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-customvaluesconfiguration""", alias="CustomValuesConfiguration")
    SourceParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourceparametername""", alias="SourceParameterName")
    SelectAllValueOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-selectallvalueoptions""", alias="SelectAllValueOptions")
    SourceField_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcefield""", alias="SourceField")
    SourceColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-destinationparametervalueconfiguration.html#cfn-quicksight-analysis-destinationparametervalueconfiguration-sourcecolumn""", alias="SourceColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DestinationParameterValueConfiguration:
        from troposphere.quicksight import DestinationParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html
    Properties:
        - Name: DateDimensionField
        - Name: NumericalDimensionField
        - Name: CategoricalDimensionField
    
    """
    
    DateDimensionField_: Optional['DateDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-datedimensionfield""", alias="DateDimensionField")
    NumericalDimensionField_: Optional['NumericalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-numericaldimensionfield""", alias="NumericalDimensionField")
    CategoricalDimensionField_: Optional['CategoricalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dimensionfield.html#cfn-quicksight-analysis-dimensionfield-categoricaldimensionfield""", alias="CategoricalDimensionField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DimensionField:
        from troposphere.quicksight import DimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutCenterOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutcenteroptions.html
    Properties:
        - Name: LabelVisibility
    
    """
    
    LabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutcenteroptions.html#cfn-quicksight-analysis-donutcenteroptions-labelvisibility""", alias="LabelVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutCenterOptions:
        from troposphere.quicksight import DonutCenterOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html
    Properties:
        - Name: DonutCenterOptions
        - Name: ArcOptions
    
    """
    
    DonutCenterOptions_: Optional['DonutCenterOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-donutcenteroptions""", alias="DonutCenterOptions")
    ArcOptions_: Optional['ArcOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-donutoptions.html#cfn-quicksight-analysis-donutoptions-arcoptions""", alias="ArcOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutOptions:
        from troposphere.quicksight import DonutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: TimeRangeFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-numericequalityfilter""", alias="NumericEqualityFilter")
    TimeRangeFilter_: Optional['TimeRangeDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-timerangefilter""", alias="TimeRangeFilter")
    CategoryFilter_: Optional['CategoryDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-drilldownfilter.html#cfn-quicksight-analysis-drilldownfilter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DrillDownFilter:
        from troposphere.quicksight import DrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DropDownControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dropdowncontroldisplayoptions.html#cfn-quicksight-analysis-dropdowncontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DropDownControlDisplayOptions:
        from troposphere.quicksight import DropDownControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DynamicDefaultValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html
    Properties:
        - Name: GroupNameColumn
        - Name: DefaultValueColumn
        - Name: UserNameColumn
    
    """
    
    GroupNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-groupnamecolumn""", alias="GroupNameColumn")
    DefaultValueColumn_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-defaultvaluecolumn""", alias="DefaultValueColumn")
    UserNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-dynamicdefaultvalue.html#cfn-quicksight-analysis-dynamicdefaultvalue-usernamecolumn""", alias="UserNameColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DynamicDefaultValue:
        from troposphere.quicksight import DynamicDefaultValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class EmptyVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html
    Properties:
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
    
    """
    
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-emptyvisual.html#cfn-quicksight-analysis-emptyvisual-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.EmptyVisual:
        from troposphere.quicksight import EmptyVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Entity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-entity.html
    Properties:
        - Name: Path
    
    """
    
    Path_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-entity.html#cfn-quicksight-analysis-entity-path""", alias="Path")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Entity:
        from troposphere.quicksight import Entity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExcludePeriodConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html
    Properties:
        - Name: Status
        - Name: Amount
        - Name: Granularity
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-status""", alias="Status")
    Amount_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-amount""", alias="Amount")
    Granularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-excludeperiodconfiguration.html#cfn-quicksight-analysis-excludeperiodconfiguration-granularity""", alias="Granularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExcludePeriodConfiguration:
        from troposphere.quicksight import ExcludePeriodConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExplicitHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-explicithierarchy.html#cfn-quicksight-analysis-explicithierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExplicitHierarchy:
        from troposphere.quicksight import ExplicitHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldBasedTooltip(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html
    Properties:
        - Name: TooltipFields
        - Name: AggregationVisibility
        - Name: TooltipTitleType
    
    """
    
    TooltipFields_: Optional[List['TooltipItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltipfields""", alias="TooltipFields")
    AggregationVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-aggregationvisibility""", alias="AggregationVisibility")
    TooltipTitleType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldbasedtooltip.html#cfn-quicksight-analysis-fieldbasedtooltip-tooltiptitletype""", alias="TooltipTitleType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldBasedTooltip:
        from troposphere.quicksight import FieldBasedTooltip as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldlabeltype.html#cfn-quicksight-analysis-fieldlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldLabelType:
        from troposphere.quicksight import FieldLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-axisbinding""", alias="AxisBinding")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldseriesitem.html#cfn-quicksight-analysis-fieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSeriesItem:
        from troposphere.quicksight import FieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html
    Properties:
        - Name: FieldId
        - Name: Direction
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-fieldid""", alias="FieldId")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsort.html#cfn-quicksight-analysis-fieldsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSort:
        from troposphere.quicksight import FieldSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html
    Properties:
        - Name: FieldSort
        - Name: ColumnSort
    
    """
    
    FieldSort_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-fieldsort""", alias="FieldSort")
    ColumnSort_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldsortoptions.html#cfn-quicksight-analysis-fieldsortoptions-columnsort""", alias="ColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSortOptions:
        from troposphere.quicksight import FieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html
    Properties:
        - Name: FieldId
        - Name: Label
        - Name: Visibility
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-fieldid""", alias="FieldId")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fieldtooltipitem.html#cfn-quicksight-analysis-fieldtooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldTooltipItem:
        from troposphere.quicksight import FieldTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Geospatial
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapaggregatedfieldwells.html#cfn-quicksight-analysis-filledmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapAggregatedFieldWells:
        from troposphere.quicksight import FilledMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: List['FilledMapConditionalFormattingOption'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformatting.html#cfn-quicksight-analysis-filledmapconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormatting:
        from troposphere.quicksight import FilledMapConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformattingoption.html
    Properties:
        - Name: Shape
    
    """
    
    Shape_: 'FilledMapShapeConditionalFormatting' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconditionalformattingoption.html#cfn-quicksight-analysis-filledmapconditionalformattingoption-shape""", alias="Shape")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormattingOption:
        from troposphere.quicksight import FilledMapConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
    
    """
    
    SortConfiguration_: Optional['FilledMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['FilledMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapconfiguration.html#cfn-quicksight-analysis-filledmapconfiguration-windowoptions""", alias="WindowOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConfiguration:
        from troposphere.quicksight import FilledMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapfieldwells.html
    Properties:
        - Name: FilledMapAggregatedFieldWells
    
    """
    
    FilledMapAggregatedFieldWells_: Optional['FilledMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapfieldwells.html#cfn-quicksight-analysis-filledmapfieldwells-filledmapaggregatedfieldwells""", alias="FilledMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapFieldWells:
        from troposphere.quicksight import FilledMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapShapeConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html
    Properties:
        - Name: Format
        - Name: FieldId
    
    """
    
    Format_: Optional['ShapeConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-format""", alias="Format")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapshapeconditionalformatting.html#cfn-quicksight-analysis-filledmapshapeconditionalformatting-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapShapeConditionalFormatting:
        from troposphere.quicksight import FilledMapShapeConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapsortconfiguration.html
    Properties:
        - Name: CategorySort
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapsortconfiguration.html#cfn-quicksight-analysis-filledmapsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapSortConfiguration:
        from troposphere.quicksight import FilledMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['FilledMapConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FilledMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filledmapvisual.html#cfn-quicksight-analysis-filledmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapVisual:
        from troposphere.quicksight import FilledMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Filter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: NumericRangeFilter
        - Name: TimeRangeFilter
        - Name: RelativeDatesFilter
        - Name: TopBottomFilter
        - Name: TimeEqualityFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericequalityfilter""", alias="NumericEqualityFilter")
    NumericRangeFilter_: Optional['NumericRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-numericrangefilter""", alias="NumericRangeFilter")
    TimeRangeFilter_: Optional['TimeRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timerangefilter""", alias="TimeRangeFilter")
    RelativeDatesFilter_: Optional['RelativeDatesFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-relativedatesfilter""", alias="RelativeDatesFilter")
    TopBottomFilter_: Optional['TopBottomFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-topbottomfilter""", alias="TopBottomFilter")
    TimeEqualityFilter_: Optional['TimeEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-timeequalityfilter""", alias="TimeEqualityFilter")
    CategoryFilter_: Optional['CategoryFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filter.html#cfn-quicksight-analysis-filter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Filter:
        from troposphere.quicksight import Filter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
        - Name: RelativeDateTime
    
    """
    
    Slider_: Optional['FilterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-slider""", alias="Slider")
    TextArea_: Optional['FilterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['FilterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['FilterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-textfield""", alias="TextField")
    List_: Optional['FilterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-list""", alias="List")
    DateTimePicker_: Optional['FilterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-datetimepicker""", alias="DateTimePicker")
    RelativeDateTime_: Optional['FilterRelativeDateTimeControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtercontrol.html#cfn-quicksight-analysis-filtercontrol-relativedatetime""", alias="RelativeDateTime")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterControl:
        from troposphere.quicksight import FilterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-type""", alias="Type")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdatetimepickercontrol.html#cfn-quicksight-analysis-filterdatetimepickercontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDateTimePickerControl:
        from troposphere.quicksight import FilterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterdropdowncontrol.html#cfn-quicksight-analysis-filterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDropDownControl:
        from troposphere.quicksight import FilterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterGroup(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html
    Properties:
        - Name: Status
        - Name: Filters
        - Name: CrossDataset
        - Name: ScopeConfiguration
        - Name: FilterGroupId
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-status""", alias="Status")
    Filters_: List['Filter'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filters""", alias="Filters")
    CrossDataset_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-crossdataset""", alias="CrossDataset")
    ScopeConfiguration_: 'FilterScopeConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-scopeconfiguration""", alias="ScopeConfiguration")
    FilterGroupId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtergroup.html#cfn-quicksight-analysis-filtergroup-filtergroupid""", alias="FilterGroupId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterGroup:
        from troposphere.quicksight import FilterGroup as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistconfiguration.html#cfn-quicksight-analysis-filterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListConfiguration:
        from troposphere.quicksight import FilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterlistcontrol.html#cfn-quicksight-analysis-filterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListControl:
        from troposphere.quicksight import FilterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationSelectedFieldsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html
    Properties:
        - Name: SelectedColumns
        - Name: SelectedFields
        - Name: SelectedFieldOptions
    
    """
    
    SelectedColumns_: Optional[List['ColumnIdentifier']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedcolumns""", alias="SelectedColumns")
    SelectedFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfields""", alias="SelectedFields")
    SelectedFieldOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-analysis-filteroperationselectedfieldsconfiguration-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationSelectedFieldsConfiguration:
        from troposphere.quicksight import FilterOperationSelectedFieldsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationTargetVisualsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationtargetvisualsconfiguration.html
    Properties:
        - Name: SameSheetTargetVisualConfiguration
    
    """
    
    SameSheetTargetVisualConfiguration_: Optional['SameSheetTargetVisualConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filteroperationtargetvisualsconfiguration.html#cfn-quicksight-analysis-filteroperationtargetvisualsconfiguration-samesheettargetvisualconfiguration""", alias="SameSheetTargetVisualConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationTargetVisualsConfiguration:
        from troposphere.quicksight import FilterOperationTargetVisualsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterRelativeDateTimeControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['RelativeDateTimeControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterrelativedatetimecontrol.html#cfn-quicksight-analysis-filterrelativedatetimecontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterRelativeDateTimeControl:
        from troposphere.quicksight import FilterRelativeDateTimeControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html
    Properties:
        - Name: AllSheets
        - Name: SelectedSheets
    
    """
    
    AllSheets_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-allsheets""", alias="AllSheets")
    SelectedSheets_: Optional['SelectedSheetsFilterScopeConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterscopeconfiguration.html#cfn-quicksight-analysis-filterscopeconfiguration-selectedsheets""", alias="SelectedSheets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterScopeConfiguration:
        from troposphere.quicksight import FilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterselectablevalues.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterselectablevalues.html#cfn-quicksight-analysis-filterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSelectableValues:
        from troposphere.quicksight import FilterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: StepSize
        - Name: DisplayOptions
        - Name: Title
        - Name: MaximumValue
        - Name: SourceFilterId
        - Name: MinimumValue
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-type""", alias="Type")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-maximumvalue""", alias="MaximumValue")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-sourcefilterid""", alias="SourceFilterId")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filterslidercontrol.html#cfn-quicksight-analysis-filterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSliderControl:
        from troposphere.quicksight import FilterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-filtercontrolid""", alias="FilterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextareacontrol.html#cfn-quicksight-analysis-filtertextareacontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextAreaControl:
        from troposphere.quicksight import FilterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-filtertextfieldcontrol.html#cfn-quicksight-analysis-filtertextfieldcontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextFieldControl:
        from troposphere.quicksight import FilterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html
    Properties:
        - Name: FontStyle
        - Name: FontSize
        - Name: FontDecoration
        - Name: FontColor
        - Name: FontWeight
    
    """
    
    FontStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontstyle""", alias="FontStyle")
    FontSize_: Optional['FontSize'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontsize""", alias="FontSize")
    FontDecoration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontdecoration""", alias="FontDecoration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontcolor""", alias="FontColor")
    FontWeight_: Optional['FontWeight'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontconfiguration.html#cfn-quicksight-analysis-fontconfiguration-fontweight""", alias="FontWeight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontConfiguration:
        from troposphere.quicksight import FontConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontSize(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontsize.html
    Properties:
        - Name: Relative
    
    """
    
    Relative_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontsize.html#cfn-quicksight-analysis-fontsize-relative""", alias="Relative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontSize:
        from troposphere.quicksight import FontSize as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontWeight(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontweight.html
    Properties:
        - Name: Name
    
    """
    
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-fontweight.html#cfn-quicksight-analysis-fontweight-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontWeight:
        from troposphere.quicksight import FontWeight as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: CustomSeasonalityValue
        - Name: Value
        - Name: Time
        - Name: UpperBoundary
        - Name: ComputationId
        - Name: Name
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-seasonality""", alias="Seasonality")
    CustomSeasonalityValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-customseasonalityvalue""", alias="CustomSeasonalityValue")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-time""", alias="Time")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-upperboundary""", alias="UpperBoundary")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-name""", alias="Name")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastcomputation.html#cfn-quicksight-analysis-forecastcomputation-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastComputation:
        from troposphere.quicksight import ForecastComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html
    Properties:
        - Name: ForecastProperties
        - Name: Scenario
    
    """
    
    ForecastProperties_: Optional['TimeBasedForecastProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-forecastproperties""", alias="ForecastProperties")
    Scenario_: Optional['ForecastScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastconfiguration.html#cfn-quicksight-analysis-forecastconfiguration-scenario""", alias="Scenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastConfiguration:
        from troposphere.quicksight import ForecastConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html
    Properties:
        - Name: WhatIfRangeScenario
        - Name: WhatIfPointScenario
    
    """
    
    WhatIfRangeScenario_: Optional['WhatIfRangeScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifrangescenario""", alias="WhatIfRangeScenario")
    WhatIfPointScenario_: Optional['WhatIfPointScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-forecastscenario.html#cfn-quicksight-analysis-forecastscenario-whatifpointscenario""", alias="WhatIfPointScenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastScenario:
        from troposphere.quicksight import ForecastScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html
    Properties:
        - Name: NumberFormatConfiguration
        - Name: DateTimeFormatConfiguration
        - Name: StringFormatConfiguration
    
    """
    
    NumberFormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-numberformatconfiguration""", alias="NumberFormatConfiguration")
    DateTimeFormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-datetimeformatconfiguration""", alias="DateTimeFormatConfiguration")
    StringFormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-formatconfiguration.html#cfn-quicksight-analysis-formatconfiguration-stringformatconfiguration""", alias="StringFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FormatConfiguration:
        from troposphere.quicksight import FormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['FreeFormLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutcanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['FreeFormLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutconfiguration.html#cfn-quicksight-analysis-freeformlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutConfiguration:
        from troposphere.quicksight import FreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: BorderStyle
        - Name: Height
        - Name: Visibility
        - Name: RenderingRules
        - Name: YAxisLocation
        - Name: LoadingAnimation
        - Name: Width
        - Name: BackgroundStyle
        - Name: ElementId
        - Name: XAxisLocation
        - Name: SelectedBorderStyle
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementtype""", alias="ElementType")
    BorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-borderstyle""", alias="BorderStyle")
    Height_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-height""", alias="Height")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-visibility""", alias="Visibility")
    RenderingRules_: Optional[List['SheetElementRenderingRule']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-renderingrules""", alias="RenderingRules")
    YAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-yaxislocation""", alias="YAxisLocation")
    LoadingAnimation_: Optional['LoadingAnimation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-loadinganimation""", alias="LoadingAnimation")
    Width_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-width""", alias="Width")
    BackgroundStyle_: Optional['FreeFormLayoutElementBackgroundStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-backgroundstyle""", alias="BackgroundStyle")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-elementid""", alias="ElementId")
    XAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-xaxislocation""", alias="XAxisLocation")
    SelectedBorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelement.html#cfn-quicksight-analysis-freeformlayoutelement-selectedborderstyle""", alias="SelectedBorderStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElement:
        from troposphere.quicksight import FreeFormLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBackgroundStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-analysis-freeformlayoutelementbackgroundstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBackgroundStyle:
        from troposphere.quicksight import FreeFormLayoutElementBackgroundStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBorderStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutelementborderstyle.html#cfn-quicksight-analysis-freeformlayoutelementborderstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBorderStyle:
        from troposphere.quicksight import FreeFormLayoutElementBorderStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
    
    """
    
    OptimizedViewPortWidth_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-freeformlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormSectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformsectionlayoutconfiguration.html
    Properties:
        - Name: Elements
    
    """
    
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-freeformsectionlayoutconfiguration.html#cfn-quicksight-analysis-freeformsectionlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormSectionLayoutConfiguration:
        from troposphere.quicksight import FreeFormSectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartaggregatedfieldwells.html#cfn-quicksight-analysis-funnelchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartAggregatedFieldWells:
        from troposphere.quicksight import FunnelChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['FunnelChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabelOptions_: Optional['FunnelChartDataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-datalabeloptions""", alias="DataLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['FunnelChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-tooltip""", alias="Tooltip")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartconfiguration.html#cfn-quicksight-analysis-funnelchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartConfiguration:
        from troposphere.quicksight import FunnelChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartDataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html
    Properties:
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: Visibility
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: MeasureDataLabelStyle
        - Name: LabelFontConfiguration
    
    """
    
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-position""", alias="Position")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-visibility""", alias="Visibility")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelcolor""", alias="LabelColor")
    MeasureDataLabelStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-measuredatalabelstyle""", alias="MeasureDataLabelStyle")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartdatalabeloptions.html#cfn-quicksight-analysis-funnelchartdatalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartDataLabelOptions:
        from troposphere.quicksight import FunnelChartDataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartfieldwells.html
    Properties:
        - Name: FunnelChartAggregatedFieldWells
    
    """
    
    FunnelChartAggregatedFieldWells_: Optional['FunnelChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartfieldwells.html#cfn-quicksight-analysis-funnelchartfieldwells-funnelchartaggregatedfieldwells""", alias="FunnelChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartFieldWells:
        from troposphere.quicksight import FunnelChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartsortconfiguration.html#cfn-quicksight-analysis-funnelchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartSortConfiguration:
        from troposphere.quicksight import FunnelChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FunnelChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-funnelchartvisual.html#cfn-quicksight-analysis-funnelchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartVisual:
        from troposphere.quicksight import FunnelChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartArcConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartarcconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartarcconditionalformatting.html#cfn-quicksight-analysis-gaugechartarcconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartArcConditionalFormatting:
        from troposphere.quicksight import GaugeChartArcConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['GaugeChartConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformatting.html#cfn-quicksight-analysis-gaugechartconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormatting:
        from troposphere.quicksight import GaugeChartConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html
    Properties:
        - Name: Arc
        - Name: PrimaryValue
    
    """
    
    Arc_: Optional['GaugeChartArcConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-arc""", alias="Arc")
    PrimaryValue_: Optional['GaugeChartPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconditionalformattingoption.html#cfn-quicksight-analysis-gaugechartconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormattingOption:
        from troposphere.quicksight import GaugeChartConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html
    Properties:
        - Name: DataLabels
        - Name: FieldWells
        - Name: TooltipOptions
        - Name: GaugeChartOptions
        - Name: VisualPalette
    
    """
    
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['GaugeChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-fieldwells""", alias="FieldWells")
    TooltipOptions_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-tooltipoptions""", alias="TooltipOptions")
    GaugeChartOptions_: Optional['GaugeChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-gaugechartoptions""", alias="GaugeChartOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartconfiguration.html#cfn-quicksight-analysis-gaugechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConfiguration:
        from troposphere.quicksight import GaugeChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html
    Properties:
        - Name: TargetValues
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-targetvalues""", alias="TargetValues")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartfieldwells.html#cfn-quicksight-analysis-gaugechartfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartFieldWells:
        from troposphere.quicksight import GaugeChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html
    Properties:
        - Name: Arc
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ArcAxis
        - Name: PrimaryValueFontConfiguration
    
    """
    
    Arc_: Optional['ArcConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arc""", alias="Arc")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ArcAxis_: Optional['ArcAxisConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-arcaxis""", alias="ArcAxis")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartoptions.html#cfn-quicksight-analysis-gaugechartoptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartOptions:
        from troposphere.quicksight import GaugeChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-gaugechartprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartPrimaryValueConditionalFormatting:
        from troposphere.quicksight import GaugeChartPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['GaugeChartConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GaugeChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gaugechartvisual.html#cfn-quicksight-analysis-gaugechartvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartVisual:
        from troposphere.quicksight import GaugeChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialCoordinateBounds(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html
    Properties:
        - Name: West
        - Name: South
        - Name: North
        - Name: East
    
    """
    
    West_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-west""", alias="West")
    South_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-south""", alias="South")
    North_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-north""", alias="North")
    East_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialcoordinatebounds.html#cfn-quicksight-analysis-geospatialcoordinatebounds-east""", alias="East")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialCoordinateBounds:
        from troposphere.quicksight import GeospatialCoordinateBounds as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapcolorscale.html
    Properties:
        - Name: Colors
    
    """
    
    Colors_: Optional[List['GeospatialHeatmapDataColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapcolorscale.html#cfn-quicksight-analysis-geospatialheatmapcolorscale-colors""", alias="Colors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapColorScale:
        from troposphere.quicksight import GeospatialHeatmapColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapconfiguration.html
    Properties:
        - Name: HeatmapColor
    
    """
    
    HeatmapColor_: Optional['GeospatialHeatmapColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapconfiguration.html#cfn-quicksight-analysis-geospatialheatmapconfiguration-heatmapcolor""", alias="HeatmapColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapConfiguration:
        from troposphere.quicksight import GeospatialHeatmapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapDataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapdatacolor.html
    Properties:
        - Name: Color
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialheatmapdatacolor.html#cfn-quicksight-analysis-geospatialheatmapdatacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapDataColor:
        from troposphere.quicksight import GeospatialHeatmapDataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html
    Properties:
        - Name: Colors
        - Name: Values
        - Name: Geospatial
    
    """
    
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapaggregatedfieldwells.html#cfn-quicksight-analysis-geospatialmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapAggregatedFieldWells:
        from troposphere.quicksight import GeospatialMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html
    Properties:
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
        - Name: PointStyleOptions
        - Name: VisualPalette
    
    """
    
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['GeospatialMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-windowoptions""", alias="WindowOptions")
    PointStyleOptions_: Optional['GeospatialPointStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-pointstyleoptions""", alias="PointStyleOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapconfiguration.html#cfn-quicksight-analysis-geospatialmapconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapConfiguration:
        from troposphere.quicksight import GeospatialMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapfieldwells.html
    Properties:
        - Name: GeospatialMapAggregatedFieldWells
    
    """
    
    GeospatialMapAggregatedFieldWells_: Optional['GeospatialMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapfieldwells.html#cfn-quicksight-analysis-geospatialmapfieldwells-geospatialmapaggregatedfieldwells""", alias="GeospatialMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapFieldWells:
        from troposphere.quicksight import GeospatialMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapstyleoptions.html
    Properties:
        - Name: BaseMapStyle
    
    """
    
    BaseMapStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapstyleoptions.html#cfn-quicksight-analysis-geospatialmapstyleoptions-basemapstyle""", alias="BaseMapStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapStyleOptions:
        from troposphere.quicksight import GeospatialMapStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GeospatialMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialmapvisual.html#cfn-quicksight-analysis-geospatialmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapVisual:
        from troposphere.quicksight import GeospatialMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialPointStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html
    Properties:
        - Name: SelectedPointStyle
        - Name: ClusterMarkerConfiguration
        - Name: HeatmapConfiguration
    
    """
    
    SelectedPointStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-selectedpointstyle""", alias="SelectedPointStyle")
    ClusterMarkerConfiguration_: Optional['ClusterMarkerConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-clustermarkerconfiguration""", alias="ClusterMarkerConfiguration")
    HeatmapConfiguration_: Optional['GeospatialHeatmapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialpointstyleoptions.html#cfn-quicksight-analysis-geospatialpointstyleoptions-heatmapconfiguration""", alias="HeatmapConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialPointStyleOptions:
        from troposphere.quicksight import GeospatialPointStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialWindowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html
    Properties:
        - Name: Bounds
        - Name: MapZoomMode
    
    """
    
    Bounds_: Optional['GeospatialCoordinateBounds'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-bounds""", alias="Bounds")
    MapZoomMode_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-geospatialwindowoptions.html#cfn-quicksight-analysis-geospatialwindowoptions-mapzoommode""", alias="MapZoomMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialWindowOptions:
        from troposphere.quicksight import GeospatialWindowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GlobalTableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html
    Properties:
        - Name: UniformBorder
        - Name: SideSpecificBorder
    
    """
    
    UniformBorder_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-uniformborder""", alias="UniformBorder")
    SideSpecificBorder_: Optional['TableSideBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-globaltableborderoptions.html#cfn-quicksight-analysis-globaltableborderoptions-sidespecificborder""", alias="SideSpecificBorder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GlobalTableBorderOptions:
        from troposphere.quicksight import GlobalTableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientcolor.html
    Properties:
        - Name: Stops
    
    """
    
    Stops_: Optional[List['GradientStop']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientcolor.html#cfn-quicksight-analysis-gradientcolor-stops""", alias="Stops")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientColor:
        from troposphere.quicksight import GradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientStop(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html
    Properties:
        - Name: GradientOffset
        - Name: DataValue
        - Name: Color
    
    """
    
    GradientOffset_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-gradientoffset""", alias="GradientOffset")
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gradientstop.html#cfn-quicksight-analysis-gradientstop-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientStop:
        from troposphere.quicksight import GradientStop as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['GridLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutcanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['GridLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['GridLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutconfiguration.html#cfn-quicksight-analysis-gridlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutConfiguration:
        from troposphere.quicksight import GridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: ColumnSpan
        - Name: ColumnIndex
        - Name: RowIndex
        - Name: RowSpan
        - Name: ElementId
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementtype""", alias="ElementType")
    ColumnSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnspan""", alias="ColumnSpan")
    ColumnIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-columnindex""", alias="ColumnIndex")
    RowIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowindex""", alias="RowIndex")
    RowSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-rowspan""", alias="RowSpan")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutelement.html#cfn-quicksight-analysis-gridlayoutelement-elementid""", alias="ElementId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutElement:
        from troposphere.quicksight import GridLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
        - Name: ResizeOption
    
    """
    
    OptimizedViewPortWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    ResizeOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-analysis-gridlayoutscreencanvassizeoptions-resizeoption""", alias="ResizeOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GrowthRateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: PeriodSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-time""", alias="Time")
    PeriodSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-periodsize""", alias="PeriodSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-growthratecomputation.html#cfn-quicksight-analysis-growthratecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GrowthRateComputation:
        from troposphere.quicksight import GrowthRateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeaderFooterSectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html
    Properties:
        - Name: Layout
        - Name: Style
        - Name: SectionId
    
    """
    
    Layout_: 'SectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-layout""", alias="Layout")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-style""", alias="Style")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-headerfootersectionconfiguration.html#cfn-quicksight-analysis-headerfootersectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeaderFooterSectionConfiguration:
        from troposphere.quicksight import HeaderFooterSectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapaggregatedfieldwells.html#cfn-quicksight-analysis-heatmapaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapAggregatedFieldWells:
        from troposphere.quicksight import HeatMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: ColumnLabelOptions
        - Name: Legend
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: RowLabelOptions
    
    """
    
    SortConfiguration_: Optional['HeatMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    ColumnLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-columnlabeloptions""", alias="ColumnLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['HeatMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-colorscale""", alias="ColorScale")
    RowLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapconfiguration.html#cfn-quicksight-analysis-heatmapconfiguration-rowlabeloptions""", alias="RowLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapConfiguration:
        from troposphere.quicksight import HeatMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapfieldwells.html
    Properties:
        - Name: HeatMapAggregatedFieldWells
    
    """
    
    HeatMapAggregatedFieldWells_: Optional['HeatMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapfieldwells.html#cfn-quicksight-analysis-heatmapfieldwells-heatmapaggregatedfieldwells""", alias="HeatMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapFieldWells:
        from troposphere.quicksight import HeatMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html
    Properties:
        - Name: HeatMapRowSort
        - Name: HeatMapRowItemsLimitConfiguration
        - Name: HeatMapColumnItemsLimitConfiguration
        - Name: HeatMapColumnSort
    
    """
    
    HeatMapRowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowsort""", alias="HeatMapRowSort")
    HeatMapRowItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmaprowitemslimitconfiguration""", alias="HeatMapRowItemsLimitConfiguration")
    HeatMapColumnItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnitemslimitconfiguration""", alias="HeatMapColumnItemsLimitConfiguration")
    HeatMapColumnSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapsortconfiguration.html#cfn-quicksight-analysis-heatmapsortconfiguration-heatmapcolumnsort""", alias="HeatMapColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapSortConfiguration:
        from troposphere.quicksight import HeatMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HeatMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-heatmapvisual.html#cfn-quicksight-analysis-heatmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapVisual:
        from troposphere.quicksight import HeatMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramaggregatedfieldwells.html#cfn-quicksight-analysis-histogramaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramAggregatedFieldWells:
        from troposphere.quicksight import HistogramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramBinOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html
    Properties:
        - Name: BinWidth
        - Name: StartValue
        - Name: SelectedBinType
        - Name: BinCount
    
    """
    
    BinWidth_: Optional['BinWidthOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-binwidth""", alias="BinWidth")
    StartValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-startvalue""", alias="StartValue")
    SelectedBinType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-selectedbintype""", alias="SelectedBinType")
    BinCount_: Optional['BinCountOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogrambinoptions.html#cfn-quicksight-analysis-histogrambinoptions-bincount""", alias="BinCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramBinOptions:
        from troposphere.quicksight import HistogramBinOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html
    Properties:
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: BinOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-datalabels""", alias="DataLabels")
    BinOptions_: Optional['HistogramBinOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-binoptions""", alias="BinOptions")
    FieldWells_: Optional['HistogramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramconfiguration.html#cfn-quicksight-analysis-histogramconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramConfiguration:
        from troposphere.quicksight import HistogramConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramfieldwells.html
    Properties:
        - Name: HistogramAggregatedFieldWells
    
    """
    
    HistogramAggregatedFieldWells_: Optional['HistogramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramfieldwells.html#cfn-quicksight-analysis-histogramfieldwells-histogramaggregatedfieldwells""", alias="HistogramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramFieldWells:
        from troposphere.quicksight import HistogramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HistogramConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-histogramvisual.html#cfn-quicksight-analysis-histogramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramVisual:
        from troposphere.quicksight import HistogramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html
    Properties:
        - Name: Computations
        - Name: CustomNarrative
    
    """
    
    Computations_: Optional[List['Computation']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-computations""", alias="Computations")
    CustomNarrative_: Optional['CustomNarrativeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightconfiguration.html#cfn-quicksight-analysis-insightconfiguration-customnarrative""", alias="CustomNarrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightConfiguration:
        from troposphere.quicksight import InsightConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: InsightConfiguration
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-datasetidentifier""", alias="DataSetIdentifier")
    InsightConfiguration_: Optional['InsightConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-insightconfiguration""", alias="InsightConfiguration")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-insightvisual.html#cfn-quicksight-analysis-insightvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightVisual:
        from troposphere.quicksight import InsightVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerdefaultvalues.html#cfn-quicksight-analysis-integerdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerDefaultValues:
        from troposphere.quicksight import IntegerDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[float] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameter.html#cfn-quicksight-analysis-integerparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerParameter:
        from troposphere.quicksight import IntegerParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['IntegerDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['IntegerValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integerparameterdeclaration.html#cfn-quicksight-analysis-integerparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerParameterDeclaration:
        from troposphere.quicksight import IntegerParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-integervaluewhenunsetconfiguration.html#cfn-quicksight-analysis-integervaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerValueWhenUnsetConfiguration:
        from troposphere.quicksight import IntegerValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ItemsLimitConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html
    Properties:
        - Name: ItemsLimit
        - Name: OtherCategories
    
    """
    
    ItemsLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-itemslimit""", alias="ItemsLimit")
    OtherCategories_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-itemslimitconfiguration.html#cfn-quicksight-analysis-itemslimitconfiguration-othercategories""", alias="OtherCategories")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ItemsLimitConfiguration:
        from troposphere.quicksight import ItemsLimitConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIActualValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiactualvalueconditionalformatting.html#cfn-quicksight-analysis-kpiactualvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIActualValueConditionalFormatting:
        from troposphere.quicksight import KPIActualValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIComparisonValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-analysis-kpicomparisonvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIComparisonValueConditionalFormatting:
        from troposphere.quicksight import KPIComparisonValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['KPIConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformatting.html#cfn-quicksight-analysis-kpiconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormatting:
        from troposphere.quicksight import KPIConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html
    Properties:
        - Name: PrimaryValue
        - Name: ActualValue
        - Name: ComparisonValue
        - Name: ProgressBar
    
    """
    
    PrimaryValue_: Optional['KPIPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    ActualValue_: Optional['KPIActualValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-actualvalue""", alias="ActualValue")
    ComparisonValue_: Optional['KPIComparisonValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-comparisonvalue""", alias="ComparisonValue")
    ProgressBar_: Optional['KPIProgressBarConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconditionalformattingoption.html#cfn-quicksight-analysis-kpiconditionalformattingoption-progressbar""", alias="ProgressBar")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormattingOption:
        from troposphere.quicksight import KPIConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: KPIOptions
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['KPISortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-sortconfiguration""", alias="SortConfiguration")
    KPIOptions_: Optional['KPIOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-kpioptions""", alias="KPIOptions")
    FieldWells_: Optional['KPIFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiconfiguration.html#cfn-quicksight-analysis-kpiconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConfiguration:
        from troposphere.quicksight import KPIConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html
    Properties:
        - Name: TargetValues
        - Name: TrendGroups
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-targetvalues""", alias="TargetValues")
    TrendGroups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-trendgroups""", alias="TrendGroups")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpifieldwells.html#cfn-quicksight-analysis-kpifieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIFieldWells:
        from troposphere.quicksight import KPIFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html
    Properties:
        - Name: SecondaryValueFontConfiguration
        - Name: VisualLayoutOptions
        - Name: TrendArrows
        - Name: SecondaryValue
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ProgressBar
        - Name: PrimaryValueFontConfiguration
        - Name: Sparkline
    
    """
    
    SecondaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvaluefontconfiguration""", alias="SecondaryValueFontConfiguration")
    VisualLayoutOptions_: Optional['KPIVisualLayoutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-visuallayoutoptions""", alias="VisualLayoutOptions")
    TrendArrows_: Optional['TrendArrowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-trendarrows""", alias="TrendArrows")
    SecondaryValue_: Optional['SecondaryValueOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-secondaryvalue""", alias="SecondaryValue")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ProgressBar_: Optional['ProgressBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-progressbar""", alias="ProgressBar")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    Sparkline_: Optional['KPISparklineOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpioptions.html#cfn-quicksight-analysis-kpioptions-sparkline""", alias="Sparkline")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIOptions:
        from troposphere.quicksight import KPIOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-analysis-kpiprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIPrimaryValueConditionalFormatting:
        from troposphere.quicksight import KPIPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIProgressBarConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprogressbarconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpiprogressbarconditionalformatting.html#cfn-quicksight-analysis-kpiprogressbarconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIProgressBarConditionalFormatting:
        from troposphere.quicksight import KPIProgressBarConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisortconfiguration.html
    Properties:
        - Name: TrendGroupSort
    
    """
    
    TrendGroupSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisortconfiguration.html#cfn-quicksight-analysis-kpisortconfiguration-trendgroupsort""", alias="TrendGroupSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISortConfiguration:
        from troposphere.quicksight import KPISortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISparklineOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html
    Properties:
        - Name: Type
        - Name: Color
        - Name: TooltipVisibility
        - Name: Visibility
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-type""", alias="Type")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-color""", alias="Color")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-tooltipvisibility""", alias="TooltipVisibility")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpisparklineoptions.html#cfn-quicksight-analysis-kpisparklineoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISparklineOptions:
        from troposphere.quicksight import KPISparklineOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['KPIConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['KPIConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisual.html#cfn-quicksight-analysis-kpivisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisual:
        from troposphere.quicksight import KPIVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualLayoutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisuallayoutoptions.html
    Properties:
        - Name: StandardLayout
    
    """
    
    StandardLayout_: Optional['KPIVisualStandardLayout'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisuallayoutoptions.html#cfn-quicksight-analysis-kpivisuallayoutoptions-standardlayout""", alias="StandardLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualLayoutOptions:
        from troposphere.quicksight import KPIVisualLayoutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualStandardLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisualstandardlayout.html
    Properties:
        - Name: Type
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-kpivisualstandardlayout.html#cfn-quicksight-analysis-kpivisualstandardlayout-type""", alias="Type")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualStandardLayout:
        from troposphere.quicksight import KPIVisualStandardLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-labeloptions.html#cfn-quicksight-analysis-labeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LabelOptions:
        from troposphere.quicksight import LabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Layout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'LayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layout.html#cfn-quicksight-analysis-layout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Layout:
        from troposphere.quicksight import Layout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html
    Properties:
        - Name: GridLayout
        - Name: FreeFormLayout
        - Name: SectionBasedLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-gridlayout""", alias="GridLayout")
    FreeFormLayout_: Optional['FreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    SectionBasedLayout_: Optional['SectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-layoutconfiguration.html#cfn-quicksight-analysis-layoutconfiguration-sectionbasedlayout""", alias="SectionBasedLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LayoutConfiguration:
        from troposphere.quicksight import LayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LegendOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html
    Properties:
        - Name: Position
        - Name: Title
        - Name: Visibility
        - Name: Height
        - Name: Width
    
    """
    
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-position""", alias="Position")
    Title_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-title""", alias="Title")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-visibility""", alias="Visibility")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-height""", alias="Height")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-legendoptions.html#cfn-quicksight-analysis-legendoptions-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LegendOptions:
        from troposphere.quicksight import LegendOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartaggregatedfieldwells.html#cfn-quicksight-analysis-linechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartAggregatedFieldWells:
        from troposphere.quicksight import LineChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
        - Name: DefaultSeriesSettings
        - Name: SecondaryYAxisLabelOptions
        - Name: ForecastConfigurations
        - Name: Series
        - Name: Type
        - Name: PrimaryYAxisLabelOptions
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
        - Name: XAxisLabelOptions
    
    """
    
    SortConfiguration_: Optional['LineChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-datalabels""", alias="DataLabels")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    PrimaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    DefaultSeriesSettings_: Optional['LineChartDefaultSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-defaultseriessettings""", alias="DefaultSeriesSettings")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    ForecastConfigurations_: Optional[List['ForecastConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-forecastconfigurations""", alias="ForecastConfigurations")
    Series_: Optional[List['SeriesItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-series""", alias="Series")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-type""", alias="Type")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['LineChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartconfiguration.html#cfn-quicksight-analysis-linechartconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartConfiguration:
        from troposphere.quicksight import LineChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartDefaultSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: AxisBinding
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-linestylesettings""", alias="LineStyleSettings")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-axisbinding""", alias="AxisBinding")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartdefaultseriessettings.html#cfn-quicksight-analysis-linechartdefaultseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartDefaultSeriesSettings:
        from troposphere.quicksight import LineChartDefaultSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartfieldwells.html
    Properties:
        - Name: LineChartAggregatedFieldWells
    
    """
    
    LineChartAggregatedFieldWells_: Optional['LineChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartfieldwells.html#cfn-quicksight-analysis-linechartfieldwells-linechartaggregatedfieldwells""", alias="LineChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartFieldWells:
        from troposphere.quicksight import LineChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartLineStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html
    Properties:
        - Name: LineInterpolation
        - Name: LineStyle
        - Name: LineVisibility
        - Name: LineWidth
    
    """
    
    LineInterpolation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-lineinterpolation""", alias="LineInterpolation")
    LineStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linestyle""", alias="LineStyle")
    LineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linevisibility""", alias="LineVisibility")
    LineWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartlinestylesettings.html#cfn-quicksight-analysis-linechartlinestylesettings-linewidth""", alias="LineWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartLineStyleSettings:
        from troposphere.quicksight import LineChartLineStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartMarkerStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html
    Properties:
        - Name: MarkerShape
        - Name: MarkerSize
        - Name: MarkerVisibility
        - Name: MarkerColor
    
    """
    
    MarkerShape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markershape""", alias="MarkerShape")
    MarkerSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markersize""", alias="MarkerSize")
    MarkerVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markervisibility""", alias="MarkerVisibility")
    MarkerColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartmarkerstylesettings.html#cfn-quicksight-analysis-linechartmarkerstylesettings-markercolor""", alias="MarkerColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartMarkerStyleSettings:
        from troposphere.quicksight import LineChartMarkerStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-linestylesettings""", alias="LineStyleSettings")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartseriessettings.html#cfn-quicksight-analysis-linechartseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSeriesSettings:
        from troposphere.quicksight import LineChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimitConfiguration
        - Name: ColorItemsLimitConfiguration
        - Name: SmallMultiplesSort
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    CategoryItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categoryitemslimitconfiguration""", alias="CategoryItemsLimitConfiguration")
    ColorItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-coloritemslimitconfiguration""", alias="ColorItemsLimitConfiguration")
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartsortconfiguration.html#cfn-quicksight-analysis-linechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSortConfiguration:
        from troposphere.quicksight import LineChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['LineChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-linechartvisual.html#cfn-quicksight-analysis-linechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartVisual:
        from troposphere.quicksight import LineChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineSeriesAxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html
    Properties:
        - Name: MissingDataConfigurations
        - Name: AxisOptions
    
    """
    
    MissingDataConfigurations_: Optional[List['MissingDataConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-missingdataconfigurations""", alias="MissingDataConfigurations")
    AxisOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-lineseriesaxisdisplayoptions.html#cfn-quicksight-analysis-lineseriesaxisdisplayoptions-axisoptions""", alias="AxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineSeriesAxisDisplayOptions:
        from troposphere.quicksight import LineSeriesAxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SearchOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SearchOptions_: Optional['ListControlSearchOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-searchoptions""", alias="SearchOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontroldisplayoptions.html#cfn-quicksight-analysis-listcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlDisplayOptions:
        from troposphere.quicksight import ListControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSearchOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolsearchoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolsearchoptions.html#cfn-quicksight-analysis-listcontrolsearchoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSearchOptions:
        from troposphere.quicksight import ListControlSearchOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSelectAllOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolselectalloptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-listcontrolselectalloptions.html#cfn-quicksight-analysis-listcontrolselectalloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSelectAllOptions:
        from troposphere.quicksight import ListControlSelectAllOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LoadingAnimation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-loadinganimation.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-loadinganimation.html#cfn-quicksight-analysis-loadinganimation-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LoadingAnimation:
        from troposphere.quicksight import LoadingAnimation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LocalNavigationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-localnavigationconfiguration.html
    Properties:
        - Name: TargetSheetId
    
    """
    
    TargetSheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-localnavigationconfiguration.html#cfn-quicksight-analysis-localnavigationconfiguration-targetsheetid""", alias="TargetSheetId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LocalNavigationConfiguration:
        from troposphere.quicksight import LocalNavigationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LongFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-longformattext.html#cfn-quicksight-analysis-longformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LongFormatText:
        from troposphere.quicksight import LongFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MappedDataSetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html
    Properties:
        - Name: DataSetParameterName
        - Name: DataSetIdentifier
    
    """
    
    DataSetParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetparametername""", alias="DataSetParameterName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-mappeddatasetparameter.html#cfn-quicksight-analysis-mappeddatasetparameter-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MappedDataSetParameter:
        from troposphere.quicksight import MappedDataSetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumlabeltype.html#cfn-quicksight-analysis-maximumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumLabelType:
        from troposphere.quicksight import MaximumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumMinimumComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html
    Properties:
        - Name: Type
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-type""", alias="Type")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-maximumminimumcomputation.html#cfn-quicksight-analysis-maximumminimumcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumMinimumComputation:
        from troposphere.quicksight import MaximumMinimumComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html
    Properties:
        - Name: DateMeasureField
        - Name: NumericalMeasureField
        - Name: CategoricalMeasureField
        - Name: CalculatedMeasureField
    
    """
    
    DateMeasureField_: Optional['DateMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-datemeasurefield""", alias="DateMeasureField")
    NumericalMeasureField_: Optional['NumericalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-numericalmeasurefield""", alias="NumericalMeasureField")
    CategoricalMeasureField_: Optional['CategoricalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-categoricalmeasurefield""", alias="CategoricalMeasureField")
    CalculatedMeasureField_: Optional['CalculatedMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-measurefield.html#cfn-quicksight-analysis-measurefield-calculatedmeasurefield""", alias="CalculatedMeasureField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MeasureField:
        from troposphere.quicksight import MeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MetricComparisonComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html
    Properties:
        - Name: TargetValue
        - Name: Time
        - Name: ComputationId
        - Name: FromValue
        - Name: Name
    
    """
    
    TargetValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-targetvalue""", alias="TargetValue")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-computationid""", alias="ComputationId")
    FromValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-fromvalue""", alias="FromValue")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-metriccomparisoncomputation.html#cfn-quicksight-analysis-metriccomparisoncomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MetricComparisonComputation:
        from troposphere.quicksight import MetricComparisonComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MinimumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-minimumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-minimumlabeltype.html#cfn-quicksight-analysis-minimumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MinimumLabelType:
        from troposphere.quicksight import MinimumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MissingDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-missingdataconfiguration.html
    Properties:
        - Name: TreatmentOption
    
    """
    
    TreatmentOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-missingdataconfiguration.html#cfn-quicksight-analysis-missingdataconfiguration-treatmentoption""", alias="TreatmentOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MissingDataConfiguration:
        from troposphere.quicksight import MissingDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NegativeValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-negativevalueconfiguration.html
    Properties:
        - Name: DisplayMode
    
    """
    
    DisplayMode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-negativevalueconfiguration.html#cfn-quicksight-analysis-negativevalueconfiguration-displaymode""", alias="DisplayMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NegativeValueConfiguration:
        from troposphere.quicksight import NegativeValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NullValueFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-nullvalueformatconfiguration.html
    Properties:
        - Name: NullString
    
    """
    
    NullString_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-nullvalueformatconfiguration.html#cfn-quicksight-analysis-nullvalueformatconfiguration-nullstring""", alias="NullString")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NullValueFormatConfiguration:
        from troposphere.quicksight import NullValueFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberdisplayformatconfiguration.html#cfn-quicksight-analysis-numberdisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberDisplayFormatConfiguration:
        from troposphere.quicksight import NumberDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberformatconfiguration.html
    Properties:
        - Name: FormatConfiguration
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numberformatconfiguration.html#cfn-quicksight-analysis-numberformatconfiguration-formatconfiguration""", alias="FormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberFormatConfiguration:
        from troposphere.quicksight import NumberFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html
    Properties:
        - Name: Scale
        - Name: Range
    
    """
    
    Scale_: Optional['AxisScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-scale""", alias="Scale")
    Range_: Optional['AxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaxisoptions.html#cfn-quicksight-analysis-numericaxisoptions-range""", alias="Range")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericAxisOptions:
        from troposphere.quicksight import NumericAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: Value
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-column""", alias="Column")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalitydrilldownfilter.html#cfn-quicksight-analysis-numericequalitydrilldownfilter-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityDrillDownFilter:
        from troposphere.quicksight import NumericEqualityDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: Value
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
        - Name: FilterId
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-column""", alias="Column")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-value""", alias="Value")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericequalityfilter.html#cfn-quicksight-analysis-numericequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityFilter:
        from troposphere.quicksight import NumericEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: CurrencyDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    CurrencyDisplayFormatConfiguration_: Optional['CurrencyDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-currencydisplayformatconfiguration""", alias="CurrencyDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericformatconfiguration.html#cfn-quicksight-analysis-numericformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericFormatConfiguration:
        from troposphere.quicksight import NumericFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: IncludeMaximum
        - Name: RangeMinimum
        - Name: NullOption
        - Name: SelectAllOptions
        - Name: FilterId
        - Name: RangeMaximum
        - Name: IncludeMinimum
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-column""", alias="Column")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includemaximum""", alias="IncludeMaximum")
    RangeMinimum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangeminimum""", alias="RangeMinimum")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-nulloption""", alias="NullOption")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-filterid""", alias="FilterId")
    RangeMaximum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-rangemaximum""", alias="RangeMaximum")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefilter.html#cfn-quicksight-analysis-numericrangefilter-includeminimum""", alias="IncludeMinimum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilter:
        from troposphere.quicksight import NumericRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html
    Properties:
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    StaticValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericrangefiltervalue.html#cfn-quicksight-analysis-numericrangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilterValue:
        from troposphere.quicksight import NumericRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericSeparatorConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html
    Properties:
        - Name: DecimalSeparator
        - Name: ThousandsSeparator
    
    """
    
    DecimalSeparator_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-decimalseparator""", alias="DecimalSeparator")
    ThousandsSeparator_: Optional['ThousandSeparatorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericseparatorconfiguration.html#cfn-quicksight-analysis-numericseparatorconfiguration-thousandsseparator""", alias="ThousandsSeparator")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericSeparatorConfiguration:
        from troposphere.quicksight import NumericSeparatorConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html
    Properties:
        - Name: PercentileAggregation
        - Name: SimpleNumericalAggregation
    
    """
    
    PercentileAggregation_: Optional['PercentileAggregation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-percentileaggregation""", alias="PercentileAggregation")
    SimpleNumericalAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalaggregationfunction.html#cfn-quicksight-analysis-numericalaggregationfunction-simplenumericalaggregation""", alias="SimpleNumericalAggregation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalAggregationFunction:
        from troposphere.quicksight import NumericalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericaldimensionfield.html#cfn-quicksight-analysis-numericaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalDimensionField:
        from troposphere.quicksight import NumericalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-numericalmeasurefield.html#cfn-quicksight-analysis-numericalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalMeasureField:
        from troposphere.quicksight import NumericalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PaginationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html
    Properties:
        - Name: PageSize
        - Name: PageNumber
    
    """
    
    PageSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagesize""", alias="PageSize")
    PageNumber_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paginationconfiguration.html#cfn-quicksight-analysis-paginationconfiguration-pagenumber""", alias="PageNumber")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PaginationConfiguration:
        from troposphere.quicksight import PaginationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html
    Properties:
        - Name: BorderThickness
        - Name: BorderStyle
        - Name: GutterSpacing
        - Name: BackgroundVisibility
        - Name: BorderVisibility
        - Name: BorderColor
        - Name: Title
        - Name: GutterVisibility
        - Name: BackgroundColor
    
    """
    
    BorderThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderthickness""", alias="BorderThickness")
    BorderStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-borderstyle""", alias="BorderStyle")
    GutterSpacing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-gutterspacing""", alias="GutterSpacing")
    BackgroundVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundvisibility""", alias="BackgroundVisibility")
    BorderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordervisibility""", alias="BorderVisibility")
    BorderColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-bordercolor""", alias="BorderColor")
    Title_: Optional['PanelTitleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-title""", alias="Title")
    GutterVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-guttervisibility""", alias="GutterVisibility")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-panelconfiguration.html#cfn-quicksight-analysis-panelconfiguration-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelConfiguration:
        from troposphere.quicksight import PanelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelTitleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html
    Properties:
        - Name: Visibility
        - Name: FontConfiguration
        - Name: HorizontalTextAlignment
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-fontconfiguration""", alias="FontConfiguration")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-paneltitleoptions.html#cfn-quicksight-analysis-paneltitleoptions-horizontaltextalignment""", alias="HorizontalTextAlignment")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelTitleOptions:
        from troposphere.quicksight import PanelTitleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
    
    """
    
    Slider_: Optional['ParameterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-slider""", alias="Slider")
    TextArea_: Optional['ParameterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['ParameterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['ParameterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-textfield""", alias="TextField")
    List_: Optional['ParameterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-list""", alias="List")
    DateTimePicker_: Optional['ParameterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametercontrol.html#cfn-quicksight-analysis-parametercontrol-datetimepicker""", alias="DateTimePicker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterControl:
        from troposphere.quicksight import ParameterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdatetimepickercontrol.html#cfn-quicksight-analysis-parameterdatetimepickercontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDateTimePickerControl:
        from troposphere.quicksight import ParameterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html
    Properties:
        - Name: StringParameterDeclaration
        - Name: DateTimeParameterDeclaration
        - Name: DecimalParameterDeclaration
        - Name: IntegerParameterDeclaration
    
    """
    
    StringParameterDeclaration_: Optional['StringParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-stringparameterdeclaration""", alias="StringParameterDeclaration")
    DateTimeParameterDeclaration_: Optional['DateTimeParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-datetimeparameterdeclaration""", alias="DateTimeParameterDeclaration")
    DecimalParameterDeclaration_: Optional['DecimalParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-decimalparameterdeclaration""", alias="DecimalParameterDeclaration")
    IntegerParameterDeclaration_: Optional['IntegerParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdeclaration.html#cfn-quicksight-analysis-parameterdeclaration-integerparameterdeclaration""", alias="IntegerParameterDeclaration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDeclaration:
        from troposphere.quicksight import ParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterdropdowncontrol.html#cfn-quicksight-analysis-parameterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDropDownControl:
        from troposphere.quicksight import ParameterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterlistcontrol.html#cfn-quicksight-analysis-parameterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterListControl:
        from troposphere.quicksight import ParameterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html
    Properties:
        - Name: LinkToDataSetColumn
        - Name: Values
    
    """
    
    LinkToDataSetColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-linktodatasetcolumn""", alias="LinkToDataSetColumn")
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterselectablevalues.html#cfn-quicksight-analysis-parameterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSelectableValues:
        from troposphere.quicksight import ParameterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: StepSize
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
        - Name: MaximumValue
        - Name: MinimumValue
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-parametercontrolid""", alias="ParameterControlId")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-maximumvalue""", alias="MaximumValue")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameterslidercontrol.html#cfn-quicksight-analysis-parameterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSliderControl:
        from troposphere.quicksight import ParameterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-parametercontrolid""", alias="ParameterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextareacontrol.html#cfn-quicksight-analysis-parametertextareacontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextAreaControl:
        from troposphere.quicksight import ParameterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parametertextfieldcontrol.html#cfn-quicksight-analysis-parametertextfieldcontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextFieldControl:
        from troposphere.quicksight import ParameterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Parameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html
    Properties:
        - Name: StringParameters
        - Name: DecimalParameters
        - Name: IntegerParameters
        - Name: DateTimeParameters
    
    """
    
    StringParameters_: Optional[List['StringParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-stringparameters""", alias="StringParameters")
    DecimalParameters_: Optional[List['DecimalParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-decimalparameters""", alias="DecimalParameters")
    IntegerParameters_: Optional[List['IntegerParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-integerparameters""", alias="IntegerParameters")
    DateTimeParameters_: Optional[List['DateTimeParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-parameters.html#cfn-quicksight-analysis-parameters-datetimeparameters""", alias="DateTimeParameters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Parameters:
        from troposphere.quicksight import Parameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentVisibleRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html
    Properties:
        - Name: From
        - Name: To
    
    """
    
    From_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-from""", alias="From")
    To_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentvisiblerange.html#cfn-quicksight-analysis-percentvisiblerange-to""", alias="To")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentVisibleRange:
        from troposphere.quicksight import PercentVisibleRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentageDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentagedisplayformatconfiguration.html#cfn-quicksight-analysis-percentagedisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentageDisplayFormatConfiguration:
        from troposphere.quicksight import PercentageDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentileAggregation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentileaggregation.html
    Properties:
        - Name: PercentileValue
    
    """
    
    PercentileValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-percentileaggregation.html#cfn-quicksight-analysis-percentileaggregation-percentilevalue""", alias="PercentileValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentileAggregation:
        from troposphere.quicksight import PercentileAggregation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodOverPeriodComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodoverperiodcomputation.html#cfn-quicksight-analysis-periodoverperiodcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodOverPeriodComputation:
        from troposphere.quicksight import PeriodOverPeriodComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodToDateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html
    Properties:
        - Name: PeriodTimeGranularity
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    PeriodTimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-periodtimegranularity""", alias="PeriodTimeGranularity")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-periodtodatecomputation.html#cfn-quicksight-analysis-periodtodatecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodToDateComputation:
        from troposphere.quicksight import PeriodToDateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartaggregatedfieldwells.html#cfn-quicksight-analysis-piechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartAggregatedFieldWells:
        from troposphere.quicksight import PieChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ContributionAnalysisDefaults
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: DonutOptions
        - Name: SmallMultiplesOptions
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['PieChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-datalabels""", alias="DataLabels")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['PieChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-tooltip""", alias="Tooltip")
    DonutOptions_: Optional['DonutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-donutoptions""", alias="DonutOptions")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartconfiguration.html#cfn-quicksight-analysis-piechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartConfiguration:
        from troposphere.quicksight import PieChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartfieldwells.html
    Properties:
        - Name: PieChartAggregatedFieldWells
    
    """
    
    PieChartAggregatedFieldWells_: Optional['PieChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartfieldwells.html#cfn-quicksight-analysis-piechartfieldwells-piechartaggregatedfieldwells""", alias="PieChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartFieldWells:
        from troposphere.quicksight import PieChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartsortconfiguration.html#cfn-quicksight-analysis-piechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartSortConfiguration:
        from troposphere.quicksight import PieChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PieChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-piechartvisual.html#cfn-quicksight-analysis-piechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartVisual:
        from troposphere.quicksight import PieChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotFieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html
    Properties:
        - Name: SortBy
        - Name: FieldId
    
    """
    
    SortBy_: 'PivotTableSortBy' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-sortby""", alias="SortBy")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivotfieldsortoptions.html#cfn-quicksight-analysis-pivotfieldsortoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotFieldSortOptions:
        from troposphere.quicksight import PivotFieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableaggregatedfieldwells.html#cfn-quicksight-analysis-pivottableaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableAggregatedFieldWells:
        from troposphere.quicksight import PivotTableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html
    Properties:
        - Name: Scope
        - Name: Scopes
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    Scope_: Optional['PivotTableConditionalFormattingScope'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scope""", alias="Scope")
    Scopes_: Optional[List['PivotTableConditionalFormattingScope']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-scopes""", alias="Scopes")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablecellconditionalformatting.html#cfn-quicksight-analysis-pivottablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableCellConditionalFormatting:
        from troposphere.quicksight import PivotTableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['PivotTableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformatting.html#cfn-quicksight-analysis-pivottableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormatting:
        from troposphere.quicksight import PivotTableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingoption.html
    Properties:
        - Name: Cell
    
    """
    
    Cell_: Optional['PivotTableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingoption.html#cfn-quicksight-analysis-pivottableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingOption:
        from troposphere.quicksight import PivotTableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingScope(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingscope.html
    Properties:
        - Name: Role
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconditionalformattingscope.html#cfn-quicksight-analysis-pivottableconditionalformattingscope-role""", alias="Role")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingScope:
        from troposphere.quicksight import PivotTableConditionalFormattingScope as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['PivotTableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['PivotTablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['PivotTableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-tableoptions""", alias="TableOptions")
    FieldWells_: Optional['PivotTableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['PivotTableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['PivotTableTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableconfiguration.html#cfn-quicksight-analysis-pivottableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConfiguration:
        from troposphere.quicksight import PivotTableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableDataPathOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html
    Properties:
        - Name: DataPathList
        - Name: Width
    
    """
    
    DataPathList_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-datapathlist""", alias="DataPathList")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabledatapathoption.html#cfn-quicksight-analysis-pivottabledatapathoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableDataPathOption:
        from troposphere.quicksight import PivotTableDataPathOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html
    Properties:
        - Name: Target
        - Name: State
    
    """
    
    Target_: 'PivotTableFieldCollapseStateTarget' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-target""", alias="Target")
    State_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestateoption.html#cfn-quicksight-analysis-pivottablefieldcollapsestateoption-state""", alias="State")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateOption:
        from troposphere.quicksight import PivotTableFieldCollapseStateOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html
    Properties:
        - Name: FieldId
        - Name: FieldDataPathValues
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fieldid""", alias="FieldId")
    FieldDataPathValues_: Optional[List['DataPathValue']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldcollapsestatetarget.html#cfn-quicksight-analysis-pivottablefieldcollapsestatetarget-fielddatapathvalues""", alias="FieldDataPathValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateTarget:
        from troposphere.quicksight import PivotTableFieldCollapseStateTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: FieldId
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-customlabel""", alias="CustomLabel")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoption.html#cfn-quicksight-analysis-pivottablefieldoption-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOption:
        from troposphere.quicksight import PivotTableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html
    Properties:
        - Name: CollapseStateOptions
        - Name: DataPathOptions
        - Name: SelectedFieldOptions
    
    """
    
    CollapseStateOptions_: Optional[List['PivotTableFieldCollapseStateOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-collapsestateoptions""", alias="CollapseStateOptions")
    DataPathOptions_: Optional[List['PivotTableDataPathOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-datapathoptions""", alias="DataPathOptions")
    SelectedFieldOptions_: Optional[List['PivotTableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldoptions.html#cfn-quicksight-analysis-pivottablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOptions:
        from troposphere.quicksight import PivotTableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldSubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldsubtotaloptions.html
    Properties:
        - Name: FieldId
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldsubtotaloptions.html#cfn-quicksight-analysis-pivottablefieldsubtotaloptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldSubtotalOptions:
        from troposphere.quicksight import PivotTableFieldSubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldwells.html
    Properties:
        - Name: PivotTableAggregatedFieldWells
    
    """
    
    PivotTableAggregatedFieldWells_: Optional['PivotTableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablefieldwells.html#cfn-quicksight-analysis-pivottablefieldwells-pivottableaggregatedfieldwells""", alias="PivotTableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldWells:
        from troposphere.quicksight import PivotTableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html
    Properties:
        - Name: RowFieldNamesStyle
        - Name: RowHeaderStyle
        - Name: CollapsedRowDimensionsVisibility
        - Name: RowsLayout
        - Name: MetricPlacement
        - Name: DefaultCellWidth
        - Name: ColumnNamesVisibility
        - Name: RowsLabelOptions
        - Name: SingleMetricVisibility
        - Name: ColumnHeaderStyle
        - Name: ToggleButtonsVisibility
        - Name: CellStyle
        - Name: RowAlternateColorOptions
    
    """
    
    RowFieldNamesStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowfieldnamesstyle""", alias="RowFieldNamesStyle")
    RowHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowheaderstyle""", alias="RowHeaderStyle")
    CollapsedRowDimensionsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-collapsedrowdimensionsvisibility""", alias="CollapsedRowDimensionsVisibility")
    RowsLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslayout""", alias="RowsLayout")
    MetricPlacement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-metricplacement""", alias="MetricPlacement")
    DefaultCellWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-defaultcellwidth""", alias="DefaultCellWidth")
    ColumnNamesVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnnamesvisibility""", alias="ColumnNamesVisibility")
    RowsLabelOptions_: Optional['PivotTableRowsLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowslabeloptions""", alias="RowsLabelOptions")
    SingleMetricVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-singlemetricvisibility""", alias="SingleMetricVisibility")
    ColumnHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-columnheaderstyle""", alias="ColumnHeaderStyle")
    ToggleButtonsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-togglebuttonsvisibility""", alias="ToggleButtonsVisibility")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-cellstyle""", alias="CellStyle")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottableoptions.html#cfn-quicksight-analysis-pivottableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableOptions:
        from troposphere.quicksight import PivotTableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablepaginatedreportoptions.html#cfn-quicksight-analysis-pivottablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTablePaginatedReportOptions:
        from troposphere.quicksight import PivotTablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableRowsLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablerowslabeloptions.html#cfn-quicksight-analysis-pivottablerowslabeloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableRowsLabelOptions:
        from troposphere.quicksight import PivotTableRowsLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortBy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html
    Properties:
        - Name: Field
        - Name: DataPath
        - Name: Column
    
    """
    
    Field_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-field""", alias="Field")
    DataPath_: Optional['DataPathSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-datapath""", alias="DataPath")
    Column_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortby.html#cfn-quicksight-analysis-pivottablesortby-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortBy:
        from troposphere.quicksight import PivotTableSortBy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortconfiguration.html
    Properties:
        - Name: FieldSortOptions
    
    """
    
    FieldSortOptions_: Optional[List['PivotFieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablesortconfiguration.html#cfn-quicksight-analysis-pivottablesortconfiguration-fieldsortoptions""", alias="FieldSortOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortConfiguration:
        from troposphere.quicksight import PivotTableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html
    Properties:
        - Name: ColumnSubtotalOptions
        - Name: RowSubtotalOptions
        - Name: RowTotalOptions
        - Name: ColumnTotalOptions
    
    """
    
    ColumnSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columnsubtotaloptions""", alias="ColumnSubtotalOptions")
    RowSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowsubtotaloptions""", alias="RowSubtotalOptions")
    RowTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-rowtotaloptions""", alias="RowTotalOptions")
    ColumnTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottabletotaloptions.html#cfn-quicksight-analysis-pivottabletotaloptions-columntotaloptions""", alias="ColumnTotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableTotalOptions:
        from troposphere.quicksight import PivotTableTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['PivotTableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PivotTableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottablevisual.html#cfn-quicksight-analysis-pivottablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableVisual:
        from troposphere.quicksight import PivotTableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ValueCellStyle
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: MetricHeaderCellStyle
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-valuecellstyle""", alias="ValueCellStyle")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-totalsvisibility""", alias="TotalsVisibility")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-pivottotaloptions.html#cfn-quicksight-analysis-pivottotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTotalOptions:
        from troposphere.quicksight import PivotTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PredefinedHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-predefinedhierarchy.html#cfn-quicksight-analysis-predefinedhierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PredefinedHierarchy:
        from troposphere.quicksight import PredefinedHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ProgressBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-progressbaroptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-progressbaroptions.html#cfn-quicksight-analysis-progressbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ProgressBarOptions:
        from troposphere.quicksight import ProgressBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Color
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-category""", alias="Category")
    Color_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-color""", alias="Color")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartaggregatedfieldwells.html#cfn-quicksight-analysis-radarchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAggregatedFieldWells:
        from troposphere.quicksight import RadarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAreaStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartareastylesettings.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartareastylesettings.html#cfn-quicksight-analysis-radarchartareastylesettings-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAreaStyleSettings:
        from troposphere.quicksight import RadarChartAreaStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: Shape
        - Name: BaseSeriesSettings
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: AxesRangeScale
        - Name: VisualPalette
        - Name: AlternateBandColorsVisibility
        - Name: StartAngle
        - Name: CategoryAxis
        - Name: FieldWells
        - Name: ColorAxis
        - Name: AlternateBandOddColor
        - Name: AlternateBandEvenColor
    
    """
    
    SortConfiguration_: Optional['RadarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-legend""", alias="Legend")
    Shape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-shape""", alias="Shape")
    BaseSeriesSettings_: Optional['RadarChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-baseseriessettings""", alias="BaseSeriesSettings")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    AxesRangeScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-axesrangescale""", alias="AxesRangeScale")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-visualpalette""", alias="VisualPalette")
    AlternateBandColorsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandcolorsvisibility""", alias="AlternateBandColorsVisibility")
    StartAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-startangle""", alias="StartAngle")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-categoryaxis""", alias="CategoryAxis")
    FieldWells_: Optional['RadarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-fieldwells""", alias="FieldWells")
    ColorAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-coloraxis""", alias="ColorAxis")
    AlternateBandOddColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandoddcolor""", alias="AlternateBandOddColor")
    AlternateBandEvenColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartconfiguration.html#cfn-quicksight-analysis-radarchartconfiguration-alternatebandevencolor""", alias="AlternateBandEvenColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartConfiguration:
        from troposphere.quicksight import RadarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartfieldwells.html
    Properties:
        - Name: RadarChartAggregatedFieldWells
    
    """
    
    RadarChartAggregatedFieldWells_: Optional['RadarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartfieldwells.html#cfn-quicksight-analysis-radarchartfieldwells-radarchartaggregatedfieldwells""", alias="RadarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartFieldWells:
        from troposphere.quicksight import RadarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartseriessettings.html
    Properties:
        - Name: AreaStyleSettings
    
    """
    
    AreaStyleSettings_: Optional['RadarChartAreaStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartseriessettings.html#cfn-quicksight-analysis-radarchartseriessettings-areastylesettings""", alias="AreaStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSeriesSettings:
        from troposphere.quicksight import RadarChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartsortconfiguration.html#cfn-quicksight-analysis-radarchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSortConfiguration:
        from troposphere.quicksight import RadarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['RadarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-radarchartvisual.html#cfn-quicksight-analysis-radarchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartVisual:
        from troposphere.quicksight import RadarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RangeEndsLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rangeendslabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rangeendslabeltype.html#cfn-quicksight-analysis-rangeendslabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RangeEndsLabelType:
        from troposphere.quicksight import RangeEndsLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLine(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html
    Properties:
        - Name: Status
        - Name: DataConfiguration
        - Name: LabelConfiguration
        - Name: StyleConfiguration
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-status""", alias="Status")
    DataConfiguration_: 'ReferenceLineDataConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-dataconfiguration""", alias="DataConfiguration")
    LabelConfiguration_: Optional['ReferenceLineLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-labelconfiguration""", alias="LabelConfiguration")
    StyleConfiguration_: Optional['ReferenceLineStyleConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referenceline.html#cfn-quicksight-analysis-referenceline-styleconfiguration""", alias="StyleConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLine:
        from troposphere.quicksight import ReferenceLine as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineCustomLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinecustomlabelconfiguration.html
    Properties:
        - Name: CustomLabel
    
    """
    
    CustomLabel_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinecustomlabelconfiguration.html#cfn-quicksight-analysis-referencelinecustomlabelconfiguration-customlabel""", alias="CustomLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineCustomLabelConfiguration:
        from troposphere.quicksight import ReferenceLineCustomLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html
    Properties:
        - Name: DynamicConfiguration
        - Name: AxisBinding
        - Name: SeriesType
        - Name: StaticConfiguration
    
    """
    
    DynamicConfiguration_: Optional['ReferenceLineDynamicDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-dynamicconfiguration""", alias="DynamicConfiguration")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-axisbinding""", alias="AxisBinding")
    SeriesType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-seriestype""", alias="SeriesType")
    StaticConfiguration_: Optional['ReferenceLineStaticDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedataconfiguration.html#cfn-quicksight-analysis-referencelinedataconfiguration-staticconfiguration""", alias="StaticConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDataConfiguration:
        from troposphere.quicksight import ReferenceLineDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDynamicDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html
    Properties:
        - Name: Column
        - Name: MeasureAggregationFunction
        - Name: Calculation
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-column""", alias="Column")
    MeasureAggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-measureaggregationfunction""", alias="MeasureAggregationFunction")
    Calculation_: 'NumericalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinedynamicdataconfiguration.html#cfn-quicksight-analysis-referencelinedynamicdataconfiguration-calculation""", alias="Calculation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDynamicDataConfiguration:
        from troposphere.quicksight import ReferenceLineDynamicDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html
    Properties:
        - Name: HorizontalPosition
        - Name: ValueLabelConfiguration
        - Name: CustomLabelConfiguration
        - Name: FontColor
        - Name: FontConfiguration
        - Name: VerticalPosition
    
    """
    
    HorizontalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-horizontalposition""", alias="HorizontalPosition")
    ValueLabelConfiguration_: Optional['ReferenceLineValueLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-valuelabelconfiguration""", alias="ValueLabelConfiguration")
    CustomLabelConfiguration_: Optional['ReferenceLineCustomLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-customlabelconfiguration""", alias="CustomLabelConfiguration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontcolor""", alias="FontColor")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-fontconfiguration""", alias="FontConfiguration")
    VerticalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinelabelconfiguration.html#cfn-quicksight-analysis-referencelinelabelconfiguration-verticalposition""", alias="VerticalPosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineLabelConfiguration:
        from troposphere.quicksight import ReferenceLineLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStaticDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestaticdataconfiguration.html
    Properties:
        - Name: Value
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestaticdataconfiguration.html#cfn-quicksight-analysis-referencelinestaticdataconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStaticDataConfiguration:
        from troposphere.quicksight import ReferenceLineStaticDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStyleConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html
    Properties:
        - Name: Pattern
        - Name: Color
    
    """
    
    Pattern_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-pattern""", alias="Pattern")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinestyleconfiguration.html#cfn-quicksight-analysis-referencelinestyleconfiguration-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStyleConfiguration:
        from troposphere.quicksight import ReferenceLineStyleConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineValueLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html
    Properties:
        - Name: FormatConfiguration
        - Name: RelativePosition
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-formatconfiguration""", alias="FormatConfiguration")
    RelativePosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-referencelinevaluelabelconfiguration.html#cfn-quicksight-analysis-referencelinevaluelabelconfiguration-relativeposition""", alias="RelativePosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineValueLabelConfiguration:
        from troposphere.quicksight import ReferenceLineValueLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDateTimeControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatetimecontroldisplayoptions.html#cfn-quicksight-analysis-relativedatetimecontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDateTimeControlDisplayOptions:
        from troposphere.quicksight import RelativeDateTimeControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDatesFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html
    Properties:
        - Name: RelativeDateValue
        - Name: Column
        - Name: RelativeDateType
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: NullOption
        - Name: FilterId
        - Name: AnchorDateConfiguration
        - Name: MinimumGranularity
        - Name: ExcludePeriodConfiguration
    
    """
    
    RelativeDateValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatevalue""", alias="RelativeDateValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-column""", alias="Column")
    RelativeDateType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-relativedatetype""", alias="RelativeDateType")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-filterid""", alias="FilterId")
    AnchorDateConfiguration_: 'AnchorDateConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-anchordateconfiguration""", alias="AnchorDateConfiguration")
    MinimumGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-minimumgranularity""", alias="MinimumGranularity")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-relativedatesfilter.html#cfn-quicksight-analysis-relativedatesfilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDatesFilter:
        from troposphere.quicksight import RelativeDatesFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Resource
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-actions""", alias="Actions")
    Resource_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-resource""", alias="Resource")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-resourcepermission.html#cfn-quicksight-analysis-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RollingDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-expression""", alias="Expression")
    DataSetIdentifier_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rollingdateconfiguration.html#cfn-quicksight-analysis-rollingdateconfiguration-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RollingDateConfiguration:
        from troposphere.quicksight import RollingDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowAlternateColorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html
    Properties:
        - Name: Status
        - Name: UsePrimaryBackgroundColor
        - Name: RowAlternateColors
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-status""", alias="Status")
    UsePrimaryBackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-useprimarybackgroundcolor""", alias="UsePrimaryBackgroundColor")
    RowAlternateColors_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-rowalternatecoloroptions.html#cfn-quicksight-analysis-rowalternatecoloroptions-rowalternatecolors""", alias="RowAlternateColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowAlternateColorOptions:
        from troposphere.quicksight import RowAlternateColorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SameSheetTargetVisualConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html
    Properties:
        - Name: TargetVisualOptions
        - Name: TargetVisuals
    
    """
    
    TargetVisualOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisualoptions""", alias="TargetVisualOptions")
    TargetVisuals_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-samesheettargetvisualconfiguration.html#cfn-quicksight-analysis-samesheettargetvisualconfiguration-targetvisuals""", alias="TargetVisuals")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SameSheetTargetVisualConfiguration:
        from troposphere.quicksight import SameSheetTargetVisualConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html
    Properties:
        - Name: Destination
        - Name: Source
        - Name: Weight
    
    """
    
    Destination_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-destination""", alias="Destination")
    Source_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-source""", alias="Source")
    Weight_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-analysis-sankeydiagramaggregatedfieldwells-weight""", alias="Weight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramAggregatedFieldWells:
        from troposphere.quicksight import SankeyDiagramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabels
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['SankeyDiagramSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['SankeyDiagramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramchartconfiguration.html#cfn-quicksight-analysis-sankeydiagramchartconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramChartConfiguration:
        from troposphere.quicksight import SankeyDiagramChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramfieldwells.html
    Properties:
        - Name: SankeyDiagramAggregatedFieldWells
    
    """
    
    SankeyDiagramAggregatedFieldWells_: Optional['SankeyDiagramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramfieldwells.html#cfn-quicksight-analysis-sankeydiagramfieldwells-sankeydiagramaggregatedfieldwells""", alias="SankeyDiagramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramFieldWells:
        from troposphere.quicksight import SankeyDiagramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html
    Properties:
        - Name: WeightSort
        - Name: SourceItemsLimit
        - Name: DestinationItemsLimit
    
    """
    
    WeightSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-weightsort""", alias="WeightSort")
    SourceItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-sourceitemslimit""", alias="SourceItemsLimit")
    DestinationItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramsortconfiguration.html#cfn-quicksight-analysis-sankeydiagramsortconfiguration-destinationitemslimit""", alias="DestinationItemsLimit")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramSortConfiguration:
        from troposphere.quicksight import SankeyDiagramSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['SankeyDiagramChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sankeydiagramvisual.html#cfn-quicksight-analysis-sankeydiagramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramVisual:
        from troposphere.quicksight import SankeyDiagramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotCategoricallyAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotcategoricallyaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotCategoricallyAggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotCategoricallyAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html
    Properties:
        - Name: YAxisLabelOptions
        - Name: Legend
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxislabeloptions""", alias="YAxisLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-legend""", alias="Legend")
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['ScatterPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotconfiguration.html#cfn-quicksight-analysis-scatterplotconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotConfiguration:
        from troposphere.quicksight import ScatterPlotConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html
    Properties:
        - Name: ScatterPlotUnaggregatedFieldWells
        - Name: ScatterPlotCategoricallyAggregatedFieldWells
    
    """
    
    ScatterPlotUnaggregatedFieldWells_: Optional['ScatterPlotUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotunaggregatedfieldwells""", alias="ScatterPlotUnaggregatedFieldWells")
    ScatterPlotCategoricallyAggregatedFieldWells_: Optional['ScatterPlotCategoricallyAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotfieldwells.html#cfn-quicksight-analysis-scatterplotfieldwells-scatterplotcategoricallyaggregatedfieldwells""", alias="ScatterPlotCategoricallyAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotFieldWells:
        from troposphere.quicksight import ScatterPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotunaggregatedfieldwells.html#cfn-quicksight-analysis-scatterplotunaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotUnaggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ScatterPlotConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scatterplotvisual.html#cfn-quicksight-analysis-scatterplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotVisual:
        from troposphere.quicksight import ScatterPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScrollBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html
    Properties:
        - Name: VisibleRange
        - Name: Visibility
    
    """
    
    VisibleRange_: Optional['VisibleRangeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visiblerange""", alias="VisibleRange")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-scrollbaroptions.html#cfn-quicksight-analysis-scrollbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScrollBarOptions:
        from troposphere.quicksight import ScrollBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SecondaryValueOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-secondaryvalueoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-secondaryvalueoptions.html#cfn-quicksight-analysis-secondaryvalueoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SecondaryValueOptions:
        from troposphere.quicksight import SecondaryValueOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionAfterPageBreak(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionafterpagebreak.html
    Properties:
        - Name: Status
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionafterpagebreak.html#cfn-quicksight-analysis-sectionafterpagebreak-status""", alias="Status")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionAfterPageBreak:
        from troposphere.quicksight import SectionAfterPageBreak as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutcanvassizeoptions.html
    Properties:
        - Name: PaperCanvasSizeOptions
    
    """
    
    PaperCanvasSizeOptions_: Optional['SectionBasedLayoutPaperCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutcanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutcanvassizeoptions-papercanvassizeoptions""", alias="PaperCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: FooterSections
        - Name: BodySections
        - Name: HeaderSections
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    FooterSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-footersections""", alias="FooterSections")
    BodySections_: List['BodySectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-bodysections""", alias="BodySections")
    HeaderSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutconfiguration.html#cfn-quicksight-analysis-sectionbasedlayoutconfiguration-headersections""", alias="HeaderSections")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutConfiguration:
        from troposphere.quicksight import SectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutPaperCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html
    Properties:
        - Name: PaperMargin
        - Name: PaperSize
        - Name: PaperOrientation
    
    """
    
    PaperMargin_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papermargin""", alias="PaperMargin")
    PaperSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-papersize""", alias="PaperSize")
    PaperOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-analysis-sectionbasedlayoutpapercanvassizeoptions-paperorientation""", alias="PaperOrientation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutPaperCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutPaperCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionlayoutconfiguration.html
    Properties:
        - Name: FreeFormLayout
    
    """
    
    FreeFormLayout_: 'FreeFormSectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionlayoutconfiguration.html#cfn-quicksight-analysis-sectionlayoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionLayoutConfiguration:
        from troposphere.quicksight import SectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionPageBreakConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionpagebreakconfiguration.html
    Properties:
        - Name: After
    
    """
    
    After_: Optional['SectionAfterPageBreak'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionpagebreakconfiguration.html#cfn-quicksight-analysis-sectionpagebreakconfiguration-after""", alias="After")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionPageBreakConfiguration:
        from troposphere.quicksight import SectionPageBreakConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html
    Properties:
        - Name: Padding
        - Name: Height
    
    """
    
    Padding_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-padding""", alias="Padding")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sectionstyle.html#cfn-quicksight-analysis-sectionstyle-height""", alias="Height")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionStyle:
        from troposphere.quicksight import SectionStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SelectedSheetsFilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-selectedsheetsfilterscopeconfiguration.html
    Properties:
        - Name: SheetVisualScopingConfigurations
    
    """
    
    SheetVisualScopingConfigurations_: Optional[List['SheetVisualScopingConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-selectedsheetsfilterscopeconfiguration.html#cfn-quicksight-analysis-selectedsheetsfilterscopeconfiguration-sheetvisualscopingconfigurations""", alias="SheetVisualScopingConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SelectedSheetsFilterScopeConfiguration:
        from troposphere.quicksight import SelectedSheetsFilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html
    Properties:
        - Name: FieldSeriesItem
        - Name: DataFieldSeriesItem
    
    """
    
    FieldSeriesItem_: Optional['FieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-fieldseriesitem""", alias="FieldSeriesItem")
    DataFieldSeriesItem_: Optional['DataFieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-seriesitem.html#cfn-quicksight-analysis-seriesitem-datafieldseriesitem""", alias="DataFieldSeriesItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SeriesItem:
        from troposphere.quicksight import SeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SetParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html
    Properties:
        - Name: DestinationParameterName
        - Name: Value
    
    """
    
    DestinationParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-destinationparametername""", alias="DestinationParameterName")
    Value_: 'DestinationParameterValueConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-setparametervalueconfiguration.html#cfn-quicksight-analysis-setparametervalueconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SetParameterValueConfiguration:
        from troposphere.quicksight import SetParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShapeConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shapeconditionalformat.html
    Properties:
        - Name: BackgroundColor
    
    """
    
    BackgroundColor_: 'ConditionalFormattingColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shapeconditionalformat.html#cfn-quicksight-analysis-shapeconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShapeConditionalFormat:
        from troposphere.quicksight import ShapeConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Sheet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html
    Properties:
        - Name: SheetId
        - Name: Name
    
    """
    
    SheetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-sheetid""", alias="SheetId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheet.html#cfn-quicksight-analysis-sheet-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Sheet:
        from troposphere.quicksight import Sheet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlInfoIconLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html
    Properties:
        - Name: Visibility
        - Name: InfoIconText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-visibility""", alias="Visibility")
    InfoIconText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-analysis-sheetcontrolinfoiconlabeloptions-infoicontext""", alias="InfoIconText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlInfoIconLabelOptions:
        from troposphere.quicksight import SheetControlInfoIconLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'SheetControlLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayout.html#cfn-quicksight-analysis-sheetcontrollayout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayout:
        from troposphere.quicksight import SheetControlLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayoutconfiguration.html
    Properties:
        - Name: GridLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetcontrollayoutconfiguration.html#cfn-quicksight-analysis-sheetcontrollayoutconfiguration-gridlayout""", alias="GridLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayoutConfiguration:
        from troposphere.quicksight import SheetControlLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html
    Properties:
        - Name: Description
        - Name: ParameterControls
        - Name: TextBoxes
        - Name: Layouts
        - Name: ContentType
        - Name: SheetId
        - Name: FilterControls
        - Name: SheetControlLayouts
        - Name: Title
        - Name: Visuals
        - Name: Name
    
    """
    
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-description""", alias="Description")
    ParameterControls_: Optional[List['ParameterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-parametercontrols""", alias="ParameterControls")
    TextBoxes_: Optional[List['SheetTextBox']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-textboxes""", alias="TextBoxes")
    Layouts_: Optional[List['Layout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-layouts""", alias="Layouts")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-contenttype""", alias="ContentType")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetid""", alias="SheetId")
    FilterControls_: Optional[List['FilterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-filtercontrols""", alias="FilterControls")
    SheetControlLayouts_: Optional[List['SheetControlLayout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-sheetcontrollayouts""", alias="SheetControlLayouts")
    Title_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-title""", alias="Title")
    Visuals_: Optional[List['Visual']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-visuals""", alias="Visuals")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetdefinition.html#cfn-quicksight-analysis-sheetdefinition-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetDefinition:
        from troposphere.quicksight import SheetDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementConfigurationOverrides(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementconfigurationoverrides.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementconfigurationoverrides.html#cfn-quicksight-analysis-sheetelementconfigurationoverrides-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementConfigurationOverrides:
        from troposphere.quicksight import SheetElementConfigurationOverrides as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementRenderingRule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html
    Properties:
        - Name: Expression
        - Name: ConfigurationOverrides
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-expression""", alias="Expression")
    ConfigurationOverrides_: 'SheetElementConfigurationOverrides' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetelementrenderingrule.html#cfn-quicksight-analysis-sheetelementrenderingrule-configurationoverrides""", alias="ConfigurationOverrides")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementRenderingRule:
        from troposphere.quicksight import SheetElementRenderingRule as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetTextBox(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html
    Properties:
        - Name: SheetTextBoxId
        - Name: Content
    
    """
    
    SheetTextBoxId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-sheettextboxid""", alias="SheetTextBoxId")
    Content_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheettextbox.html#cfn-quicksight-analysis-sheettextbox-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetTextBox:
        from troposphere.quicksight import SheetTextBox as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetVisualScopingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html
    Properties:
        - Name: Scope
        - Name: SheetId
        - Name: VisualIds
    
    """
    
    Scope_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-scope""", alias="Scope")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-sheetid""", alias="SheetId")
    VisualIds_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-sheetvisualscopingconfiguration.html#cfn-quicksight-analysis-sheetvisualscopingconfiguration-visualids""", alias="VisualIds")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetVisualScopingConfiguration:
        from troposphere.quicksight import SheetVisualScopingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShortFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-shortformattext.html#cfn-quicksight-analysis-shortformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShortFormatText:
        from troposphere.quicksight import ShortFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SimpleClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-simpleclustermarker.html
    Properties:
        - Name: Color
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-simpleclustermarker.html#cfn-quicksight-analysis-simpleclustermarker-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SimpleClusterMarker:
        from troposphere.quicksight import SimpleClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SliderControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-slidercontroldisplayoptions.html#cfn-quicksight-analysis-slidercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SliderControlDisplayOptions:
        from troposphere.quicksight import SliderControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesAxisProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html
    Properties:
        - Name: Placement
        - Name: Scale
    
    """
    
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-placement""", alias="Placement")
    Scale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesaxisproperties.html#cfn-quicksight-analysis-smallmultiplesaxisproperties-scale""", alias="Scale")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesAxisProperties:
        from troposphere.quicksight import SmallMultiplesAxisProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html
    Properties:
        - Name: MaxVisibleRows
        - Name: PanelConfiguration
        - Name: MaxVisibleColumns
        - Name: XAxis
        - Name: YAxis
    
    """
    
    MaxVisibleRows_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblerows""", alias="MaxVisibleRows")
    PanelConfiguration_: Optional['PanelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-panelconfiguration""", alias="PanelConfiguration")
    MaxVisibleColumns_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-maxvisiblecolumns""", alias="MaxVisibleColumns")
    XAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-xaxis""", alias="XAxis")
    YAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-smallmultiplesoptions.html#cfn-quicksight-analysis-smallmultiplesoptions-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesOptions:
        from troposphere.quicksight import SmallMultiplesOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Spacing(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: Right
        - Name: Bottom
    
    """
    
    Left_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-left""", alias="Left")
    Top_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-top""", alias="Top")
    Right_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-right""", alias="Right")
    Bottom_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-spacing.html#cfn-quicksight-analysis-spacing-bottom""", alias="Bottom")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Spacing:
        from troposphere.quicksight import Spacing as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringdefaultvalues.html#cfn-quicksight-analysis-stringdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringDefaultValues:
        from troposphere.quicksight import StringDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringformatconfiguration.html#cfn-quicksight-analysis-stringformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringFormatConfiguration:
        from troposphere.quicksight import StringFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameter.html#cfn-quicksight-analysis-stringparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringParameter:
        from troposphere.quicksight import StringParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['StringDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['StringValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringparameterdeclaration.html#cfn-quicksight-analysis-stringparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringParameterDeclaration:
        from troposphere.quicksight import StringParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-stringvaluewhenunsetconfiguration.html#cfn-quicksight-analysis-stringvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringValueWhenUnsetConfiguration:
        from troposphere.quicksight import StringValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: FieldLevelOptions
        - Name: ValueCellStyle
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: FieldLevel
        - Name: MetricHeaderCellStyle
        - Name: StyleTargets
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-customlabel""", alias="CustomLabel")
    FieldLevelOptions_: Optional[List['PivotTableFieldSubtotalOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldleveloptions""", alias="FieldLevelOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-valuecellstyle""", alias="ValueCellStyle")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-totalsvisibility""", alias="TotalsVisibility")
    FieldLevel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-fieldlevel""", alias="FieldLevel")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    StyleTargets_: Optional[List['TableStyleTarget']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-subtotaloptions.html#cfn-quicksight-analysis-subtotaloptions-styletargets""", alias="StyleTargets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SubtotalOptions:
        from troposphere.quicksight import SubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableaggregatedfieldwells.html#cfn-quicksight-analysis-tableaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableAggregatedFieldWells:
        from troposphere.quicksight import TableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html
    Properties:
        - Name: Thickness
        - Name: Color
        - Name: Style
    
    """
    
    Thickness_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-thickness""", alias="Thickness")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-color""", alias="Color")
    Style_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableborderoptions.html#cfn-quicksight-analysis-tableborderoptions-style""", alias="Style")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableBorderOptions:
        from troposphere.quicksight import TableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html
    Properties:
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellconditionalformatting.html#cfn-quicksight-analysis-tablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellConditionalFormatting:
        from troposphere.quicksight import TableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellImageSizingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellimagesizingconfiguration.html
    Properties:
        - Name: TableCellImageScalingConfiguration
    
    """
    
    TableCellImageScalingConfiguration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellimagesizingconfiguration.html#cfn-quicksight-analysis-tablecellimagesizingconfiguration-tablecellimagescalingconfiguration""", alias="TableCellImageScalingConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellImageSizingConfiguration:
        from troposphere.quicksight import TableCellImageSizingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html
    Properties:
        - Name: VerticalTextAlignment
        - Name: Visibility
        - Name: Height
        - Name: FontConfiguration
        - Name: Border
        - Name: TextWrap
        - Name: HorizontalTextAlignment
        - Name: BackgroundColor
    
    """
    
    VerticalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-verticaltextalignment""", alias="VerticalTextAlignment")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-visibility""", alias="Visibility")
    Height_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-height""", alias="Height")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-fontconfiguration""", alias="FontConfiguration")
    Border_: Optional['GlobalTableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-border""", alias="Border")
    TextWrap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-textwrap""", alias="TextWrap")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-horizontaltextalignment""", alias="HorizontalTextAlignment")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablecellstyle.html#cfn-quicksight-analysis-tablecellstyle-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellStyle:
        from troposphere.quicksight import TableCellStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['TableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformatting.html#cfn-quicksight-analysis-tableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormatting:
        from troposphere.quicksight import TableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html
    Properties:
        - Name: Row
        - Name: Cell
    
    """
    
    Row_: Optional['TableRowConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-row""", alias="Row")
    Cell_: Optional['TableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconditionalformattingoption.html#cfn-quicksight-analysis-tableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormattingOption:
        from troposphere.quicksight import TableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: TableInlineVisualizations
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['TableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['TablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['TableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableoptions""", alias="TableOptions")
    TableInlineVisualizations_: Optional[List['TableInlineVisualization']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-tableinlinevisualizations""", alias="TableInlineVisualizations")
    FieldWells_: Optional['TableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['TableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['TotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableconfiguration.html#cfn-quicksight-analysis-tableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConfiguration:
        from troposphere.quicksight import TableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomIconContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomiconcontent.html
    Properties:
        - Name: Icon
    
    """
    
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomiconcontent.html#cfn-quicksight-analysis-tablefieldcustomiconcontent-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomIconContent:
        from troposphere.quicksight import TableFieldCustomIconContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomTextContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html
    Properties:
        - Name: Value
        - Name: FontConfiguration
    
    """
    
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-value""", alias="Value")
    FontConfiguration_: 'FontConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldcustomtextcontent.html#cfn-quicksight-analysis-tablefieldcustomtextcontent-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomTextContent:
        from troposphere.quicksight import TableFieldCustomTextContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldImageConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldimageconfiguration.html
    Properties:
        - Name: SizingOptions
    
    """
    
    SizingOptions_: Optional['TableCellImageSizingConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldimageconfiguration.html#cfn-quicksight-analysis-tablefieldimageconfiguration-sizingoptions""", alias="SizingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldImageConfiguration:
        from troposphere.quicksight import TableFieldImageConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html
    Properties:
        - Name: Target
        - Name: Content
    
    """
    
    Target_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-target""", alias="Target")
    Content_: 'TableFieldLinkContentConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkconfiguration.html#cfn-quicksight-analysis-tablefieldlinkconfiguration-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkConfiguration:
        from troposphere.quicksight import TableFieldLinkConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html
    Properties:
        - Name: CustomIconContent
        - Name: CustomTextContent
    
    """
    
    CustomIconContent_: Optional['TableFieldCustomIconContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customiconcontent""", alias="CustomIconContent")
    CustomTextContent_: Optional['TableFieldCustomTextContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldlinkcontentconfiguration.html#cfn-quicksight-analysis-tablefieldlinkcontentconfiguration-customtextcontent""", alias="CustomTextContent")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkContentConfiguration:
        from troposphere.quicksight import TableFieldLinkContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: URLStyling
        - Name: FieldId
        - Name: Visibility
        - Name: Width
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-customlabel""", alias="CustomLabel")
    URLStyling_: Optional['TableFieldURLConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-urlstyling""", alias="URLStyling")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-visibility""", alias="Visibility")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoption.html#cfn-quicksight-analysis-tablefieldoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOption:
        from troposphere.quicksight import TableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html
    Properties:
        - Name: Order
        - Name: PinnedFieldOptions
        - Name: SelectedFieldOptions
    
    """
    
    Order_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-order""", alias="Order")
    PinnedFieldOptions_: Optional['TablePinnedFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-pinnedfieldoptions""", alias="PinnedFieldOptions")
    SelectedFieldOptions_: Optional[List['TableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldoptions.html#cfn-quicksight-analysis-tablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOptions:
        from troposphere.quicksight import TableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldURLConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html
    Properties:
        - Name: LinkConfiguration
        - Name: ImageConfiguration
    
    """
    
    LinkConfiguration_: Optional['TableFieldLinkConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-linkconfiguration""", alias="LinkConfiguration")
    ImageConfiguration_: Optional['TableFieldImageConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldurlconfiguration.html#cfn-quicksight-analysis-tablefieldurlconfiguration-imageconfiguration""", alias="ImageConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldURLConfiguration:
        from troposphere.quicksight import TableFieldURLConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html
    Properties:
        - Name: TableUnaggregatedFieldWells
        - Name: TableAggregatedFieldWells
    
    """
    
    TableUnaggregatedFieldWells_: Optional['TableUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableunaggregatedfieldwells""", alias="TableUnaggregatedFieldWells")
    TableAggregatedFieldWells_: Optional['TableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablefieldwells.html#cfn-quicksight-analysis-tablefieldwells-tableaggregatedfieldwells""", alias="TableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldWells:
        from troposphere.quicksight import TableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableInlineVisualization(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableinlinevisualization.html
    Properties:
        - Name: DataBars
    
    """
    
    DataBars_: Optional['DataBarsOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableinlinevisualization.html#cfn-quicksight-analysis-tableinlinevisualization-databars""", alias="DataBars")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableInlineVisualization:
        from troposphere.quicksight import TableInlineVisualization as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html
    Properties:
        - Name: HeaderStyle
        - Name: CellStyle
        - Name: Orientation
        - Name: RowAlternateColorOptions
    
    """
    
    HeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-headerstyle""", alias="HeaderStyle")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-cellstyle""", alias="CellStyle")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-orientation""", alias="Orientation")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableoptions.html#cfn-quicksight-analysis-tableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableOptions:
        from troposphere.quicksight import TableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepaginatedreportoptions.html#cfn-quicksight-analysis-tablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePaginatedReportOptions:
        from troposphere.quicksight import TablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePinnedFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepinnedfieldoptions.html
    Properties:
        - Name: PinnedLeftFields
    
    """
    
    PinnedLeftFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablepinnedfieldoptions.html#cfn-quicksight-analysis-tablepinnedfieldoptions-pinnedleftfields""", alias="PinnedLeftFields")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePinnedFieldOptions:
        from troposphere.quicksight import TablePinnedFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableRowConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-textcolor""", alias="TextColor")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablerowconditionalformatting.html#cfn-quicksight-analysis-tablerowconditionalformatting-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableRowConditionalFormatting:
        from troposphere.quicksight import TableRowConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSideBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: InnerHorizontal
        - Name: Right
        - Name: Bottom
        - Name: InnerVertical
    
    """
    
    Left_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-left""", alias="Left")
    Top_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-top""", alias="Top")
    InnerHorizontal_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innerhorizontal""", alias="InnerHorizontal")
    Right_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-right""", alias="Right")
    Bottom_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-bottom""", alias="Bottom")
    InnerVertical_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesideborderoptions.html#cfn-quicksight-analysis-tablesideborderoptions-innervertical""", alias="InnerVertical")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSideBorderOptions:
        from troposphere.quicksight import TableSideBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html
    Properties:
        - Name: RowSort
        - Name: PaginationConfiguration
    
    """
    
    RowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-rowsort""", alias="RowSort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablesortconfiguration.html#cfn-quicksight-analysis-tablesortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSortConfiguration:
        from troposphere.quicksight import TableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableStyleTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablestyletarget.html
    Properties:
        - Name: CellType
    
    """
    
    CellType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablestyletarget.html#cfn-quicksight-analysis-tablestyletarget-celltype""", alias="CellType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableStyleTarget:
        from troposphere.quicksight import TableStyleTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableunaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['UnaggregatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tableunaggregatedfieldwells.html#cfn-quicksight-analysis-tableunaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableUnaggregatedFieldWells:
        from troposphere.quicksight import TableUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['TableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tablevisual.html#cfn-quicksight-analysis-tablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableVisual:
        from troposphere.quicksight import TableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextAreaControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textareacontroldisplayoptions.html#cfn-quicksight-analysis-textareacontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextAreaControlDisplayOptions:
        from troposphere.quicksight import TextAreaControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html
    Properties:
        - Name: TextColor
        - Name: Icon
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-icon""", alias="Icon")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textconditionalformat.html#cfn-quicksight-analysis-textconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextConditionalFormat:
        from troposphere.quicksight import TextConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextControlPlaceholderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textcontrolplaceholderoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textcontrolplaceholderoptions.html#cfn-quicksight-analysis-textcontrolplaceholderoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextControlPlaceholderOptions:
        from troposphere.quicksight import TextControlPlaceholderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextFieldControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-textfieldcontroldisplayoptions.html#cfn-quicksight-analysis-textfieldcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextFieldControlDisplayOptions:
        from troposphere.quicksight import TextFieldControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThousandSeparatorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html
    Properties:
        - Name: Symbol
        - Name: Visibility
    
    """
    
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-symbol""", alias="Symbol")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-thousandseparatoroptions.html#cfn-quicksight-analysis-thousandseparatoroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThousandSeparatorOptions:
        from troposphere.quicksight import ThousandSeparatorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeBasedForecastProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: UpperBoundary
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-seasonality""", alias="Seasonality")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-upperboundary""", alias="UpperBoundary")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timebasedforecastproperties.html#cfn-quicksight-analysis-timebasedforecastproperties-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeBasedForecastProperties:
        from troposphere.quicksight import TimeBasedForecastProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html
    Properties:
        - Name: Column
        - Name: RollingDate
        - Name: Value
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: FilterId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-column""", alias="Column")
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-rollingdate""", alias="RollingDate")
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-value""", alias="Value")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-parametername""", alias="ParameterName")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timeequalityfilter.html#cfn-quicksight-analysis-timeequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeEqualityFilter:
        from troposphere.quicksight import TimeEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html
    Properties:
        - Name: Column
        - Name: RangeMinimum
        - Name: TimeGranularity
        - Name: RangeMaximum
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-column""", alias="Column")
    RangeMinimum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangeminimum""", alias="RangeMinimum")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-timegranularity""", alias="TimeGranularity")
    RangeMaximum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangedrilldownfilter.html#cfn-quicksight-analysis-timerangedrilldownfilter-rangemaximum""", alias="RangeMaximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeDrillDownFilter:
        from troposphere.quicksight import TimeRangeDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html
    Properties:
        - Name: RangeMinimumValue
        - Name: Column
        - Name: RangeMaximumValue
        - Name: IncludeMaximum
        - Name: TimeGranularity
        - Name: NullOption
        - Name: FilterId
        - Name: IncludeMinimum
        - Name: ExcludePeriodConfiguration
    
    """
    
    RangeMinimumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangeminimumvalue""", alias="RangeMinimumValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-column""", alias="Column")
    RangeMaximumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-rangemaximumvalue""", alias="RangeMaximumValue")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includemaximum""", alias="IncludeMaximum")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-timegranularity""", alias="TimeGranularity")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-filterid""", alias="FilterId")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-includeminimum""", alias="IncludeMinimum")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefilter.html#cfn-quicksight-analysis-timerangefilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilter:
        from troposphere.quicksight import TimeRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html
    Properties:
        - Name: RollingDate
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-rollingdate""", alias="RollingDate")
    StaticValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-timerangefiltervalue.html#cfn-quicksight-analysis-timerangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilterValue:
        from troposphere.quicksight import TimeRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html
    Properties:
        - Name: FieldTooltipItem
        - Name: ColumnTooltipItem
    
    """
    
    FieldTooltipItem_: Optional['FieldTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-fieldtooltipitem""", alias="FieldTooltipItem")
    ColumnTooltipItem_: Optional['ColumnTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipitem.html#cfn-quicksight-analysis-tooltipitem-columntooltipitem""", alias="ColumnTooltipItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipItem:
        from troposphere.quicksight import TooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html
    Properties:
        - Name: SelectedTooltipType
        - Name: TooltipVisibility
        - Name: FieldBasedTooltip
    
    """
    
    SelectedTooltipType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-selectedtooltiptype""", alias="SelectedTooltipType")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-tooltipvisibility""", alias="TooltipVisibility")
    FieldBasedTooltip_: Optional['FieldBasedTooltip'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-tooltipoptions.html#cfn-quicksight-analysis-tooltipoptions-fieldbasedtooltip""", alias="FieldBasedTooltip")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipOptions:
        from troposphere.quicksight import TooltipOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html
    Properties:
        - Name: AggregationSortConfigurations
        - Name: Column
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: Limit
        - Name: FilterId
    
    """
    
    AggregationSortConfigurations_: List['AggregationSortConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-aggregationsortconfigurations""", alias="AggregationSortConfigurations")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-column""", alias="Column")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-parametername""", alias="ParameterName")
    Limit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-limit""", alias="Limit")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomfilter.html#cfn-quicksight-analysis-topbottomfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomFilter:
        from troposphere.quicksight import TopBottomFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomMoversComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: Value
        - Name: SortOrder
        - Name: Time
        - Name: MoverSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-category""", alias="Category")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-value""", alias="Value")
    SortOrder_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-sortorder""", alias="SortOrder")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-time""", alias="Time")
    MoverSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-moversize""", alias="MoverSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottommoverscomputation.html#cfn-quicksight-analysis-topbottommoverscomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomMoversComputation:
        from troposphere.quicksight import TopBottomMoversComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomRankedComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: ResultSize
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-category""", alias="Category")
    ResultSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-resultsize""", alias="ResultSize")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-topbottomrankedcomputation.html#cfn-quicksight-analysis-topbottomrankedcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomRankedComputation:
        from troposphere.quicksight import TopBottomRankedComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html
    Properties:
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationcomputation.html#cfn-quicksight-analysis-totalaggregationcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationComputation:
        from troposphere.quicksight import TotalAggregationComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationfunction.html
    Properties:
        - Name: SimpleTotalAggregationFunction
    
    """
    
    SimpleTotalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationfunction.html#cfn-quicksight-analysis-totalaggregationfunction-simpletotalaggregationfunction""", alias="SimpleTotalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationFunction:
        from troposphere.quicksight import TotalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html
    Properties:
        - Name: TotalAggregationFunction
        - Name: FieldId
    
    """
    
    TotalAggregationFunction_: 'TotalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-totalaggregationfunction""", alias="TotalAggregationFunction")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totalaggregationoption.html#cfn-quicksight-analysis-totalaggregationoption-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationOption:
        from troposphere.quicksight import TotalAggregationOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-totaloptions.html#cfn-quicksight-analysis-totaloptions-totalsvisibility""", alias="TotalsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalOptions:
        from troposphere.quicksight import TotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html
    Properties:
        - Name: Sizes
        - Name: Colors
        - Name: Groups
    
    """
    
    Sizes_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-sizes""", alias="Sizes")
    Colors_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-colors""", alias="Colors")
    Groups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapaggregatedfieldwells.html#cfn-quicksight-analysis-treemapaggregatedfieldwells-groups""", alias="Groups")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapAggregatedFieldWells:
        from troposphere.quicksight import TreeMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: SizeLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: GroupLabelOptions
    
    """
    
    SortConfiguration_: Optional['TreeMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    SizeLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-sizelabeloptions""", alias="SizeLabelOptions")
    FieldWells_: Optional['TreeMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-colorscale""", alias="ColorScale")
    GroupLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapconfiguration.html#cfn-quicksight-analysis-treemapconfiguration-grouplabeloptions""", alias="GroupLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapConfiguration:
        from troposphere.quicksight import TreeMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapfieldwells.html
    Properties:
        - Name: TreeMapAggregatedFieldWells
    
    """
    
    TreeMapAggregatedFieldWells_: Optional['TreeMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapfieldwells.html#cfn-quicksight-analysis-treemapfieldwells-treemapaggregatedfieldwells""", alias="TreeMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapFieldWells:
        from troposphere.quicksight import TreeMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html
    Properties:
        - Name: TreeMapSort
        - Name: TreeMapGroupItemsLimitConfiguration
    
    """
    
    TreeMapSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapsort""", alias="TreeMapSort")
    TreeMapGroupItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapsortconfiguration.html#cfn-quicksight-analysis-treemapsortconfiguration-treemapgroupitemslimitconfiguration""", alias="TreeMapGroupItemsLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapSortConfiguration:
        from troposphere.quicksight import TreeMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TreeMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-treemapvisual.html#cfn-quicksight-analysis-treemapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapVisual:
        from troposphere.quicksight import TreeMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TrendArrowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-trendarrowoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-trendarrowoptions.html#cfn-quicksight-analysis-trendarrowoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TrendArrowOptions:
        from troposphere.quicksight import TrendArrowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UnaggregatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html
    Properties:
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-unaggregatedfield.html#cfn-quicksight-analysis-unaggregatedfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UnaggregatedField:
        from troposphere.quicksight import UnaggregatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UniqueValuesComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html
    Properties:
        - Name: Category
        - Name: ComputationId
        - Name: Name
    
    """
    
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-category""", alias="Category")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-uniquevaluescomputation.html#cfn-quicksight-analysis-uniquevaluescomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UniqueValuesComputation:
        from troposphere.quicksight import UniqueValuesComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ValidationStrategy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-validationstrategy.html
    Properties:
        - Name: Mode
    
    """
    
    Mode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-validationstrategy.html#cfn-quicksight-analysis-validationstrategy-mode""", alias="Mode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ValidationStrategy:
        from troposphere.quicksight import ValidationStrategy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisibleRangeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visiblerangeoptions.html
    Properties:
        - Name: PercentRange
    
    """
    
    PercentRange_: Optional['PercentVisibleRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visiblerangeoptions.html#cfn-quicksight-analysis-visiblerangeoptions-percentrange""", alias="PercentRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisibleRangeOptions:
        from troposphere.quicksight import VisibleRangeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Visual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html
    Properties:
        - Name: FunnelChartVisual
        - Name: FilledMapVisual
        - Name: BoxPlotVisual
        - Name: WaterfallVisual
        - Name: CustomContentVisual
        - Name: PieChartVisual
        - Name: KPIVisual
        - Name: HistogramVisual
        - Name: TableVisual
        - Name: PivotTableVisual
        - Name: GeospatialMapVisual
        - Name: BarChartVisual
        - Name: ScatterPlotVisual
        - Name: RadarChartVisual
        - Name: HeatMapVisual
        - Name: TreeMapVisual
        - Name: ComboChartVisual
        - Name: WordCloudVisual
        - Name: InsightVisual
        - Name: SankeyDiagramVisual
        - Name: GaugeChartVisual
        - Name: LineChartVisual
        - Name: EmptyVisual
    
    """
    
    FunnelChartVisual_: Optional['FunnelChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-funnelchartvisual""", alias="FunnelChartVisual")
    FilledMapVisual_: Optional['FilledMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-filledmapvisual""", alias="FilledMapVisual")
    BoxPlotVisual_: Optional['BoxPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-boxplotvisual""", alias="BoxPlotVisual")
    WaterfallVisual_: Optional['WaterfallVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-waterfallvisual""", alias="WaterfallVisual")
    CustomContentVisual_: Optional['CustomContentVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-customcontentvisual""", alias="CustomContentVisual")
    PieChartVisual_: Optional['PieChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-piechartvisual""", alias="PieChartVisual")
    KPIVisual_: Optional['KPIVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-kpivisual""", alias="KPIVisual")
    HistogramVisual_: Optional['HistogramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-histogramvisual""", alias="HistogramVisual")
    TableVisual_: Optional['TableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-tablevisual""", alias="TableVisual")
    PivotTableVisual_: Optional['PivotTableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-pivottablevisual""", alias="PivotTableVisual")
    GeospatialMapVisual_: Optional['GeospatialMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-geospatialmapvisual""", alias="GeospatialMapVisual")
    BarChartVisual_: Optional['BarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-barchartvisual""", alias="BarChartVisual")
    ScatterPlotVisual_: Optional['ScatterPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-scatterplotvisual""", alias="ScatterPlotVisual")
    RadarChartVisual_: Optional['RadarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-radarchartvisual""", alias="RadarChartVisual")
    HeatMapVisual_: Optional['HeatMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-heatmapvisual""", alias="HeatMapVisual")
    TreeMapVisual_: Optional['TreeMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-treemapvisual""", alias="TreeMapVisual")
    ComboChartVisual_: Optional['ComboChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-combochartvisual""", alias="ComboChartVisual")
    WordCloudVisual_: Optional['WordCloudVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-wordcloudvisual""", alias="WordCloudVisual")
    InsightVisual_: Optional['InsightVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-insightvisual""", alias="InsightVisual")
    SankeyDiagramVisual_: Optional['SankeyDiagramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-sankeydiagramvisual""", alias="SankeyDiagramVisual")
    GaugeChartVisual_: Optional['GaugeChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-gaugechartvisual""", alias="GaugeChartVisual")
    LineChartVisual_: Optional['LineChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-linechartvisual""", alias="LineChartVisual")
    EmptyVisual_: Optional['EmptyVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visual.html#cfn-quicksight-analysis-visual-emptyvisual""", alias="EmptyVisual")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Visual:
        from troposphere.quicksight import Visual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomAction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html
    Properties:
        - Name: Status
        - Name: Trigger
        - Name: CustomActionId
        - Name: Name
        - Name: ActionOperations
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-status""", alias="Status")
    Trigger_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-trigger""", alias="Trigger")
    CustomActionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-customactionid""", alias="CustomActionId")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-name""", alias="Name")
    ActionOperations_: List['VisualCustomActionOperation'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomaction.html#cfn-quicksight-analysis-visualcustomaction-actionoperations""", alias="ActionOperations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomAction:
        from troposphere.quicksight import VisualCustomAction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomActionOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html
    Properties:
        - Name: NavigationOperation
        - Name: SetParametersOperation
        - Name: FilterOperation
        - Name: URLOperation
    
    """
    
    NavigationOperation_: Optional['CustomActionNavigationOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-navigationoperation""", alias="NavigationOperation")
    SetParametersOperation_: Optional['CustomActionSetParametersOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-setparametersoperation""", alias="SetParametersOperation")
    FilterOperation_: Optional['CustomActionFilterOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-filteroperation""", alias="FilterOperation")
    URLOperation_: Optional['CustomActionURLOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualcustomactionoperation.html#cfn-quicksight-analysis-visualcustomactionoperation-urloperation""", alias="URLOperation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomActionOperation:
        from troposphere.quicksight import VisualCustomActionOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualPalette(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html
    Properties:
        - Name: ChartColor
        - Name: ColorMap
    
    """
    
    ChartColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-chartcolor""", alias="ChartColor")
    ColorMap_: Optional[List['DataPathColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualpalette.html#cfn-quicksight-analysis-visualpalette-colormap""", alias="ColorMap")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualPalette:
        from troposphere.quicksight import VisualPalette as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualSubtitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['LongFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualsubtitlelabeloptions.html#cfn-quicksight-analysis-visualsubtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualSubtitleLabelOptions:
        from troposphere.quicksight import VisualSubtitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualTitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['ShortFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-visualtitlelabeloptions.html#cfn-quicksight-analysis-visualtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualTitleLabelOptions:
        from troposphere.quicksight import VisualTitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html
    Properties:
        - Name: Categories
        - Name: Breakdowns
        - Name: Values
    
    """
    
    Categories_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-categories""", alias="Categories")
    Breakdowns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-breakdowns""", alias="Breakdowns")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartaggregatedfieldwells.html#cfn-quicksight-analysis-waterfallchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartAggregatedFieldWells:
        from troposphere.quicksight import WaterfallChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html
    Properties:
        - Name: CategoryAxisLabelOptions
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: WaterfallChartOptions
        - Name: CategoryAxisDisplayOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    CategoryAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxislabeloptions""", alias="CategoryAxisLabelOptions")
    SortConfiguration_: Optional['WaterfallChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-datalabels""", alias="DataLabels")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['WaterfallChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-fieldwells""", alias="FieldWells")
    WaterfallChartOptions_: Optional['WaterfallChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-waterfallchartoptions""", alias="WaterfallChartOptions")
    CategoryAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-categoryaxisdisplayoptions""", alias="CategoryAxisDisplayOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartconfiguration.html#cfn-quicksight-analysis-waterfallchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartConfiguration:
        from troposphere.quicksight import WaterfallChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartfieldwells.html
    Properties:
        - Name: WaterfallChartAggregatedFieldWells
    
    """
    
    WaterfallChartAggregatedFieldWells_: Optional['WaterfallChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartfieldwells.html#cfn-quicksight-analysis-waterfallchartfieldwells-waterfallchartaggregatedfieldwells""", alias="WaterfallChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartFieldWells:
        from troposphere.quicksight import WaterfallChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartoptions.html
    Properties:
        - Name: TotalBarLabel
    
    """
    
    TotalBarLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartoptions.html#cfn-quicksight-analysis-waterfallchartoptions-totalbarlabel""", alias="TotalBarLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartOptions:
        from troposphere.quicksight import WaterfallChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html
    Properties:
        - Name: BreakdownItemsLimit
        - Name: CategorySort
    
    """
    
    BreakdownItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-breakdownitemslimit""", alias="BreakdownItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallchartsortconfiguration.html#cfn-quicksight-analysis-waterfallchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartSortConfiguration:
        from troposphere.quicksight import WaterfallChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WaterfallChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-waterfallvisual.html#cfn-quicksight-analysis-waterfallvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallVisual:
        from troposphere.quicksight import WaterfallVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfPointScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html
    Properties:
        - Name: Value
        - Name: Date
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-value""", alias="Value")
    Date_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifpointscenario.html#cfn-quicksight-analysis-whatifpointscenario-date""", alias="Date")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfPointScenario:
        from troposphere.quicksight import WhatIfPointScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfRangeScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html
    Properties:
        - Name: StartDate
        - Name: Value
        - Name: EndDate
    
    """
    
    StartDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-startdate""", alias="StartDate")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-value""", alias="Value")
    EndDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-whatifrangescenario.html#cfn-quicksight-analysis-whatifrangescenario-enddate""", alias="EndDate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfRangeScenario:
        from troposphere.quicksight import WhatIfRangeScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Size
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-groupby""", alias="GroupBy")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudaggregatedfieldwells.html#cfn-quicksight-analysis-wordcloudaggregatedfieldwells-size""", alias="Size")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudAggregatedFieldWells:
        from troposphere.quicksight import WordCloudAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: WordCloudOptions
    
    """
    
    SortConfiguration_: Optional['WordCloudSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['WordCloudFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-fieldwells""", alias="FieldWells")
    WordCloudOptions_: Optional['WordCloudOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudchartconfiguration.html#cfn-quicksight-analysis-wordcloudchartconfiguration-wordcloudoptions""", alias="WordCloudOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudChartConfiguration:
        from troposphere.quicksight import WordCloudChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudfieldwells.html
    Properties:
        - Name: WordCloudAggregatedFieldWells
    
    """
    
    WordCloudAggregatedFieldWells_: Optional['WordCloudAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudfieldwells.html#cfn-quicksight-analysis-wordcloudfieldwells-wordcloudaggregatedfieldwells""", alias="WordCloudAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudFieldWells:
        from troposphere.quicksight import WordCloudFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html
    Properties:
        - Name: WordOrientation
        - Name: WordScaling
        - Name: CloudLayout
        - Name: MaximumStringLength
        - Name: WordCasing
        - Name: WordPadding
    
    """
    
    WordOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordorientation""", alias="WordOrientation")
    WordScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordscaling""", alias="WordScaling")
    CloudLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-cloudlayout""", alias="CloudLayout")
    MaximumStringLength_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-maximumstringlength""", alias="MaximumStringLength")
    WordCasing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordcasing""", alias="WordCasing")
    WordPadding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudoptions.html#cfn-quicksight-analysis-wordcloudoptions-wordpadding""", alias="WordPadding")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudOptions:
        from troposphere.quicksight import WordCloudOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudsortconfiguration.html#cfn-quicksight-analysis-wordcloudsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudSortConfiguration:
        from troposphere.quicksight import WordCloudSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WordCloudChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-analysis-wordcloudvisual.html#cfn-quicksight-analysis-wordcloudvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudVisual:
        from troposphere.quicksight import WordCloudVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AdHocFilteringOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-adhocfilteringoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-adhocfilteringoption.html#cfn-quicksight-dashboard-adhocfilteringoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AdHocFilteringOption:
        from troposphere.quicksight import AdHocFilteringOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html
    Properties:
        - Name: AttributeAggregationFunction
        - Name: DateAggregationFunction
        - Name: NumericalAggregationFunction
        - Name: CategoricalAggregationFunction
    
    """
    
    AttributeAggregationFunction_: Optional['AttributeAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html#cfn-quicksight-dashboard-aggregationfunction-attributeaggregationfunction""", alias="AttributeAggregationFunction")
    DateAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html#cfn-quicksight-dashboard-aggregationfunction-dateaggregationfunction""", alias="DateAggregationFunction")
    NumericalAggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html#cfn-quicksight-dashboard-aggregationfunction-numericalaggregationfunction""", alias="NumericalAggregationFunction")
    CategoricalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationfunction.html#cfn-quicksight-dashboard-aggregationfunction-categoricalaggregationfunction""", alias="CategoricalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationFunction:
        from troposphere.quicksight import AggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AggregationSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationsortconfiguration.html
    Properties:
        - Name: AggregationFunction
        - Name: SortDirection
        - Name: Column
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationsortconfiguration.html#cfn-quicksight-dashboard-aggregationsortconfiguration-aggregationfunction""", alias="AggregationFunction")
    SortDirection_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationsortconfiguration.html#cfn-quicksight-dashboard-aggregationsortconfiguration-sortdirection""", alias="SortDirection")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-aggregationsortconfiguration.html#cfn-quicksight-dashboard-aggregationsortconfiguration-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationSortConfiguration:
        from troposphere.quicksight import AggregationSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisDefaults(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-analysisdefaults.html
    Properties:
        - Name: DefaultNewSheetConfiguration
    
    """
    
    DefaultNewSheetConfiguration_: 'DefaultNewSheetConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-analysisdefaults.html#cfn-quicksight-dashboard-analysisdefaults-defaultnewsheetconfiguration""", alias="DefaultNewSheetConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisDefaults:
        from troposphere.quicksight import AnalysisDefaults as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnchorDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-anchordateconfiguration.html
    Properties:
        - Name: AnchorOption
        - Name: ParameterName
    
    """
    
    AnchorOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-anchordateconfiguration.html#cfn-quicksight-dashboard-anchordateconfiguration-anchoroption""", alias="AnchorOption")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-anchordateconfiguration.html#cfn-quicksight-dashboard-anchordateconfiguration-parametername""", alias="ParameterName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnchorDateConfiguration:
        from troposphere.quicksight import AnchorDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisconfiguration.html
    Properties:
        - Name: Range
        - Name: ReserveRange
    
    """
    
    Range_: Optional['ArcAxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisconfiguration.html#cfn-quicksight-dashboard-arcaxisconfiguration-range""", alias="Range")
    ReserveRange_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisconfiguration.html#cfn-quicksight-dashboard-arcaxisconfiguration-reserverange""", alias="ReserveRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisConfiguration:
        from troposphere.quicksight import ArcAxisConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisdisplayrange.html
    Properties:
        - Name: Min
        - Name: Max
    
    """
    
    Min_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisdisplayrange.html#cfn-quicksight-dashboard-arcaxisdisplayrange-min""", alias="Min")
    Max_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcaxisdisplayrange.html#cfn-quicksight-dashboard-arcaxisdisplayrange-max""", alias="Max")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisDisplayRange:
        from troposphere.quicksight import ArcAxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcconfiguration.html
    Properties:
        - Name: ArcAngle
        - Name: ArcThickness
    
    """
    
    ArcAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcconfiguration.html#cfn-quicksight-dashboard-arcconfiguration-arcangle""", alias="ArcAngle")
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcconfiguration.html#cfn-quicksight-dashboard-arcconfiguration-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcConfiguration:
        from troposphere.quicksight import ArcConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcoptions.html
    Properties:
        - Name: ArcThickness
    
    """
    
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-arcoptions.html#cfn-quicksight-dashboard-arcoptions-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcOptions:
        from troposphere.quicksight import ArcOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AssetOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-assetoptions.html
    Properties:
        - Name: Timezone
        - Name: WeekStart
    
    """
    
    Timezone_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-assetoptions.html#cfn-quicksight-dashboard-assetoptions-timezone""", alias="Timezone")
    WeekStart_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-assetoptions.html#cfn-quicksight-dashboard-assetoptions-weekstart""", alias="WeekStart")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AssetOptions:
        from troposphere.quicksight import AssetOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AttributeAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-attributeaggregationfunction.html
    Properties:
        - Name: SimpleAttributeAggregation
        - Name: ValueForMultipleValues
    
    """
    
    SimpleAttributeAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-attributeaggregationfunction.html#cfn-quicksight-dashboard-attributeaggregationfunction-simpleattributeaggregation""", alias="SimpleAttributeAggregation")
    ValueForMultipleValues_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-attributeaggregationfunction.html#cfn-quicksight-dashboard-attributeaggregationfunction-valueformultiplevalues""", alias="ValueForMultipleValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AttributeAggregationFunction:
        from troposphere.quicksight import AttributeAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDataOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdataoptions.html
    Properties:
        - Name: DateAxisOptions
        - Name: NumericAxisOptions
    
    """
    
    DateAxisOptions_: Optional['DateAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdataoptions.html#cfn-quicksight-dashboard-axisdataoptions-dateaxisoptions""", alias="DateAxisOptions")
    NumericAxisOptions_: Optional['NumericAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdataoptions.html#cfn-quicksight-dashboard-axisdataoptions-numericaxisoptions""", alias="NumericAxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDataOptions:
        from troposphere.quicksight import AxisDataOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayMinMaxRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayminmaxrange.html
    Properties:
        - Name: Minimum
        - Name: Maximum
    
    """
    
    Minimum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayminmaxrange.html#cfn-quicksight-dashboard-axisdisplayminmaxrange-minimum""", alias="Minimum")
    Maximum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayminmaxrange.html#cfn-quicksight-dashboard-axisdisplayminmaxrange-maximum""", alias="Maximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayMinMaxRange:
        from troposphere.quicksight import AxisDisplayMinMaxRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html
    Properties:
        - Name: DataOptions
        - Name: TickLabelOptions
        - Name: AxisOffset
        - Name: AxisLineVisibility
        - Name: GridLineVisibility
        - Name: ScrollbarOptions
    
    """
    
    DataOptions_: Optional['AxisDataOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-dataoptions""", alias="DataOptions")
    TickLabelOptions_: Optional['AxisTickLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-ticklabeloptions""", alias="TickLabelOptions")
    AxisOffset_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-axisoffset""", alias="AxisOffset")
    AxisLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-axislinevisibility""", alias="AxisLineVisibility")
    GridLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-gridlinevisibility""", alias="GridLineVisibility")
    ScrollbarOptions_: Optional['ScrollBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayoptions.html#cfn-quicksight-dashboard-axisdisplayoptions-scrollbaroptions""", alias="ScrollbarOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayOptions:
        from troposphere.quicksight import AxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayrange.html
    Properties:
        - Name: DataDriven
        - Name: MinMax
    
    """
    
    DataDriven_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayrange.html#cfn-quicksight-dashboard-axisdisplayrange-datadriven""", alias="DataDriven")
    MinMax_: Optional['AxisDisplayMinMaxRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisdisplayrange.html#cfn-quicksight-dashboard-axisdisplayrange-minmax""", alias="MinMax")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayRange:
        from troposphere.quicksight import AxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: ApplyTo
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabeloptions.html#cfn-quicksight-dashboard-axislabeloptions-customlabel""", alias="CustomLabel")
    ApplyTo_: Optional['AxisLabelReferenceOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabeloptions.html#cfn-quicksight-dashboard-axislabeloptions-applyto""", alias="ApplyTo")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabeloptions.html#cfn-quicksight-dashboard-axislabeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelOptions:
        from troposphere.quicksight import AxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelReferenceOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabelreferenceoptions.html
    Properties:
        - Name: Column
        - Name: FieldId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabelreferenceoptions.html#cfn-quicksight-dashboard-axislabelreferenceoptions-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislabelreferenceoptions.html#cfn-quicksight-dashboard-axislabelreferenceoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelReferenceOptions:
        from troposphere.quicksight import AxisLabelReferenceOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLinearScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislinearscale.html
    Properties:
        - Name: StepSize
        - Name: StepCount
    
    """
    
    StepSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislinearscale.html#cfn-quicksight-dashboard-axislinearscale-stepsize""", alias="StepSize")
    StepCount_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislinearscale.html#cfn-quicksight-dashboard-axislinearscale-stepcount""", alias="StepCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLinearScale:
        from troposphere.quicksight import AxisLinearScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLogarithmicScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislogarithmicscale.html
    Properties:
        - Name: Base
    
    """
    
    Base_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axislogarithmicscale.html#cfn-quicksight-dashboard-axislogarithmicscale-base""", alias="Base")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLogarithmicScale:
        from troposphere.quicksight import AxisLogarithmicScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisscale.html
    Properties:
        - Name: Logarithmic
        - Name: Linear
    
    """
    
    Logarithmic_: Optional['AxisLogarithmicScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisscale.html#cfn-quicksight-dashboard-axisscale-logarithmic""", alias="Logarithmic")
    Linear_: Optional['AxisLinearScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisscale.html#cfn-quicksight-dashboard-axisscale-linear""", alias="Linear")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisScale:
        from troposphere.quicksight import AxisScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisTickLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisticklabeloptions.html
    Properties:
        - Name: RotationAngle
        - Name: LabelOptions
    
    """
    
    RotationAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisticklabeloptions.html#cfn-quicksight-dashboard-axisticklabeloptions-rotationangle""", alias="RotationAngle")
    LabelOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-axisticklabeloptions.html#cfn-quicksight-dashboard-axisticklabeloptions-labeloptions""", alias="LabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisTickLabelOptions:
        from troposphere.quicksight import AxisTickLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html#cfn-quicksight-dashboard-barchartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html#cfn-quicksight-dashboard-barchartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html#cfn-quicksight-dashboard-barchartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartaggregatedfieldwells.html#cfn-quicksight-dashboard-barchartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartAggregatedFieldWells:
        from troposphere.quicksight import BarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: Orientation
        - Name: VisualPalette
        - Name: ValueLabelOptions
        - Name: BarsArrangement
        - Name: CategoryAxis
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: ValueAxis
    
    """
    
    SortConfiguration_: Optional['BarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-orientation""", alias="Orientation")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-visualpalette""", alias="VisualPalette")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-barsarrangement""", alias="BarsArrangement")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-categoryaxis""", alias="CategoryAxis")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['BarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-fieldwells""", alias="FieldWells")
    ValueAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartconfiguration.html#cfn-quicksight-dashboard-barchartconfiguration-valueaxis""", alias="ValueAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartConfiguration:
        from troposphere.quicksight import BarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartfieldwells.html
    Properties:
        - Name: BarChartAggregatedFieldWells
    
    """
    
    BarChartAggregatedFieldWells_: Optional['BarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartfieldwells.html#cfn-quicksight-dashboard-barchartfieldwells-barchartaggregatedfieldwells""", alias="BarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartFieldWells:
        from troposphere.quicksight import BarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartsortconfiguration.html#cfn-quicksight-dashboard-barchartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartSortConfiguration:
        from troposphere.quicksight import BarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-barchartvisual.html#cfn-quicksight-dashboard-barchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartVisual:
        from troposphere.quicksight import BarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinCountOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bincountoptions.html
    Properties:
        - Name: Value
    
    """
    
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bincountoptions.html#cfn-quicksight-dashboard-bincountoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinCountOptions:
        from troposphere.quicksight import BinCountOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinWidthOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-binwidthoptions.html
    Properties:
        - Name: BinCountLimit
        - Name: Value
    
    """
    
    BinCountLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-binwidthoptions.html#cfn-quicksight-dashboard-binwidthoptions-bincountlimit""", alias="BinCountLimit")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-binwidthoptions.html#cfn-quicksight-dashboard-binwidthoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinWidthOptions:
        from troposphere.quicksight import BinWidthOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html
    Properties:
        - Name: Content
        - Name: Style
        - Name: PageBreakConfiguration
        - Name: SectionId
    
    """
    
    Content_: 'BodySectionContent' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html#cfn-quicksight-dashboard-bodysectionconfiguration-content""", alias="Content")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html#cfn-quicksight-dashboard-bodysectionconfiguration-style""", alias="Style")
    PageBreakConfiguration_: Optional['SectionPageBreakConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html#cfn-quicksight-dashboard-bodysectionconfiguration-pagebreakconfiguration""", alias="PageBreakConfiguration")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectionconfiguration.html#cfn-quicksight-dashboard-bodysectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionConfiguration:
        from troposphere.quicksight import BodySectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectioncontent.html
    Properties:
        - Name: Layout
    
    """
    
    Layout_: Optional['SectionLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-bodysectioncontent.html#cfn-quicksight-dashboard-bodysectioncontent-layout""", alias="Layout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionContent:
        from troposphere.quicksight import BodySectionContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotaggregatedfieldwells.html#cfn-quicksight-dashboard-boxplotaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotaggregatedfieldwells.html#cfn-quicksight-dashboard-boxplotaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotAggregatedFieldWells:
        from troposphere.quicksight import BoxPlotAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: BoxPlotOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['BoxPlotSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-referencelines""", alias="ReferenceLines")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['BoxPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-tooltip""", alias="Tooltip")
    BoxPlotOptions_: Optional['BoxPlotOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-boxplotoptions""", alias="BoxPlotOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotchartconfiguration.html#cfn-quicksight-dashboard-boxplotchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotChartConfiguration:
        from troposphere.quicksight import BoxPlotChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotfieldwells.html
    Properties:
        - Name: BoxPlotAggregatedFieldWells
    
    """
    
    BoxPlotAggregatedFieldWells_: Optional['BoxPlotAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotfieldwells.html#cfn-quicksight-dashboard-boxplotfieldwells-boxplotaggregatedfieldwells""", alias="BoxPlotAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotFieldWells:
        from troposphere.quicksight import BoxPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotoptions.html
    Properties:
        - Name: StyleOptions
        - Name: OutlierVisibility
        - Name: AllDataPointsVisibility
    
    """
    
    StyleOptions_: Optional['BoxPlotStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotoptions.html#cfn-quicksight-dashboard-boxplotoptions-styleoptions""", alias="StyleOptions")
    OutlierVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotoptions.html#cfn-quicksight-dashboard-boxplotoptions-outliervisibility""", alias="OutlierVisibility")
    AllDataPointsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotoptions.html#cfn-quicksight-dashboard-boxplotoptions-alldatapointsvisibility""", alias="AllDataPointsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotOptions:
        from troposphere.quicksight import BoxPlotOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotsortconfiguration.html
    Properties:
        - Name: CategorySort
        - Name: PaginationConfiguration
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotsortconfiguration.html#cfn-quicksight-dashboard-boxplotsortconfiguration-categorysort""", alias="CategorySort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotsortconfiguration.html#cfn-quicksight-dashboard-boxplotsortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotSortConfiguration:
        from troposphere.quicksight import BoxPlotSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotstyleoptions.html
    Properties:
        - Name: FillStyle
    
    """
    
    FillStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotstyleoptions.html#cfn-quicksight-dashboard-boxplotstyleoptions-fillstyle""", alias="FillStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotStyleOptions:
        from troposphere.quicksight import BoxPlotStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BoxPlotChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-boxplotvisual.html#cfn-quicksight-dashboard-boxplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotVisual:
        from troposphere.quicksight import BoxPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedfield.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
        - Name: Name
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedfield.html#cfn-quicksight-dashboard-calculatedfield-expression""", alias="Expression")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedfield.html#cfn-quicksight-dashboard-calculatedfield-datasetidentifier""", alias="DataSetIdentifier")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedfield.html#cfn-quicksight-dashboard-calculatedfield-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedField:
        from troposphere.quicksight import CalculatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedmeasurefield.html
    Properties:
        - Name: Expression
        - Name: FieldId
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedmeasurefield.html#cfn-quicksight-dashboard-calculatedmeasurefield-expression""", alias="Expression")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-calculatedmeasurefield.html#cfn-quicksight-dashboard-calculatedmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedMeasureField:
        from troposphere.quicksight import CalculatedMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolconfiguration.html
    Properties:
        - Name: SourceControls
    
    """
    
    SourceControls_: Optional[List['CascadingControlSource']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolconfiguration.html#cfn-quicksight-dashboard-cascadingcontrolconfiguration-sourcecontrols""", alias="SourceControls")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlConfiguration:
        from troposphere.quicksight import CascadingControlConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlSource(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolsource.html
    Properties:
        - Name: SourceSheetControlId
        - Name: ColumnToMatch
    
    """
    
    SourceSheetControlId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolsource.html#cfn-quicksight-dashboard-cascadingcontrolsource-sourcesheetcontrolid""", alias="SourceSheetControlId")
    ColumnToMatch_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-cascadingcontrolsource.html#cfn-quicksight-dashboard-cascadingcontrolsource-columntomatch""", alias="ColumnToMatch")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlSource:
        from troposphere.quicksight import CascadingControlSource as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html#cfn-quicksight-dashboard-categoricaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html#cfn-quicksight-dashboard-categoricaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html#cfn-quicksight-dashboard-categoricaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricaldimensionfield.html#cfn-quicksight-dashboard-categoricaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalDimensionField:
        from troposphere.quicksight import CategoricalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html#cfn-quicksight-dashboard-categoricalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html#cfn-quicksight-dashboard-categoricalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html#cfn-quicksight-dashboard-categoricalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoricalmeasurefield.html#cfn-quicksight-dashboard-categoricalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalMeasureField:
        from troposphere.quicksight import CategoricalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categorydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: CategoryValues
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categorydrilldownfilter.html#cfn-quicksight-dashboard-categorydrilldownfilter-column""", alias="Column")
    CategoryValues_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categorydrilldownfilter.html#cfn-quicksight-dashboard-categorydrilldownfilter-categoryvalues""", alias="CategoryValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryDrillDownFilter:
        from troposphere.quicksight import CategoryDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilter.html
    Properties:
        - Name: Configuration
        - Name: Column
        - Name: FilterId
    
    """
    
    Configuration_: 'CategoryFilterConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilter.html#cfn-quicksight-dashboard-categoryfilter-configuration""", alias="Configuration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilter.html#cfn-quicksight-dashboard-categoryfilter-column""", alias="Column")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilter.html#cfn-quicksight-dashboard-categoryfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilter:
        from troposphere.quicksight import CategoryFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilterconfiguration.html
    Properties:
        - Name: CustomFilterListConfiguration
        - Name: CustomFilterConfiguration
        - Name: FilterListConfiguration
    
    """
    
    CustomFilterListConfiguration_: Optional['CustomFilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilterconfiguration.html#cfn-quicksight-dashboard-categoryfilterconfiguration-customfilterlistconfiguration""", alias="CustomFilterListConfiguration")
    CustomFilterConfiguration_: Optional['CustomFilterConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilterconfiguration.html#cfn-quicksight-dashboard-categoryfilterconfiguration-customfilterconfiguration""", alias="CustomFilterConfiguration")
    FilterListConfiguration_: Optional['FilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-categoryfilterconfiguration.html#cfn-quicksight-dashboard-categoryfilterconfiguration-filterlistconfiguration""", alias="FilterListConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilterConfiguration:
        from troposphere.quicksight import CategoryFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ChartAxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-chartaxislabeloptions.html
    Properties:
        - Name: Visibility
        - Name: SortIconVisibility
        - Name: AxisLabelOptions
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-chartaxislabeloptions.html#cfn-quicksight-dashboard-chartaxislabeloptions-visibility""", alias="Visibility")
    SortIconVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-chartaxislabeloptions.html#cfn-quicksight-dashboard-chartaxislabeloptions-sorticonvisibility""", alias="SortIconVisibility")
    AxisLabelOptions_: Optional[List['AxisLabelOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-chartaxislabeloptions.html#cfn-quicksight-dashboard-chartaxislabeloptions-axislabeloptions""", alias="AxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ChartAxisLabelOptions:
        from troposphere.quicksight import ChartAxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarker.html
    Properties:
        - Name: SimpleClusterMarker
    
    """
    
    SimpleClusterMarker_: Optional['SimpleClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarker.html#cfn-quicksight-dashboard-clustermarker-simpleclustermarker""", alias="SimpleClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarker:
        from troposphere.quicksight import ClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarkerConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarkerconfiguration.html
    Properties:
        - Name: ClusterMarker
    
    """
    
    ClusterMarker_: Optional['ClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-clustermarkerconfiguration.html#cfn-quicksight-dashboard-clustermarkerconfiguration-clustermarker""", alias="ClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarkerConfiguration:
        from troposphere.quicksight import ClusterMarkerConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorscale.html
    Properties:
        - Name: Colors
        - Name: ColorFillType
        - Name: NullValueColor
    
    """
    
    Colors_: List['DataColor'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorscale.html#cfn-quicksight-dashboard-colorscale-colors""", alias="Colors")
    ColorFillType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorscale.html#cfn-quicksight-dashboard-colorscale-colorfilltype""", alias="ColorFillType")
    NullValueColor_: Optional['DataColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorscale.html#cfn-quicksight-dashboard-colorscale-nullvaluecolor""", alias="NullValueColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorScale:
        from troposphere.quicksight import ColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorsconfiguration.html
    Properties:
        - Name: CustomColors
    
    """
    
    CustomColors_: Optional[List['CustomColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-colorsconfiguration.html#cfn-quicksight-dashboard-colorsconfiguration-customcolors""", alias="CustomColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorsConfiguration:
        from troposphere.quicksight import ColorsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html
    Properties:
        - Name: Role
        - Name: FormatConfiguration
        - Name: Column
        - Name: ColorsConfiguration
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html#cfn-quicksight-dashboard-columnconfiguration-role""", alias="Role")
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html#cfn-quicksight-dashboard-columnconfiguration-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html#cfn-quicksight-dashboard-columnconfiguration-column""", alias="Column")
    ColorsConfiguration_: Optional['ColorsConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnconfiguration.html#cfn-quicksight-dashboard-columnconfiguration-colorsconfiguration""", alias="ColorsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnConfiguration:
        from troposphere.quicksight import ColumnConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnhierarchy.html
    Properties:
        - Name: DateTimeHierarchy
        - Name: ExplicitHierarchy
        - Name: PredefinedHierarchy
    
    """
    
    DateTimeHierarchy_: Optional['DateTimeHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnhierarchy.html#cfn-quicksight-dashboard-columnhierarchy-datetimehierarchy""", alias="DateTimeHierarchy")
    ExplicitHierarchy_: Optional['ExplicitHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnhierarchy.html#cfn-quicksight-dashboard-columnhierarchy-explicithierarchy""", alias="ExplicitHierarchy")
    PredefinedHierarchy_: Optional['PredefinedHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnhierarchy.html#cfn-quicksight-dashboard-columnhierarchy-predefinedhierarchy""", alias="PredefinedHierarchy")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnHierarchy:
        from troposphere.quicksight import ColumnHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnIdentifier(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnidentifier.html
    Properties:
        - Name: ColumnName
        - Name: DataSetIdentifier
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnidentifier.html#cfn-quicksight-dashboard-columnidentifier-columnname""", alias="ColumnName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnidentifier.html#cfn-quicksight-dashboard-columnidentifier-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnIdentifier:
        from troposphere.quicksight import ColumnIdentifier as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnsort.html
    Properties:
        - Name: AggregationFunction
        - Name: SortBy
        - Name: Direction
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnsort.html#cfn-quicksight-dashboard-columnsort-aggregationfunction""", alias="AggregationFunction")
    SortBy_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnsort.html#cfn-quicksight-dashboard-columnsort-sortby""", alias="SortBy")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columnsort.html#cfn-quicksight-dashboard-columnsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnSort:
        from troposphere.quicksight import ColumnSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html
    Properties:
        - Name: Aggregation
        - Name: Column
        - Name: Label
        - Name: Visibility
    
    """
    
    Aggregation_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html#cfn-quicksight-dashboard-columntooltipitem-aggregation""", alias="Aggregation")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html#cfn-quicksight-dashboard-columntooltipitem-column""", alias="Column")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html#cfn-quicksight-dashboard-columntooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-columntooltipitem.html#cfn-quicksight-dashboard-columntooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnTooltipItem:
        from troposphere.quicksight import ColumnTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html
    Properties:
        - Name: BarValues
        - Name: Category
        - Name: Colors
        - Name: LineValues
    
    """
    
    BarValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html#cfn-quicksight-dashboard-combochartaggregatedfieldwells-barvalues""", alias="BarValues")
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html#cfn-quicksight-dashboard-combochartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html#cfn-quicksight-dashboard-combochartaggregatedfieldwells-colors""", alias="Colors")
    LineValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartaggregatedfieldwells.html#cfn-quicksight-dashboard-combochartaggregatedfieldwells-linevalues""", alias="LineValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartAggregatedFieldWells:
        from troposphere.quicksight import ComboChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: ColorLabelOptions
        - Name: BarDataLabels
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: BarsArrangement
        - Name: SecondaryYAxisLabelOptions
        - Name: LineDataLabels
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
    
    """
    
    SortConfiguration_: Optional['ComboChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-referencelines""", alias="ReferenceLines")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    BarDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-bardatalabels""", alias="BarDataLabels")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-tooltip""", alias="Tooltip")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-visualpalette""", alias="VisualPalette")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-barsarrangement""", alias="BarsArrangement")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    LineDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-linedatalabels""", alias="LineDataLabels")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['ComboChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartconfiguration.html#cfn-quicksight-dashboard-combochartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartConfiguration:
        from troposphere.quicksight import ComboChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartfieldwells.html
    Properties:
        - Name: ComboChartAggregatedFieldWells
    
    """
    
    ComboChartAggregatedFieldWells_: Optional['ComboChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartfieldwells.html#cfn-quicksight-dashboard-combochartfieldwells-combochartaggregatedfieldwells""", alias="ComboChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartFieldWells:
        from troposphere.quicksight import ComboChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html#cfn-quicksight-dashboard-combochartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html#cfn-quicksight-dashboard-combochartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html#cfn-quicksight-dashboard-combochartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartsortconfiguration.html#cfn-quicksight-dashboard-combochartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartSortConfiguration:
        from troposphere.quicksight import ComboChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ComboChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-combochartvisual.html#cfn-quicksight-dashboard-combochartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartVisual:
        from troposphere.quicksight import ComboChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonconfiguration.html
    Properties:
        - Name: ComparisonMethod
        - Name: ComparisonFormat
    
    """
    
    ComparisonMethod_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonconfiguration.html#cfn-quicksight-dashboard-comparisonconfiguration-comparisonmethod""", alias="ComparisonMethod")
    ComparisonFormat_: Optional['ComparisonFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonconfiguration.html#cfn-quicksight-dashboard-comparisonconfiguration-comparisonformat""", alias="ComparisonFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonConfiguration:
        from troposphere.quicksight import ComparisonConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonformatconfiguration.html#cfn-quicksight-dashboard-comparisonformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-comparisonformatconfiguration.html#cfn-quicksight-dashboard-comparisonformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonFormatConfiguration:
        from troposphere.quicksight import ComparisonFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Computation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html
    Properties:
        - Name: PeriodToDate
        - Name: GrowthRate
        - Name: TopBottomRanked
        - Name: TotalAggregation
        - Name: Forecast
        - Name: MaximumMinimum
        - Name: PeriodOverPeriod
        - Name: MetricComparison
        - Name: TopBottomMovers
        - Name: UniqueValues
    
    """
    
    PeriodToDate_: Optional['PeriodToDateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-periodtodate""", alias="PeriodToDate")
    GrowthRate_: Optional['GrowthRateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-growthrate""", alias="GrowthRate")
    TopBottomRanked_: Optional['TopBottomRankedComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-topbottomranked""", alias="TopBottomRanked")
    TotalAggregation_: Optional['TotalAggregationComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-totalaggregation""", alias="TotalAggregation")
    Forecast_: Optional['ForecastComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-forecast""", alias="Forecast")
    MaximumMinimum_: Optional['MaximumMinimumComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-maximumminimum""", alias="MaximumMinimum")
    PeriodOverPeriod_: Optional['PeriodOverPeriodComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-periodoverperiod""", alias="PeriodOverPeriod")
    MetricComparison_: Optional['MetricComparisonComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-metriccomparison""", alias="MetricComparison")
    TopBottomMovers_: Optional['TopBottomMoversComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-topbottommovers""", alias="TopBottomMovers")
    UniqueValues_: Optional['UniqueValuesComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-computation.html#cfn-quicksight-dashboard-computation-uniquevalues""", alias="UniqueValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Computation:
        from troposphere.quicksight import Computation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcolor.html
    Properties:
        - Name: Gradient
        - Name: Solid
    
    """
    
    Gradient_: Optional['ConditionalFormattingGradientColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcolor.html#cfn-quicksight-dashboard-conditionalformattingcolor-gradient""", alias="Gradient")
    Solid_: Optional['ConditionalFormattingSolidColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcolor.html#cfn-quicksight-dashboard-conditionalformattingcolor-solid""", alias="Solid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingColor:
        from troposphere.quicksight import ConditionalFormattingColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconCondition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html
    Properties:
        - Name: Expression
        - Name: Color
        - Name: DisplayConfiguration
        - Name: IconOptions
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html#cfn-quicksight-dashboard-conditionalformattingcustomiconcondition-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html#cfn-quicksight-dashboard-conditionalformattingcustomiconcondition-color""", alias="Color")
    DisplayConfiguration_: Optional['ConditionalFormattingIconDisplayConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html#cfn-quicksight-dashboard-conditionalformattingcustomiconcondition-displayconfiguration""", alias="DisplayConfiguration")
    IconOptions_: 'ConditionalFormattingCustomIconOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconcondition.html#cfn-quicksight-dashboard-conditionalformattingcustomiconcondition-iconoptions""", alias="IconOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconCondition:
        from troposphere.quicksight import ConditionalFormattingCustomIconCondition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconoptions.html
    Properties:
        - Name: UnicodeIcon
        - Name: Icon
    
    """
    
    UnicodeIcon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconoptions.html#cfn-quicksight-dashboard-conditionalformattingcustomiconoptions-unicodeicon""", alias="UnicodeIcon")
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingcustomiconoptions.html#cfn-quicksight-dashboard-conditionalformattingcustomiconoptions-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconOptions:
        from troposphere.quicksight import ConditionalFormattingCustomIconOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingGradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattinggradientcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattinggradientcolor.html#cfn-quicksight-dashboard-conditionalformattinggradientcolor-expression""", alias="Expression")
    Color_: 'GradientColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattinggradientcolor.html#cfn-quicksight-dashboard-conditionalformattinggradientcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingGradientColor:
        from troposphere.quicksight import ConditionalFormattingGradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIcon(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicon.html
    Properties:
        - Name: CustomCondition
        - Name: IconSet
    
    """
    
    CustomCondition_: Optional['ConditionalFormattingCustomIconCondition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicon.html#cfn-quicksight-dashboard-conditionalformattingicon-customcondition""", alias="CustomCondition")
    IconSet_: Optional['ConditionalFormattingIconSet'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicon.html#cfn-quicksight-dashboard-conditionalformattingicon-iconset""", alias="IconSet")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIcon:
        from troposphere.quicksight import ConditionalFormattingIcon as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconDisplayConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicondisplayconfiguration.html
    Properties:
        - Name: IconDisplayOption
    
    """
    
    IconDisplayOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingicondisplayconfiguration.html#cfn-quicksight-dashboard-conditionalformattingicondisplayconfiguration-icondisplayoption""", alias="IconDisplayOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconDisplayConfiguration:
        from troposphere.quicksight import ConditionalFormattingIconDisplayConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconSet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingiconset.html
    Properties:
        - Name: Expression
        - Name: IconSetType
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingiconset.html#cfn-quicksight-dashboard-conditionalformattingiconset-expression""", alias="Expression")
    IconSetType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingiconset.html#cfn-quicksight-dashboard-conditionalformattingiconset-iconsettype""", alias="IconSetType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconSet:
        from troposphere.quicksight import ConditionalFormattingIconSet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingSolidColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingsolidcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingsolidcolor.html#cfn-quicksight-dashboard-conditionalformattingsolidcolor-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-conditionalformattingsolidcolor.html#cfn-quicksight-dashboard-conditionalformattingsolidcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingSolidColor:
        from troposphere.quicksight import ConditionalFormattingSolidColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ContributionAnalysisDefault(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-contributionanalysisdefault.html
    Properties:
        - Name: MeasureFieldId
        - Name: ContributorDimensions
    
    """
    
    MeasureFieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-contributionanalysisdefault.html#cfn-quicksight-dashboard-contributionanalysisdefault-measurefieldid""", alias="MeasureFieldId")
    ContributorDimensions_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-contributionanalysisdefault.html#cfn-quicksight-dashboard-contributionanalysisdefault-contributordimensions""", alias="ContributorDimensions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ContributionAnalysisDefault:
        from troposphere.quicksight import ContributionAnalysisDefault as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CurrencyDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Symbol
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-symbol""", alias="Symbol")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-currencydisplayformatconfiguration.html#cfn-quicksight-dashboard-currencydisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CurrencyDisplayFormatConfiguration:
        from troposphere.quicksight import CurrencyDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionFilterOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionfilteroperation.html
    Properties:
        - Name: SelectedFieldsConfiguration
        - Name: TargetVisualsConfiguration
    
    """
    
    SelectedFieldsConfiguration_: 'FilterOperationSelectedFieldsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionfilteroperation.html#cfn-quicksight-dashboard-customactionfilteroperation-selectedfieldsconfiguration""", alias="SelectedFieldsConfiguration")
    TargetVisualsConfiguration_: 'FilterOperationTargetVisualsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionfilteroperation.html#cfn-quicksight-dashboard-customactionfilteroperation-targetvisualsconfiguration""", alias="TargetVisualsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionFilterOperation:
        from troposphere.quicksight import CustomActionFilterOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionNavigationOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionnavigationoperation.html
    Properties:
        - Name: LocalNavigationConfiguration
    
    """
    
    LocalNavigationConfiguration_: Optional['LocalNavigationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionnavigationoperation.html#cfn-quicksight-dashboard-customactionnavigationoperation-localnavigationconfiguration""", alias="LocalNavigationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionNavigationOperation:
        from troposphere.quicksight import CustomActionNavigationOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionSetParametersOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionsetparametersoperation.html
    Properties:
        - Name: ParameterValueConfigurations
    
    """
    
    ParameterValueConfigurations_: List['SetParameterValueConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionsetparametersoperation.html#cfn-quicksight-dashboard-customactionsetparametersoperation-parametervalueconfigurations""", alias="ParameterValueConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionSetParametersOperation:
        from troposphere.quicksight import CustomActionSetParametersOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionURLOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionurloperation.html
    Properties:
        - Name: URLTemplate
        - Name: URLTarget
    
    """
    
    URLTemplate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionurloperation.html#cfn-quicksight-dashboard-customactionurloperation-urltemplate""", alias="URLTemplate")
    URLTarget_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customactionurloperation.html#cfn-quicksight-dashboard-customactionurloperation-urltarget""", alias="URLTarget")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionURLOperation:
        from troposphere.quicksight import CustomActionURLOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcolor.html
    Properties:
        - Name: Color
        - Name: FieldValue
        - Name: SpecialValue
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcolor.html#cfn-quicksight-dashboard-customcolor-color""", alias="Color")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcolor.html#cfn-quicksight-dashboard-customcolor-fieldvalue""", alias="FieldValue")
    SpecialValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcolor.html#cfn-quicksight-dashboard-customcolor-specialvalue""", alias="SpecialValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomColor:
        from troposphere.quicksight import CustomColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentconfiguration.html
    Properties:
        - Name: ContentUrl
        - Name: ContentType
        - Name: ImageScaling
    
    """
    
    ContentUrl_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentconfiguration.html#cfn-quicksight-dashboard-customcontentconfiguration-contenturl""", alias="ContentUrl")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentconfiguration.html#cfn-quicksight-dashboard-customcontentconfiguration-contenttype""", alias="ContentType")
    ImageScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentconfiguration.html#cfn-quicksight-dashboard-customcontentconfiguration-imagescaling""", alias="ImageScaling")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentConfiguration:
        from troposphere.quicksight import CustomContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['CustomContentConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-datasetidentifier""", alias="DataSetIdentifier")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customcontentvisual.html#cfn-quicksight-dashboard-customcontentvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentVisual:
        from troposphere.quicksight import CustomContentVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html
    Properties:
        - Name: CategoryValue
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html#cfn-quicksight-dashboard-customfilterconfiguration-categoryvalue""", alias="CategoryValue")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html#cfn-quicksight-dashboard-customfilterconfiguration-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html#cfn-quicksight-dashboard-customfilterconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html#cfn-quicksight-dashboard-customfilterconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterconfiguration.html#cfn-quicksight-dashboard-customfilterconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterConfiguration:
        from troposphere.quicksight import CustomFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html#cfn-quicksight-dashboard-customfilterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html#cfn-quicksight-dashboard-customfilterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html#cfn-quicksight-dashboard-customfilterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customfilterlistconfiguration.html#cfn-quicksight-dashboard-customfilterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterListConfiguration:
        from troposphere.quicksight import CustomFilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomNarrativeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customnarrativeoptions.html
    Properties:
        - Name: Narrative
    
    """
    
    Narrative_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customnarrativeoptions.html#cfn-quicksight-dashboard-customnarrativeoptions-narrative""", alias="Narrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomNarrativeOptions:
        from troposphere.quicksight import CustomNarrativeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomParameterValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html
    Properties:
        - Name: DecimalValues
        - Name: IntegerValues
        - Name: StringValues
        - Name: DateTimeValues
    
    """
    
    DecimalValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html#cfn-quicksight-dashboard-customparametervalues-decimalvalues""", alias="DecimalValues")
    IntegerValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html#cfn-quicksight-dashboard-customparametervalues-integervalues""", alias="IntegerValues")
    StringValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html#cfn-quicksight-dashboard-customparametervalues-stringvalues""", alias="StringValues")
    DateTimeValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customparametervalues.html#cfn-quicksight-dashboard-customparametervalues-datetimevalues""", alias="DateTimeValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomParameterValues:
        from troposphere.quicksight import CustomParameterValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomValuesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customvaluesconfiguration.html
    Properties:
        - Name: IncludeNullValue
        - Name: CustomValues
    
    """
    
    IncludeNullValue_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customvaluesconfiguration.html#cfn-quicksight-dashboard-customvaluesconfiguration-includenullvalue""", alias="IncludeNullValue")
    CustomValues_: 'CustomParameterValues' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-customvaluesconfiguration.html#cfn-quicksight-dashboard-customvaluesconfiguration-customvalues""", alias="CustomValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomValuesConfiguration:
        from troposphere.quicksight import CustomValuesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardError(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboarderror.html
    Properties:
        - Name: Type
        - Name: Message
        - Name: ViolatedEntities
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboarderror.html#cfn-quicksight-dashboard-dashboarderror-type""", alias="Type")
    Message_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboarderror.html#cfn-quicksight-dashboard-dashboarderror-message""", alias="Message")
    ViolatedEntities_: Optional[List['Entity']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboarderror.html#cfn-quicksight-dashboard-dashboarderror-violatedentities""", alias="ViolatedEntities")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardError:
        from troposphere.quicksight import DashboardError as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardPublishOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html
    Properties:
        - Name: SheetControlsOption
        - Name: ExportToCSVOption
        - Name: DataPointMenuLabelOption
        - Name: DataPointDrillUpDownOption
        - Name: AdHocFilteringOption
        - Name: VisualPublishOptions
        - Name: VisualMenuOption
        - Name: DataPointTooltipOption
        - Name: VisualAxisSortOption
        - Name: ExportWithHiddenFieldsOption
        - Name: SheetLayoutElementMaximizationOption
    
    """
    
    SheetControlsOption_: Optional['SheetControlsOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-sheetcontrolsoption""", alias="SheetControlsOption")
    ExportToCSVOption_: Optional['ExportToCSVOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-exporttocsvoption""", alias="ExportToCSVOption")
    DataPointMenuLabelOption_: Optional['DataPointMenuLabelOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-datapointmenulabeloption""", alias="DataPointMenuLabelOption")
    DataPointDrillUpDownOption_: Optional['DataPointDrillUpDownOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-datapointdrillupdownoption""", alias="DataPointDrillUpDownOption")
    AdHocFilteringOption_: Optional['AdHocFilteringOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-adhocfilteringoption""", alias="AdHocFilteringOption")
    VisualPublishOptions_: Optional['DashboardVisualPublishOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-visualpublishoptions""", alias="VisualPublishOptions")
    VisualMenuOption_: Optional['VisualMenuOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-visualmenuoption""", alias="VisualMenuOption")
    DataPointTooltipOption_: Optional['DataPointTooltipOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-datapointtooltipoption""", alias="DataPointTooltipOption")
    VisualAxisSortOption_: Optional['VisualAxisSortOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-visualaxissortoption""", alias="VisualAxisSortOption")
    ExportWithHiddenFieldsOption_: Optional['ExportWithHiddenFieldsOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-exportwithhiddenfieldsoption""", alias="ExportWithHiddenFieldsOption")
    SheetLayoutElementMaximizationOption_: Optional['SheetLayoutElementMaximizationOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardpublishoptions.html#cfn-quicksight-dashboard-dashboardpublishoptions-sheetlayoutelementmaximizationoption""", alias="SheetLayoutElementMaximizationOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardPublishOptions:
        from troposphere.quicksight import DashboardPublishOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardSourceEntity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourceentity.html
    Properties:
        - Name: SourceTemplate
    
    """
    
    SourceTemplate_: Optional['DashboardSourceTemplate'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourceentity.html#cfn-quicksight-dashboard-dashboardsourceentity-sourcetemplate""", alias="SourceTemplate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardSourceEntity:
        from troposphere.quicksight import DashboardSourceEntity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardSourceTemplate(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourcetemplate.html
    Properties:
        - Name: DataSetReferences
        - Name: Arn
    
    """
    
    DataSetReferences_: List['DataSetReference'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourcetemplate.html#cfn-quicksight-dashboard-dashboardsourcetemplate-datasetreferences""", alias="DataSetReferences")
    Arn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardsourcetemplate.html#cfn-quicksight-dashboard-dashboardsourcetemplate-arn""", alias="Arn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardSourceTemplate:
        from troposphere.quicksight import DashboardSourceTemplate as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardVersion(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html
    Properties:
        - Name: Status
        - Name: Errors
        - Name: CreatedTime
        - Name: Description
        - Name: DataSetArns
        - Name: ThemeArn
        - Name: Arn
        - Name: SourceEntityArn
        - Name: VersionNumber
        - Name: Sheets
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-status""", alias="Status")
    Errors_: Optional[List['DashboardError']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-errors""", alias="Errors")
    CreatedTime_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-createdtime""", alias="CreatedTime")
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-description""", alias="Description")
    DataSetArns_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-datasetarns""", alias="DataSetArns")
    ThemeArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-themearn""", alias="ThemeArn")
    Arn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-arn""", alias="Arn")
    SourceEntityArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-sourceentityarn""", alias="SourceEntityArn")
    VersionNumber_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-versionnumber""", alias="VersionNumber")
    Sheets_: Optional[List['Sheet']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversion.html#cfn-quicksight-dashboard-dashboardversion-sheets""", alias="Sheets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardVersion:
        from troposphere.quicksight import DashboardVersion as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardVersionDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html
    Properties:
        - Name: Options
        - Name: FilterGroups
        - Name: CalculatedFields
        - Name: DataSetIdentifierDeclarations
        - Name: ColumnConfigurations
        - Name: AnalysisDefaults
        - Name: Sheets
        - Name: ParameterDeclarations
    
    """
    
    Options_: Optional['AssetOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-options""", alias="Options")
    FilterGroups_: Optional[List['FilterGroup']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-filtergroups""", alias="FilterGroups")
    CalculatedFields_: Optional[List['CalculatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-calculatedfields""", alias="CalculatedFields")
    DataSetIdentifierDeclarations_: List['DataSetIdentifierDeclaration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-datasetidentifierdeclarations""", alias="DataSetIdentifierDeclarations")
    ColumnConfigurations_: Optional[List['ColumnConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-columnconfigurations""", alias="ColumnConfigurations")
    AnalysisDefaults_: Optional['AnalysisDefaults'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-analysisdefaults""", alias="AnalysisDefaults")
    Sheets_: Optional[List['SheetDefinition']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-sheets""", alias="Sheets")
    ParameterDeclarations_: Optional[List['ParameterDeclaration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardversiondefinition.html#cfn-quicksight-dashboard-dashboardversiondefinition-parameterdeclarations""", alias="ParameterDeclarations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardVersionDefinition:
        from troposphere.quicksight import DashboardVersionDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DashboardVisualPublishOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardvisualpublishoptions.html
    Properties:
        - Name: ExportHiddenFieldsOption
    
    """
    
    ExportHiddenFieldsOption_: Optional['ExportHiddenFieldsOption'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dashboardvisualpublishoptions.html#cfn-quicksight-dashboard-dashboardvisualpublishoptions-exporthiddenfieldsoption""", alias="ExportHiddenFieldsOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DashboardVisualPublishOptions:
        from troposphere.quicksight import DashboardVisualPublishOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataBarsOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-databarsoptions.html
    Properties:
        - Name: PositiveColor
        - Name: FieldId
        - Name: NegativeColor
    
    """
    
    PositiveColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-databarsoptions.html#cfn-quicksight-dashboard-databarsoptions-positivecolor""", alias="PositiveColor")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-databarsoptions.html#cfn-quicksight-dashboard-databarsoptions-fieldid""", alias="FieldId")
    NegativeColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-databarsoptions.html#cfn-quicksight-dashboard-databarsoptions-negativecolor""", alias="NegativeColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataBarsOptions:
        from troposphere.quicksight import DataBarsOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datacolor.html
    Properties:
        - Name: DataValue
        - Name: Color
    
    """
    
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datacolor.html#cfn-quicksight-dashboard-datacolor-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datacolor.html#cfn-quicksight-dashboard-datacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataColor:
        from troposphere.quicksight import DataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataFieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: FieldValue
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html#cfn-quicksight-dashboard-datafieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html#cfn-quicksight-dashboard-datafieldseriesitem-axisbinding""", alias="AxisBinding")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html#cfn-quicksight-dashboard-datafieldseriesitem-fieldvalue""", alias="FieldValue")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datafieldseriesitem.html#cfn-quicksight-dashboard-datafieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataFieldSeriesItem:
        from troposphere.quicksight import DataFieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html
    Properties:
        - Name: DataLabelTypes
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: LabelContent
        - Name: Visibility
        - Name: TotalsVisibility
        - Name: Overlap
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: LabelFontConfiguration
    
    """
    
    DataLabelTypes_: Optional[List['DataLabelType']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-datalabeltypes""", alias="DataLabelTypes")
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-position""", alias="Position")
    LabelContent_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-labelcontent""", alias="LabelContent")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-visibility""", alias="Visibility")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-totalsvisibility""", alias="TotalsVisibility")
    Overlap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-overlap""", alias="Overlap")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-labelcolor""", alias="LabelColor")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeloptions.html#cfn-quicksight-dashboard-datalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelOptions:
        from troposphere.quicksight import DataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html
    Properties:
        - Name: MaximumLabelType
        - Name: DataPathLabelType
        - Name: RangeEndsLabelType
        - Name: FieldLabelType
        - Name: MinimumLabelType
    
    """
    
    MaximumLabelType_: Optional['MaximumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html#cfn-quicksight-dashboard-datalabeltype-maximumlabeltype""", alias="MaximumLabelType")
    DataPathLabelType_: Optional['DataPathLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html#cfn-quicksight-dashboard-datalabeltype-datapathlabeltype""", alias="DataPathLabelType")
    RangeEndsLabelType_: Optional['RangeEndsLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html#cfn-quicksight-dashboard-datalabeltype-rangeendslabeltype""", alias="RangeEndsLabelType")
    FieldLabelType_: Optional['FieldLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html#cfn-quicksight-dashboard-datalabeltype-fieldlabeltype""", alias="FieldLabelType")
    MinimumLabelType_: Optional['MinimumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datalabeltype.html#cfn-quicksight-dashboard-datalabeltype-minimumlabeltype""", alias="MinimumLabelType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelType:
        from troposphere.quicksight import DataLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathcolor.html
    Properties:
        - Name: Element
        - Name: Color
        - Name: TimeGranularity
    
    """
    
    Element_: 'DataPathValue' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathcolor.html#cfn-quicksight-dashboard-datapathcolor-element""", alias="Element")
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathcolor.html#cfn-quicksight-dashboard-datapathcolor-color""", alias="Color")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathcolor.html#cfn-quicksight-dashboard-datapathcolor-timegranularity""", alias="TimeGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathColor:
        from troposphere.quicksight import DataPathColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
        - Name: FieldValue
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathlabeltype.html#cfn-quicksight-dashboard-datapathlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathlabeltype.html#cfn-quicksight-dashboard-datapathlabeltype-visibility""", alias="Visibility")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathlabeltype.html#cfn-quicksight-dashboard-datapathlabeltype-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathLabelType:
        from troposphere.quicksight import DataPathLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathsort.html
    Properties:
        - Name: SortPaths
        - Name: Direction
    
    """
    
    SortPaths_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathsort.html#cfn-quicksight-dashboard-datapathsort-sortpaths""", alias="SortPaths")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathsort.html#cfn-quicksight-dashboard-datapathsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathSort:
        from troposphere.quicksight import DataPathSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathtype.html
    Properties:
        - Name: PivotTableDataPathType
    
    """
    
    PivotTableDataPathType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathtype.html#cfn-quicksight-dashboard-datapathtype-pivottabledatapathtype""", alias="PivotTableDataPathType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathType:
        from troposphere.quicksight import DataPathType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathvalue.html
    Properties:
        - Name: DataPathType
        - Name: FieldId
        - Name: FieldValue
    
    """
    
    DataPathType_: Optional['DataPathType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathvalue.html#cfn-quicksight-dashboard-datapathvalue-datapathtype""", alias="DataPathType")
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathvalue.html#cfn-quicksight-dashboard-datapathvalue-fieldid""", alias="FieldId")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapathvalue.html#cfn-quicksight-dashboard-datapathvalue-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathValue:
        from troposphere.quicksight import DataPathValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPointDrillUpDownOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointdrillupdownoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointdrillupdownoption.html#cfn-quicksight-dashboard-datapointdrillupdownoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPointDrillUpDownOption:
        from troposphere.quicksight import DataPointDrillUpDownOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPointMenuLabelOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointmenulabeloption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointmenulabeloption.html#cfn-quicksight-dashboard-datapointmenulabeloption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPointMenuLabelOption:
        from troposphere.quicksight import DataPointMenuLabelOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPointTooltipOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointtooltipoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datapointtooltipoption.html#cfn-quicksight-dashboard-datapointtooltipoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPointTooltipOption:
        from troposphere.quicksight import DataPointTooltipOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetIdentifierDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetidentifierdeclaration.html
    Properties:
        - Name: Identifier
        - Name: DataSetArn
    
    """
    
    Identifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetidentifierdeclaration.html#cfn-quicksight-dashboard-datasetidentifierdeclaration-identifier""", alias="Identifier")
    DataSetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetidentifierdeclaration.html#cfn-quicksight-dashboard-datasetidentifierdeclaration-datasetarn""", alias="DataSetArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetIdentifierDeclaration:
        from troposphere.quicksight import DataSetIdentifierDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetReference(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetreference.html
    Properties:
        - Name: DataSetArn
        - Name: DataSetPlaceholder
    
    """
    
    DataSetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetreference.html#cfn-quicksight-dashboard-datasetreference-datasetarn""", alias="DataSetArn")
    DataSetPlaceholder_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datasetreference.html#cfn-quicksight-dashboard-datasetreference-datasetplaceholder""", alias="DataSetPlaceholder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetReference:
        from troposphere.quicksight import DataSetReference as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dateaxisoptions.html
    Properties:
        - Name: MissingDateVisibility
    
    """
    
    MissingDateVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dateaxisoptions.html#cfn-quicksight-dashboard-dateaxisoptions-missingdatevisibility""", alias="MissingDateVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateAxisOptions:
        from troposphere.quicksight import DateAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
        - Name: DateGranularity
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html#cfn-quicksight-dashboard-datedimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html#cfn-quicksight-dashboard-datedimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html#cfn-quicksight-dashboard-datedimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html#cfn-quicksight-dashboard-datedimensionfield-fieldid""", alias="FieldId")
    DateGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datedimensionfield.html#cfn-quicksight-dashboard-datedimensionfield-dategranularity""", alias="DateGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateDimensionField:
        from troposphere.quicksight import DateDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html#cfn-quicksight-dashboard-datemeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html#cfn-quicksight-dashboard-datemeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html#cfn-quicksight-dashboard-datemeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datemeasurefield.html#cfn-quicksight-dashboard-datemeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateMeasureField:
        from troposphere.quicksight import DateMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimedefaultvalues.html
    Properties:
        - Name: RollingDate
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimedefaultvalues.html#cfn-quicksight-dashboard-datetimedefaultvalues-rollingdate""", alias="RollingDate")
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimedefaultvalues.html#cfn-quicksight-dashboard-datetimedefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimedefaultvalues.html#cfn-quicksight-dashboard-datetimedefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeDefaultValues:
        from troposphere.quicksight import DateTimeDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
        - Name: DateTimeFormat
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeformatconfiguration.html#cfn-quicksight-dashboard-datetimeformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeformatconfiguration.html#cfn-quicksight-dashboard-datetimeformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeformatconfiguration.html#cfn-quicksight-dashboard-datetimeformatconfiguration-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeFormatConfiguration:
        from troposphere.quicksight import DateTimeFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimehierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimehierarchy.html#cfn-quicksight-dashboard-datetimehierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimehierarchy.html#cfn-quicksight-dashboard-datetimehierarchy-drilldownfilters""", alias="DrillDownFilters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeHierarchy:
        from troposphere.quicksight import DateTimeHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameter.html#cfn-quicksight-dashboard-datetimeparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameter.html#cfn-quicksight-dashboard-datetimeparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeParameter:
        from troposphere.quicksight import DateTimeParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: TimeGranularity
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html#cfn-quicksight-dashboard-datetimeparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DateTimeDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html#cfn-quicksight-dashboard-datetimeparameterdeclaration-defaultvalues""", alias="DefaultValues")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html#cfn-quicksight-dashboard-datetimeparameterdeclaration-timegranularity""", alias="TimeGranularity")
    ValueWhenUnset_: Optional['DateTimeValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html#cfn-quicksight-dashboard-datetimeparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimeparameterdeclaration.html#cfn-quicksight-dashboard-datetimeparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeParameterDeclaration:
        from troposphere.quicksight import DateTimeParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimePickerControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimepickercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimepickercontroldisplayoptions.html#cfn-quicksight-dashboard-datetimepickercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimepickercontroldisplayoptions.html#cfn-quicksight-dashboard-datetimepickercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimepickercontroldisplayoptions.html#cfn-quicksight-dashboard-datetimepickercontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimePickerControlDisplayOptions:
        from troposphere.quicksight import DateTimePickerControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimevaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-datetimevaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-datetimevaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeValueWhenUnsetConfiguration:
        from troposphere.quicksight import DateTimeValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimaldefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimaldefaultvalues.html#cfn-quicksight-dashboard-decimaldefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimaldefaultvalues.html#cfn-quicksight-dashboard-decimaldefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalDefaultValues:
        from troposphere.quicksight import DecimalDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[float] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameter.html#cfn-quicksight-dashboard-decimalparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameter.html#cfn-quicksight-dashboard-decimalparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalParameter:
        from troposphere.quicksight import DecimalParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html#cfn-quicksight-dashboard-decimalparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DecimalDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html#cfn-quicksight-dashboard-decimalparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html#cfn-quicksight-dashboard-decimalparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['DecimalValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html#cfn-quicksight-dashboard-decimalparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalparameterdeclaration.html#cfn-quicksight-dashboard-decimalparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalParameterDeclaration:
        from troposphere.quicksight import DecimalParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalPlacesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalplacesconfiguration.html
    Properties:
        - Name: DecimalPlaces
    
    """
    
    DecimalPlaces_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalplacesconfiguration.html#cfn-quicksight-dashboard-decimalplacesconfiguration-decimalplaces""", alias="DecimalPlaces")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalPlacesConfiguration:
        from troposphere.quicksight import DecimalPlacesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-decimalvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-decimalvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalValueWhenUnsetConfiguration:
        from troposphere.quicksight import DecimalValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultFreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultfreeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'FreeFormLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultfreeformlayoutconfiguration.html#cfn-quicksight-dashboard-defaultfreeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultFreeFormLayoutConfiguration:
        from troposphere.quicksight import DefaultFreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultGridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultgridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'GridLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultgridlayoutconfiguration.html#cfn-quicksight-dashboard-defaultgridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultGridLayoutConfiguration:
        from troposphere.quicksight import DefaultGridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultInteractiveLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultinteractivelayoutconfiguration.html
    Properties:
        - Name: FreeForm
        - Name: Grid
    
    """
    
    FreeForm_: Optional['DefaultFreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultinteractivelayoutconfiguration.html#cfn-quicksight-dashboard-defaultinteractivelayoutconfiguration-freeform""", alias="FreeForm")
    Grid_: Optional['DefaultGridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultinteractivelayoutconfiguration.html#cfn-quicksight-dashboard-defaultinteractivelayoutconfiguration-grid""", alias="Grid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultInteractiveLayoutConfiguration:
        from troposphere.quicksight import DefaultInteractiveLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultNewSheetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultnewsheetconfiguration.html
    Properties:
        - Name: SheetContentType
        - Name: InteractiveLayoutConfiguration
        - Name: PaginatedLayoutConfiguration
    
    """
    
    SheetContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultnewsheetconfiguration.html#cfn-quicksight-dashboard-defaultnewsheetconfiguration-sheetcontenttype""", alias="SheetContentType")
    InteractiveLayoutConfiguration_: Optional['DefaultInteractiveLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultnewsheetconfiguration.html#cfn-quicksight-dashboard-defaultnewsheetconfiguration-interactivelayoutconfiguration""", alias="InteractiveLayoutConfiguration")
    PaginatedLayoutConfiguration_: Optional['DefaultPaginatedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultnewsheetconfiguration.html#cfn-quicksight-dashboard-defaultnewsheetconfiguration-paginatedlayoutconfiguration""", alias="PaginatedLayoutConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultNewSheetConfiguration:
        from troposphere.quicksight import DefaultNewSheetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultPaginatedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultpaginatedlayoutconfiguration.html
    Properties:
        - Name: SectionBased
    
    """
    
    SectionBased_: Optional['DefaultSectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultpaginatedlayoutconfiguration.html#cfn-quicksight-dashboard-defaultpaginatedlayoutconfiguration-sectionbased""", alias="SectionBased")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultPaginatedLayoutConfiguration:
        from troposphere.quicksight import DefaultPaginatedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultSectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultsectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-defaultsectionbasedlayoutconfiguration.html#cfn-quicksight-dashboard-defaultsectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultSectionBasedLayoutConfiguration:
        from troposphere.quicksight import DefaultSectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DestinationParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html
    Properties:
        - Name: CustomValuesConfiguration
        - Name: SourceParameterName
        - Name: SelectAllValueOptions
        - Name: SourceField
        - Name: SourceColumn
    
    """
    
    CustomValuesConfiguration_: Optional['CustomValuesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html#cfn-quicksight-dashboard-destinationparametervalueconfiguration-customvaluesconfiguration""", alias="CustomValuesConfiguration")
    SourceParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html#cfn-quicksight-dashboard-destinationparametervalueconfiguration-sourceparametername""", alias="SourceParameterName")
    SelectAllValueOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html#cfn-quicksight-dashboard-destinationparametervalueconfiguration-selectallvalueoptions""", alias="SelectAllValueOptions")
    SourceField_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html#cfn-quicksight-dashboard-destinationparametervalueconfiguration-sourcefield""", alias="SourceField")
    SourceColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-destinationparametervalueconfiguration.html#cfn-quicksight-dashboard-destinationparametervalueconfiguration-sourcecolumn""", alias="SourceColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DestinationParameterValueConfiguration:
        from troposphere.quicksight import DestinationParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dimensionfield.html
    Properties:
        - Name: DateDimensionField
        - Name: NumericalDimensionField
        - Name: CategoricalDimensionField
    
    """
    
    DateDimensionField_: Optional['DateDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dimensionfield.html#cfn-quicksight-dashboard-dimensionfield-datedimensionfield""", alias="DateDimensionField")
    NumericalDimensionField_: Optional['NumericalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dimensionfield.html#cfn-quicksight-dashboard-dimensionfield-numericaldimensionfield""", alias="NumericalDimensionField")
    CategoricalDimensionField_: Optional['CategoricalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dimensionfield.html#cfn-quicksight-dashboard-dimensionfield-categoricaldimensionfield""", alias="CategoricalDimensionField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DimensionField:
        from troposphere.quicksight import DimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutCenterOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutcenteroptions.html
    Properties:
        - Name: LabelVisibility
    
    """
    
    LabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutcenteroptions.html#cfn-quicksight-dashboard-donutcenteroptions-labelvisibility""", alias="LabelVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutCenterOptions:
        from troposphere.quicksight import DonutCenterOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutoptions.html
    Properties:
        - Name: DonutCenterOptions
        - Name: ArcOptions
    
    """
    
    DonutCenterOptions_: Optional['DonutCenterOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutoptions.html#cfn-quicksight-dashboard-donutoptions-donutcenteroptions""", alias="DonutCenterOptions")
    ArcOptions_: Optional['ArcOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-donutoptions.html#cfn-quicksight-dashboard-donutoptions-arcoptions""", alias="ArcOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutOptions:
        from troposphere.quicksight import DonutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-drilldownfilter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: TimeRangeFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-drilldownfilter.html#cfn-quicksight-dashboard-drilldownfilter-numericequalityfilter""", alias="NumericEqualityFilter")
    TimeRangeFilter_: Optional['TimeRangeDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-drilldownfilter.html#cfn-quicksight-dashboard-drilldownfilter-timerangefilter""", alias="TimeRangeFilter")
    CategoryFilter_: Optional['CategoryDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-drilldownfilter.html#cfn-quicksight-dashboard-drilldownfilter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DrillDownFilter:
        from troposphere.quicksight import DrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DropDownControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dropdowncontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dropdowncontroldisplayoptions.html#cfn-quicksight-dashboard-dropdowncontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dropdowncontroldisplayoptions.html#cfn-quicksight-dashboard-dropdowncontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dropdowncontroldisplayoptions.html#cfn-quicksight-dashboard-dropdowncontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DropDownControlDisplayOptions:
        from troposphere.quicksight import DropDownControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DynamicDefaultValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dynamicdefaultvalue.html
    Properties:
        - Name: GroupNameColumn
        - Name: DefaultValueColumn
        - Name: UserNameColumn
    
    """
    
    GroupNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dynamicdefaultvalue.html#cfn-quicksight-dashboard-dynamicdefaultvalue-groupnamecolumn""", alias="GroupNameColumn")
    DefaultValueColumn_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dynamicdefaultvalue.html#cfn-quicksight-dashboard-dynamicdefaultvalue-defaultvaluecolumn""", alias="DefaultValueColumn")
    UserNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-dynamicdefaultvalue.html#cfn-quicksight-dashboard-dynamicdefaultvalue-usernamecolumn""", alias="UserNameColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DynamicDefaultValue:
        from troposphere.quicksight import DynamicDefaultValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class EmptyVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-emptyvisual.html
    Properties:
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
    
    """
    
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-emptyvisual.html#cfn-quicksight-dashboard-emptyvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-emptyvisual.html#cfn-quicksight-dashboard-emptyvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-emptyvisual.html#cfn-quicksight-dashboard-emptyvisual-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.EmptyVisual:
        from troposphere.quicksight import EmptyVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Entity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-entity.html
    Properties:
        - Name: Path
    
    """
    
    Path_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-entity.html#cfn-quicksight-dashboard-entity-path""", alias="Path")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Entity:
        from troposphere.quicksight import Entity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExcludePeriodConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-excludeperiodconfiguration.html
    Properties:
        - Name: Status
        - Name: Amount
        - Name: Granularity
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-excludeperiodconfiguration.html#cfn-quicksight-dashboard-excludeperiodconfiguration-status""", alias="Status")
    Amount_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-excludeperiodconfiguration.html#cfn-quicksight-dashboard-excludeperiodconfiguration-amount""", alias="Amount")
    Granularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-excludeperiodconfiguration.html#cfn-quicksight-dashboard-excludeperiodconfiguration-granularity""", alias="Granularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExcludePeriodConfiguration:
        from troposphere.quicksight import ExcludePeriodConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExplicitHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-explicithierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-explicithierarchy.html#cfn-quicksight-dashboard-explicithierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-explicithierarchy.html#cfn-quicksight-dashboard-explicithierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-explicithierarchy.html#cfn-quicksight-dashboard-explicithierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExplicitHierarchy:
        from troposphere.quicksight import ExplicitHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExportHiddenFieldsOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporthiddenfieldsoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporthiddenfieldsoption.html#cfn-quicksight-dashboard-exporthiddenfieldsoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExportHiddenFieldsOption:
        from troposphere.quicksight import ExportHiddenFieldsOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExportToCSVOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporttocsvoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exporttocsvoption.html#cfn-quicksight-dashboard-exporttocsvoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExportToCSVOption:
        from troposphere.quicksight import ExportToCSVOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExportWithHiddenFieldsOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exportwithhiddenfieldsoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-exportwithhiddenfieldsoption.html#cfn-quicksight-dashboard-exportwithhiddenfieldsoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExportWithHiddenFieldsOption:
        from troposphere.quicksight import ExportWithHiddenFieldsOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldBasedTooltip(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldbasedtooltip.html
    Properties:
        - Name: TooltipFields
        - Name: AggregationVisibility
        - Name: TooltipTitleType
    
    """
    
    TooltipFields_: Optional[List['TooltipItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldbasedtooltip.html#cfn-quicksight-dashboard-fieldbasedtooltip-tooltipfields""", alias="TooltipFields")
    AggregationVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldbasedtooltip.html#cfn-quicksight-dashboard-fieldbasedtooltip-aggregationvisibility""", alias="AggregationVisibility")
    TooltipTitleType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldbasedtooltip.html#cfn-quicksight-dashboard-fieldbasedtooltip-tooltiptitletype""", alias="TooltipTitleType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldBasedTooltip:
        from troposphere.quicksight import FieldBasedTooltip as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldlabeltype.html#cfn-quicksight-dashboard-fieldlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldlabeltype.html#cfn-quicksight-dashboard-fieldlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldLabelType:
        from troposphere.quicksight import FieldLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldseriesitem.html#cfn-quicksight-dashboard-fieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldseriesitem.html#cfn-quicksight-dashboard-fieldseriesitem-axisbinding""", alias="AxisBinding")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldseriesitem.html#cfn-quicksight-dashboard-fieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSeriesItem:
        from troposphere.quicksight import FieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsort.html
    Properties:
        - Name: FieldId
        - Name: Direction
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsort.html#cfn-quicksight-dashboard-fieldsort-fieldid""", alias="FieldId")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsort.html#cfn-quicksight-dashboard-fieldsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSort:
        from troposphere.quicksight import FieldSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsortoptions.html
    Properties:
        - Name: FieldSort
        - Name: ColumnSort
    
    """
    
    FieldSort_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsortoptions.html#cfn-quicksight-dashboard-fieldsortoptions-fieldsort""", alias="FieldSort")
    ColumnSort_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldsortoptions.html#cfn-quicksight-dashboard-fieldsortoptions-columnsort""", alias="ColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSortOptions:
        from troposphere.quicksight import FieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldtooltipitem.html
    Properties:
        - Name: FieldId
        - Name: Label
        - Name: Visibility
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldtooltipitem.html#cfn-quicksight-dashboard-fieldtooltipitem-fieldid""", alias="FieldId")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldtooltipitem.html#cfn-quicksight-dashboard-fieldtooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fieldtooltipitem.html#cfn-quicksight-dashboard-fieldtooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldTooltipItem:
        from troposphere.quicksight import FieldTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Geospatial
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapaggregatedfieldwells.html#cfn-quicksight-dashboard-filledmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapaggregatedfieldwells.html#cfn-quicksight-dashboard-filledmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapAggregatedFieldWells:
        from troposphere.quicksight import FilledMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: List['FilledMapConditionalFormattingOption'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformatting.html#cfn-quicksight-dashboard-filledmapconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormatting:
        from troposphere.quicksight import FilledMapConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformattingoption.html
    Properties:
        - Name: Shape
    
    """
    
    Shape_: 'FilledMapShapeConditionalFormatting' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconditionalformattingoption.html#cfn-quicksight-dashboard-filledmapconditionalformattingoption-shape""", alias="Shape")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormattingOption:
        from troposphere.quicksight import FilledMapConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
    
    """
    
    SortConfiguration_: Optional['FilledMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['FilledMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapconfiguration.html#cfn-quicksight-dashboard-filledmapconfiguration-windowoptions""", alias="WindowOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConfiguration:
        from troposphere.quicksight import FilledMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapfieldwells.html
    Properties:
        - Name: FilledMapAggregatedFieldWells
    
    """
    
    FilledMapAggregatedFieldWells_: Optional['FilledMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapfieldwells.html#cfn-quicksight-dashboard-filledmapfieldwells-filledmapaggregatedfieldwells""", alias="FilledMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapFieldWells:
        from troposphere.quicksight import FilledMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapShapeConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapshapeconditionalformatting.html
    Properties:
        - Name: Format
        - Name: FieldId
    
    """
    
    Format_: Optional['ShapeConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapshapeconditionalformatting.html#cfn-quicksight-dashboard-filledmapshapeconditionalformatting-format""", alias="Format")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapshapeconditionalformatting.html#cfn-quicksight-dashboard-filledmapshapeconditionalformatting-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapShapeConditionalFormatting:
        from troposphere.quicksight import FilledMapShapeConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapsortconfiguration.html
    Properties:
        - Name: CategorySort
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapsortconfiguration.html#cfn-quicksight-dashboard-filledmapsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapSortConfiguration:
        from troposphere.quicksight import FilledMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['FilledMapConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FilledMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filledmapvisual.html#cfn-quicksight-dashboard-filledmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapVisual:
        from troposphere.quicksight import FilledMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Filter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: NumericRangeFilter
        - Name: TimeRangeFilter
        - Name: RelativeDatesFilter
        - Name: TopBottomFilter
        - Name: TimeEqualityFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-numericequalityfilter""", alias="NumericEqualityFilter")
    NumericRangeFilter_: Optional['NumericRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-numericrangefilter""", alias="NumericRangeFilter")
    TimeRangeFilter_: Optional['TimeRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-timerangefilter""", alias="TimeRangeFilter")
    RelativeDatesFilter_: Optional['RelativeDatesFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-relativedatesfilter""", alias="RelativeDatesFilter")
    TopBottomFilter_: Optional['TopBottomFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-topbottomfilter""", alias="TopBottomFilter")
    TimeEqualityFilter_: Optional['TimeEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-timeequalityfilter""", alias="TimeEqualityFilter")
    CategoryFilter_: Optional['CategoryFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filter.html#cfn-quicksight-dashboard-filter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Filter:
        from troposphere.quicksight import Filter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
        - Name: RelativeDateTime
    
    """
    
    Slider_: Optional['FilterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-slider""", alias="Slider")
    TextArea_: Optional['FilterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['FilterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['FilterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-textfield""", alias="TextField")
    List_: Optional['FilterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-list""", alias="List")
    DateTimePicker_: Optional['FilterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-datetimepicker""", alias="DateTimePicker")
    RelativeDateTime_: Optional['FilterRelativeDateTimeControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtercontrol.html#cfn-quicksight-dashboard-filtercontrol-relativedatetime""", alias="RelativeDateTime")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterControl:
        from troposphere.quicksight import FilterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html#cfn-quicksight-dashboard-filterdatetimepickercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html#cfn-quicksight-dashboard-filterdatetimepickercontrol-type""", alias="Type")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html#cfn-quicksight-dashboard-filterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html#cfn-quicksight-dashboard-filterdatetimepickercontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdatetimepickercontrol.html#cfn-quicksight-dashboard-filterdatetimepickercontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDateTimePickerControl:
        from troposphere.quicksight import FilterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterdropdowncontrol.html#cfn-quicksight-dashboard-filterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDropDownControl:
        from troposphere.quicksight import FilterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterGroup(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html
    Properties:
        - Name: Status
        - Name: Filters
        - Name: CrossDataset
        - Name: ScopeConfiguration
        - Name: FilterGroupId
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html#cfn-quicksight-dashboard-filtergroup-status""", alias="Status")
    Filters_: List['Filter'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html#cfn-quicksight-dashboard-filtergroup-filters""", alias="Filters")
    CrossDataset_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html#cfn-quicksight-dashboard-filtergroup-crossdataset""", alias="CrossDataset")
    ScopeConfiguration_: 'FilterScopeConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html#cfn-quicksight-dashboard-filtergroup-scopeconfiguration""", alias="ScopeConfiguration")
    FilterGroupId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtergroup.html#cfn-quicksight-dashboard-filtergroup-filtergroupid""", alias="FilterGroupId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterGroup:
        from troposphere.quicksight import FilterGroup as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html#cfn-quicksight-dashboard-filterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html#cfn-quicksight-dashboard-filterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html#cfn-quicksight-dashboard-filterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistconfiguration.html#cfn-quicksight-dashboard-filterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListConfiguration:
        from troposphere.quicksight import FilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterlistcontrol.html#cfn-quicksight-dashboard-filterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListControl:
        from troposphere.quicksight import FilterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationSelectedFieldsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationselectedfieldsconfiguration.html
    Properties:
        - Name: SelectedColumns
        - Name: SelectedFields
        - Name: SelectedFieldOptions
    
    """
    
    SelectedColumns_: Optional[List['ColumnIdentifier']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-dashboard-filteroperationselectedfieldsconfiguration-selectedcolumns""", alias="SelectedColumns")
    SelectedFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-dashboard-filteroperationselectedfieldsconfiguration-selectedfields""", alias="SelectedFields")
    SelectedFieldOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-dashboard-filteroperationselectedfieldsconfiguration-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationSelectedFieldsConfiguration:
        from troposphere.quicksight import FilterOperationSelectedFieldsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationTargetVisualsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationtargetvisualsconfiguration.html
    Properties:
        - Name: SameSheetTargetVisualConfiguration
    
    """
    
    SameSheetTargetVisualConfiguration_: Optional['SameSheetTargetVisualConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filteroperationtargetvisualsconfiguration.html#cfn-quicksight-dashboard-filteroperationtargetvisualsconfiguration-samesheettargetvisualconfiguration""", alias="SameSheetTargetVisualConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationTargetVisualsConfiguration:
        from troposphere.quicksight import FilterOperationTargetVisualsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterRelativeDateTimeControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html#cfn-quicksight-dashboard-filterrelativedatetimecontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['RelativeDateTimeControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html#cfn-quicksight-dashboard-filterrelativedatetimecontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html#cfn-quicksight-dashboard-filterrelativedatetimecontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterrelativedatetimecontrol.html#cfn-quicksight-dashboard-filterrelativedatetimecontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterRelativeDateTimeControl:
        from troposphere.quicksight import FilterRelativeDateTimeControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterscopeconfiguration.html
    Properties:
        - Name: AllSheets
        - Name: SelectedSheets
    
    """
    
    AllSheets_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterscopeconfiguration.html#cfn-quicksight-dashboard-filterscopeconfiguration-allsheets""", alias="AllSheets")
    SelectedSheets_: Optional['SelectedSheetsFilterScopeConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterscopeconfiguration.html#cfn-quicksight-dashboard-filterscopeconfiguration-selectedsheets""", alias="SelectedSheets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterScopeConfiguration:
        from troposphere.quicksight import FilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterselectablevalues.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterselectablevalues.html#cfn-quicksight-dashboard-filterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSelectableValues:
        from troposphere.quicksight import FilterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: StepSize
        - Name: DisplayOptions
        - Name: Title
        - Name: MaximumValue
        - Name: SourceFilterId
        - Name: MinimumValue
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-type""", alias="Type")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-maximumvalue""", alias="MaximumValue")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-sourcefilterid""", alias="SourceFilterId")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filterslidercontrol.html#cfn-quicksight-dashboard-filterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSliderControl:
        from troposphere.quicksight import FilterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html#cfn-quicksight-dashboard-filtertextareacontrol-filtercontrolid""", alias="FilterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html#cfn-quicksight-dashboard-filtertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html#cfn-quicksight-dashboard-filtertextareacontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html#cfn-quicksight-dashboard-filtertextareacontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextareacontrol.html#cfn-quicksight-dashboard-filtertextareacontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextAreaControl:
        from troposphere.quicksight import FilterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html#cfn-quicksight-dashboard-filtertextfieldcontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html#cfn-quicksight-dashboard-filtertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html#cfn-quicksight-dashboard-filtertextfieldcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-filtertextfieldcontrol.html#cfn-quicksight-dashboard-filtertextfieldcontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextFieldControl:
        from troposphere.quicksight import FilterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html
    Properties:
        - Name: FontStyle
        - Name: FontSize
        - Name: FontDecoration
        - Name: FontColor
        - Name: FontWeight
    
    """
    
    FontStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html#cfn-quicksight-dashboard-fontconfiguration-fontstyle""", alias="FontStyle")
    FontSize_: Optional['FontSize'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html#cfn-quicksight-dashboard-fontconfiguration-fontsize""", alias="FontSize")
    FontDecoration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html#cfn-quicksight-dashboard-fontconfiguration-fontdecoration""", alias="FontDecoration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html#cfn-quicksight-dashboard-fontconfiguration-fontcolor""", alias="FontColor")
    FontWeight_: Optional['FontWeight'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontconfiguration.html#cfn-quicksight-dashboard-fontconfiguration-fontweight""", alias="FontWeight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontConfiguration:
        from troposphere.quicksight import FontConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontSize(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontsize.html
    Properties:
        - Name: Relative
    
    """
    
    Relative_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontsize.html#cfn-quicksight-dashboard-fontsize-relative""", alias="Relative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontSize:
        from troposphere.quicksight import FontSize as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontWeight(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontweight.html
    Properties:
        - Name: Name
    
    """
    
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-fontweight.html#cfn-quicksight-dashboard-fontweight-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontWeight:
        from troposphere.quicksight import FontWeight as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: CustomSeasonalityValue
        - Name: Value
        - Name: Time
        - Name: UpperBoundary
        - Name: ComputationId
        - Name: Name
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-seasonality""", alias="Seasonality")
    CustomSeasonalityValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-customseasonalityvalue""", alias="CustomSeasonalityValue")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-time""", alias="Time")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-upperboundary""", alias="UpperBoundary")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-name""", alias="Name")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastcomputation.html#cfn-quicksight-dashboard-forecastcomputation-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastComputation:
        from troposphere.quicksight import ForecastComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastconfiguration.html
    Properties:
        - Name: ForecastProperties
        - Name: Scenario
    
    """
    
    ForecastProperties_: Optional['TimeBasedForecastProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastconfiguration.html#cfn-quicksight-dashboard-forecastconfiguration-forecastproperties""", alias="ForecastProperties")
    Scenario_: Optional['ForecastScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastconfiguration.html#cfn-quicksight-dashboard-forecastconfiguration-scenario""", alias="Scenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastConfiguration:
        from troposphere.quicksight import ForecastConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastscenario.html
    Properties:
        - Name: WhatIfRangeScenario
        - Name: WhatIfPointScenario
    
    """
    
    WhatIfRangeScenario_: Optional['WhatIfRangeScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastscenario.html#cfn-quicksight-dashboard-forecastscenario-whatifrangescenario""", alias="WhatIfRangeScenario")
    WhatIfPointScenario_: Optional['WhatIfPointScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-forecastscenario.html#cfn-quicksight-dashboard-forecastscenario-whatifpointscenario""", alias="WhatIfPointScenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastScenario:
        from troposphere.quicksight import ForecastScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-formatconfiguration.html
    Properties:
        - Name: NumberFormatConfiguration
        - Name: DateTimeFormatConfiguration
        - Name: StringFormatConfiguration
    
    """
    
    NumberFormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-formatconfiguration.html#cfn-quicksight-dashboard-formatconfiguration-numberformatconfiguration""", alias="NumberFormatConfiguration")
    DateTimeFormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-formatconfiguration.html#cfn-quicksight-dashboard-formatconfiguration-datetimeformatconfiguration""", alias="DateTimeFormatConfiguration")
    StringFormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-formatconfiguration.html#cfn-quicksight-dashboard-formatconfiguration-stringformatconfiguration""", alias="StringFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FormatConfiguration:
        from troposphere.quicksight import FormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['FreeFormLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutcanvassizeoptions.html#cfn-quicksight-dashboard-freeformlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['FreeFormLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutconfiguration.html#cfn-quicksight-dashboard-freeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutconfiguration.html#cfn-quicksight-dashboard-freeformlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutConfiguration:
        from troposphere.quicksight import FreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: BorderStyle
        - Name: Height
        - Name: Visibility
        - Name: RenderingRules
        - Name: YAxisLocation
        - Name: LoadingAnimation
        - Name: Width
        - Name: BackgroundStyle
        - Name: ElementId
        - Name: XAxisLocation
        - Name: SelectedBorderStyle
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-elementtype""", alias="ElementType")
    BorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-borderstyle""", alias="BorderStyle")
    Height_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-height""", alias="Height")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-visibility""", alias="Visibility")
    RenderingRules_: Optional[List['SheetElementRenderingRule']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-renderingrules""", alias="RenderingRules")
    YAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-yaxislocation""", alias="YAxisLocation")
    LoadingAnimation_: Optional['LoadingAnimation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-loadinganimation""", alias="LoadingAnimation")
    Width_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-width""", alias="Width")
    BackgroundStyle_: Optional['FreeFormLayoutElementBackgroundStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-backgroundstyle""", alias="BackgroundStyle")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-elementid""", alias="ElementId")
    XAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-xaxislocation""", alias="XAxisLocation")
    SelectedBorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelement.html#cfn-quicksight-dashboard-freeformlayoutelement-selectedborderstyle""", alias="SelectedBorderStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElement:
        from troposphere.quicksight import FreeFormLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBackgroundStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementbackgroundstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-dashboard-freeformlayoutelementbackgroundstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-dashboard-freeformlayoutelementbackgroundstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBackgroundStyle:
        from troposphere.quicksight import FreeFormLayoutElementBackgroundStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBorderStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementborderstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementborderstyle.html#cfn-quicksight-dashboard-freeformlayoutelementborderstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutelementborderstyle.html#cfn-quicksight-dashboard-freeformlayoutelementborderstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBorderStyle:
        from troposphere.quicksight import FreeFormLayoutElementBorderStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
    
    """
    
    OptimizedViewPortWidth_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformlayoutscreencanvassizeoptions.html#cfn-quicksight-dashboard-freeformlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormSectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformsectionlayoutconfiguration.html
    Properties:
        - Name: Elements
    
    """
    
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-freeformsectionlayoutconfiguration.html#cfn-quicksight-dashboard-freeformsectionlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormSectionLayoutConfiguration:
        from troposphere.quicksight import FreeFormSectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartaggregatedfieldwells.html#cfn-quicksight-dashboard-funnelchartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartaggregatedfieldwells.html#cfn-quicksight-dashboard-funnelchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartAggregatedFieldWells:
        from troposphere.quicksight import FunnelChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['FunnelChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabelOptions_: Optional['FunnelChartDataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-datalabeloptions""", alias="DataLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['FunnelChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-tooltip""", alias="Tooltip")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartconfiguration.html#cfn-quicksight-dashboard-funnelchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartConfiguration:
        from troposphere.quicksight import FunnelChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartDataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html
    Properties:
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: Visibility
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: MeasureDataLabelStyle
        - Name: LabelFontConfiguration
    
    """
    
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-position""", alias="Position")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-visibility""", alias="Visibility")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-labelcolor""", alias="LabelColor")
    MeasureDataLabelStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-measuredatalabelstyle""", alias="MeasureDataLabelStyle")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartdatalabeloptions.html#cfn-quicksight-dashboard-funnelchartdatalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartDataLabelOptions:
        from troposphere.quicksight import FunnelChartDataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartfieldwells.html
    Properties:
        - Name: FunnelChartAggregatedFieldWells
    
    """
    
    FunnelChartAggregatedFieldWells_: Optional['FunnelChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartfieldwells.html#cfn-quicksight-dashboard-funnelchartfieldwells-funnelchartaggregatedfieldwells""", alias="FunnelChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartFieldWells:
        from troposphere.quicksight import FunnelChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartsortconfiguration.html#cfn-quicksight-dashboard-funnelchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartsortconfiguration.html#cfn-quicksight-dashboard-funnelchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartSortConfiguration:
        from troposphere.quicksight import FunnelChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FunnelChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-funnelchartvisual.html#cfn-quicksight-dashboard-funnelchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartVisual:
        from troposphere.quicksight import FunnelChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartArcConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartarcconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartarcconditionalformatting.html#cfn-quicksight-dashboard-gaugechartarcconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartArcConditionalFormatting:
        from troposphere.quicksight import GaugeChartArcConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['GaugeChartConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformatting.html#cfn-quicksight-dashboard-gaugechartconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormatting:
        from troposphere.quicksight import GaugeChartConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformattingoption.html
    Properties:
        - Name: Arc
        - Name: PrimaryValue
    
    """
    
    Arc_: Optional['GaugeChartArcConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformattingoption.html#cfn-quicksight-dashboard-gaugechartconditionalformattingoption-arc""", alias="Arc")
    PrimaryValue_: Optional['GaugeChartPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconditionalformattingoption.html#cfn-quicksight-dashboard-gaugechartconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormattingOption:
        from troposphere.quicksight import GaugeChartConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html
    Properties:
        - Name: DataLabels
        - Name: FieldWells
        - Name: TooltipOptions
        - Name: GaugeChartOptions
        - Name: VisualPalette
    
    """
    
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html#cfn-quicksight-dashboard-gaugechartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['GaugeChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html#cfn-quicksight-dashboard-gaugechartconfiguration-fieldwells""", alias="FieldWells")
    TooltipOptions_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html#cfn-quicksight-dashboard-gaugechartconfiguration-tooltipoptions""", alias="TooltipOptions")
    GaugeChartOptions_: Optional['GaugeChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html#cfn-quicksight-dashboard-gaugechartconfiguration-gaugechartoptions""", alias="GaugeChartOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartconfiguration.html#cfn-quicksight-dashboard-gaugechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConfiguration:
        from troposphere.quicksight import GaugeChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartfieldwells.html
    Properties:
        - Name: TargetValues
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartfieldwells.html#cfn-quicksight-dashboard-gaugechartfieldwells-targetvalues""", alias="TargetValues")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartfieldwells.html#cfn-quicksight-dashboard-gaugechartfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartFieldWells:
        from troposphere.quicksight import GaugeChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html
    Properties:
        - Name: Arc
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ArcAxis
        - Name: PrimaryValueFontConfiguration
    
    """
    
    Arc_: Optional['ArcConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html#cfn-quicksight-dashboard-gaugechartoptions-arc""", alias="Arc")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html#cfn-quicksight-dashboard-gaugechartoptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html#cfn-quicksight-dashboard-gaugechartoptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ArcAxis_: Optional['ArcAxisConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html#cfn-quicksight-dashboard-gaugechartoptions-arcaxis""", alias="ArcAxis")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartoptions.html#cfn-quicksight-dashboard-gaugechartoptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartOptions:
        from troposphere.quicksight import GaugeChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-dashboard-gaugechartprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartPrimaryValueConditionalFormatting:
        from troposphere.quicksight import GaugeChartPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['GaugeChartConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GaugeChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gaugechartvisual.html#cfn-quicksight-dashboard-gaugechartvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartVisual:
        from troposphere.quicksight import GaugeChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialCoordinateBounds(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html
    Properties:
        - Name: West
        - Name: South
        - Name: North
        - Name: East
    
    """
    
    West_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html#cfn-quicksight-dashboard-geospatialcoordinatebounds-west""", alias="West")
    South_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html#cfn-quicksight-dashboard-geospatialcoordinatebounds-south""", alias="South")
    North_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html#cfn-quicksight-dashboard-geospatialcoordinatebounds-north""", alias="North")
    East_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialcoordinatebounds.html#cfn-quicksight-dashboard-geospatialcoordinatebounds-east""", alias="East")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialCoordinateBounds:
        from troposphere.quicksight import GeospatialCoordinateBounds as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapcolorscale.html
    Properties:
        - Name: Colors
    
    """
    
    Colors_: Optional[List['GeospatialHeatmapDataColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapcolorscale.html#cfn-quicksight-dashboard-geospatialheatmapcolorscale-colors""", alias="Colors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapColorScale:
        from troposphere.quicksight import GeospatialHeatmapColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapconfiguration.html
    Properties:
        - Name: HeatmapColor
    
    """
    
    HeatmapColor_: Optional['GeospatialHeatmapColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapconfiguration.html#cfn-quicksight-dashboard-geospatialheatmapconfiguration-heatmapcolor""", alias="HeatmapColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapConfiguration:
        from troposphere.quicksight import GeospatialHeatmapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapDataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapdatacolor.html
    Properties:
        - Name: Color
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialheatmapdatacolor.html#cfn-quicksight-dashboard-geospatialheatmapdatacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapDataColor:
        from troposphere.quicksight import GeospatialHeatmapDataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapaggregatedfieldwells.html
    Properties:
        - Name: Colors
        - Name: Values
        - Name: Geospatial
    
    """
    
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapaggregatedfieldwells.html#cfn-quicksight-dashboard-geospatialmapaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapaggregatedfieldwells.html#cfn-quicksight-dashboard-geospatialmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapaggregatedfieldwells.html#cfn-quicksight-dashboard-geospatialmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapAggregatedFieldWells:
        from troposphere.quicksight import GeospatialMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html
    Properties:
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
        - Name: PointStyleOptions
        - Name: VisualPalette
    
    """
    
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['GeospatialMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-windowoptions""", alias="WindowOptions")
    PointStyleOptions_: Optional['GeospatialPointStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-pointstyleoptions""", alias="PointStyleOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapconfiguration.html#cfn-quicksight-dashboard-geospatialmapconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapConfiguration:
        from troposphere.quicksight import GeospatialMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapfieldwells.html
    Properties:
        - Name: GeospatialMapAggregatedFieldWells
    
    """
    
    GeospatialMapAggregatedFieldWells_: Optional['GeospatialMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapfieldwells.html#cfn-quicksight-dashboard-geospatialmapfieldwells-geospatialmapaggregatedfieldwells""", alias="GeospatialMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapFieldWells:
        from troposphere.quicksight import GeospatialMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapstyleoptions.html
    Properties:
        - Name: BaseMapStyle
    
    """
    
    BaseMapStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapstyleoptions.html#cfn-quicksight-dashboard-geospatialmapstyleoptions-basemapstyle""", alias="BaseMapStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapStyleOptions:
        from troposphere.quicksight import GeospatialMapStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GeospatialMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialmapvisual.html#cfn-quicksight-dashboard-geospatialmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapVisual:
        from troposphere.quicksight import GeospatialMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialPointStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialpointstyleoptions.html
    Properties:
        - Name: SelectedPointStyle
        - Name: ClusterMarkerConfiguration
        - Name: HeatmapConfiguration
    
    """
    
    SelectedPointStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialpointstyleoptions.html#cfn-quicksight-dashboard-geospatialpointstyleoptions-selectedpointstyle""", alias="SelectedPointStyle")
    ClusterMarkerConfiguration_: Optional['ClusterMarkerConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialpointstyleoptions.html#cfn-quicksight-dashboard-geospatialpointstyleoptions-clustermarkerconfiguration""", alias="ClusterMarkerConfiguration")
    HeatmapConfiguration_: Optional['GeospatialHeatmapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialpointstyleoptions.html#cfn-quicksight-dashboard-geospatialpointstyleoptions-heatmapconfiguration""", alias="HeatmapConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialPointStyleOptions:
        from troposphere.quicksight import GeospatialPointStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialWindowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialwindowoptions.html
    Properties:
        - Name: Bounds
        - Name: MapZoomMode
    
    """
    
    Bounds_: Optional['GeospatialCoordinateBounds'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialwindowoptions.html#cfn-quicksight-dashboard-geospatialwindowoptions-bounds""", alias="Bounds")
    MapZoomMode_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-geospatialwindowoptions.html#cfn-quicksight-dashboard-geospatialwindowoptions-mapzoommode""", alias="MapZoomMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialWindowOptions:
        from troposphere.quicksight import GeospatialWindowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GlobalTableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-globaltableborderoptions.html
    Properties:
        - Name: UniformBorder
        - Name: SideSpecificBorder
    
    """
    
    UniformBorder_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-globaltableborderoptions.html#cfn-quicksight-dashboard-globaltableborderoptions-uniformborder""", alias="UniformBorder")
    SideSpecificBorder_: Optional['TableSideBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-globaltableborderoptions.html#cfn-quicksight-dashboard-globaltableborderoptions-sidespecificborder""", alias="SideSpecificBorder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GlobalTableBorderOptions:
        from troposphere.quicksight import GlobalTableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientcolor.html
    Properties:
        - Name: Stops
    
    """
    
    Stops_: Optional[List['GradientStop']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientcolor.html#cfn-quicksight-dashboard-gradientcolor-stops""", alias="Stops")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientColor:
        from troposphere.quicksight import GradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientStop(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientstop.html
    Properties:
        - Name: GradientOffset
        - Name: DataValue
        - Name: Color
    
    """
    
    GradientOffset_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientstop.html#cfn-quicksight-dashboard-gradientstop-gradientoffset""", alias="GradientOffset")
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientstop.html#cfn-quicksight-dashboard-gradientstop-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gradientstop.html#cfn-quicksight-dashboard-gradientstop-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientStop:
        from troposphere.quicksight import GradientStop as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['GridLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutcanvassizeoptions.html#cfn-quicksight-dashboard-gridlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['GridLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutconfiguration.html#cfn-quicksight-dashboard-gridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['GridLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutconfiguration.html#cfn-quicksight-dashboard-gridlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutConfiguration:
        from troposphere.quicksight import GridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: ColumnSpan
        - Name: ColumnIndex
        - Name: RowIndex
        - Name: RowSpan
        - Name: ElementId
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-elementtype""", alias="ElementType")
    ColumnSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-columnspan""", alias="ColumnSpan")
    ColumnIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-columnindex""", alias="ColumnIndex")
    RowIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-rowindex""", alias="RowIndex")
    RowSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-rowspan""", alias="RowSpan")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutelement.html#cfn-quicksight-dashboard-gridlayoutelement-elementid""", alias="ElementId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutElement:
        from troposphere.quicksight import GridLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
        - Name: ResizeOption
    
    """
    
    OptimizedViewPortWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-dashboard-gridlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    ResizeOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-dashboard-gridlayoutscreencanvassizeoptions-resizeoption""", alias="ResizeOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GrowthRateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: PeriodSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html#cfn-quicksight-dashboard-growthratecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html#cfn-quicksight-dashboard-growthratecomputation-time""", alias="Time")
    PeriodSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html#cfn-quicksight-dashboard-growthratecomputation-periodsize""", alias="PeriodSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html#cfn-quicksight-dashboard-growthratecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-growthratecomputation.html#cfn-quicksight-dashboard-growthratecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GrowthRateComputation:
        from troposphere.quicksight import GrowthRateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeaderFooterSectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-headerfootersectionconfiguration.html
    Properties:
        - Name: Layout
        - Name: Style
        - Name: SectionId
    
    """
    
    Layout_: 'SectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-headerfootersectionconfiguration.html#cfn-quicksight-dashboard-headerfootersectionconfiguration-layout""", alias="Layout")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-headerfootersectionconfiguration.html#cfn-quicksight-dashboard-headerfootersectionconfiguration-style""", alias="Style")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-headerfootersectionconfiguration.html#cfn-quicksight-dashboard-headerfootersectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeaderFooterSectionConfiguration:
        from troposphere.quicksight import HeaderFooterSectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapaggregatedfieldwells.html#cfn-quicksight-dashboard-heatmapaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapaggregatedfieldwells.html#cfn-quicksight-dashboard-heatmapaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapaggregatedfieldwells.html#cfn-quicksight-dashboard-heatmapaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapAggregatedFieldWells:
        from troposphere.quicksight import HeatMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: ColumnLabelOptions
        - Name: Legend
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: RowLabelOptions
    
    """
    
    SortConfiguration_: Optional['HeatMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    ColumnLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-columnlabeloptions""", alias="ColumnLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['HeatMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-colorscale""", alias="ColorScale")
    RowLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapconfiguration.html#cfn-quicksight-dashboard-heatmapconfiguration-rowlabeloptions""", alias="RowLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapConfiguration:
        from troposphere.quicksight import HeatMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapfieldwells.html
    Properties:
        - Name: HeatMapAggregatedFieldWells
    
    """
    
    HeatMapAggregatedFieldWells_: Optional['HeatMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapfieldwells.html#cfn-quicksight-dashboard-heatmapfieldwells-heatmapaggregatedfieldwells""", alias="HeatMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapFieldWells:
        from troposphere.quicksight import HeatMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html
    Properties:
        - Name: HeatMapRowSort
        - Name: HeatMapRowItemsLimitConfiguration
        - Name: HeatMapColumnItemsLimitConfiguration
        - Name: HeatMapColumnSort
    
    """
    
    HeatMapRowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html#cfn-quicksight-dashboard-heatmapsortconfiguration-heatmaprowsort""", alias="HeatMapRowSort")
    HeatMapRowItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html#cfn-quicksight-dashboard-heatmapsortconfiguration-heatmaprowitemslimitconfiguration""", alias="HeatMapRowItemsLimitConfiguration")
    HeatMapColumnItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html#cfn-quicksight-dashboard-heatmapsortconfiguration-heatmapcolumnitemslimitconfiguration""", alias="HeatMapColumnItemsLimitConfiguration")
    HeatMapColumnSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapsortconfiguration.html#cfn-quicksight-dashboard-heatmapsortconfiguration-heatmapcolumnsort""", alias="HeatMapColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapSortConfiguration:
        from troposphere.quicksight import HeatMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HeatMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-heatmapvisual.html#cfn-quicksight-dashboard-heatmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapVisual:
        from troposphere.quicksight import HeatMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramaggregatedfieldwells.html#cfn-quicksight-dashboard-histogramaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramAggregatedFieldWells:
        from troposphere.quicksight import HistogramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramBinOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html
    Properties:
        - Name: BinWidth
        - Name: StartValue
        - Name: SelectedBinType
        - Name: BinCount
    
    """
    
    BinWidth_: Optional['BinWidthOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html#cfn-quicksight-dashboard-histogrambinoptions-binwidth""", alias="BinWidth")
    StartValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html#cfn-quicksight-dashboard-histogrambinoptions-startvalue""", alias="StartValue")
    SelectedBinType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html#cfn-quicksight-dashboard-histogrambinoptions-selectedbintype""", alias="SelectedBinType")
    BinCount_: Optional['BinCountOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogrambinoptions.html#cfn-quicksight-dashboard-histogrambinoptions-bincount""", alias="BinCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramBinOptions:
        from troposphere.quicksight import HistogramBinOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html
    Properties:
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: BinOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-datalabels""", alias="DataLabels")
    BinOptions_: Optional['HistogramBinOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-binoptions""", alias="BinOptions")
    FieldWells_: Optional['HistogramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramconfiguration.html#cfn-quicksight-dashboard-histogramconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramConfiguration:
        from troposphere.quicksight import HistogramConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramfieldwells.html
    Properties:
        - Name: HistogramAggregatedFieldWells
    
    """
    
    HistogramAggregatedFieldWells_: Optional['HistogramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramfieldwells.html#cfn-quicksight-dashboard-histogramfieldwells-histogramaggregatedfieldwells""", alias="HistogramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramFieldWells:
        from troposphere.quicksight import HistogramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html#cfn-quicksight-dashboard-histogramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html#cfn-quicksight-dashboard-histogramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HistogramConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html#cfn-quicksight-dashboard-histogramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html#cfn-quicksight-dashboard-histogramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-histogramvisual.html#cfn-quicksight-dashboard-histogramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramVisual:
        from troposphere.quicksight import HistogramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightconfiguration.html
    Properties:
        - Name: Computations
        - Name: CustomNarrative
    
    """
    
    Computations_: Optional[List['Computation']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightconfiguration.html#cfn-quicksight-dashboard-insightconfiguration-computations""", alias="Computations")
    CustomNarrative_: Optional['CustomNarrativeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightconfiguration.html#cfn-quicksight-dashboard-insightconfiguration-customnarrative""", alias="CustomNarrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightConfiguration:
        from troposphere.quicksight import InsightConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: InsightConfiguration
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-datasetidentifier""", alias="DataSetIdentifier")
    InsightConfiguration_: Optional['InsightConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-insightconfiguration""", alias="InsightConfiguration")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-insightvisual.html#cfn-quicksight-dashboard-insightvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightVisual:
        from troposphere.quicksight import InsightVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerdefaultvalues.html#cfn-quicksight-dashboard-integerdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerdefaultvalues.html#cfn-quicksight-dashboard-integerdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerDefaultValues:
        from troposphere.quicksight import IntegerDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[float] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameter.html#cfn-quicksight-dashboard-integerparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameter.html#cfn-quicksight-dashboard-integerparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerParameter:
        from troposphere.quicksight import IntegerParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html#cfn-quicksight-dashboard-integerparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['IntegerDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html#cfn-quicksight-dashboard-integerparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html#cfn-quicksight-dashboard-integerparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['IntegerValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html#cfn-quicksight-dashboard-integerparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integerparameterdeclaration.html#cfn-quicksight-dashboard-integerparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerParameterDeclaration:
        from troposphere.quicksight import IntegerParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integervaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integervaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-integervaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-integervaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-integervaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerValueWhenUnsetConfiguration:
        from troposphere.quicksight import IntegerValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ItemsLimitConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-itemslimitconfiguration.html
    Properties:
        - Name: ItemsLimit
        - Name: OtherCategories
    
    """
    
    ItemsLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-itemslimitconfiguration.html#cfn-quicksight-dashboard-itemslimitconfiguration-itemslimit""", alias="ItemsLimit")
    OtherCategories_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-itemslimitconfiguration.html#cfn-quicksight-dashboard-itemslimitconfiguration-othercategories""", alias="OtherCategories")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ItemsLimitConfiguration:
        from troposphere.quicksight import ItemsLimitConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIActualValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiactualvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiactualvalueconditionalformatting.html#cfn-quicksight-dashboard-kpiactualvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiactualvalueconditionalformatting.html#cfn-quicksight-dashboard-kpiactualvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIActualValueConditionalFormatting:
        from troposphere.quicksight import KPIActualValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIComparisonValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpicomparisonvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-dashboard-kpicomparisonvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-dashboard-kpicomparisonvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIComparisonValueConditionalFormatting:
        from troposphere.quicksight import KPIComparisonValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['KPIConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformatting.html#cfn-quicksight-dashboard-kpiconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormatting:
        from troposphere.quicksight import KPIConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html
    Properties:
        - Name: PrimaryValue
        - Name: ActualValue
        - Name: ComparisonValue
        - Name: ProgressBar
    
    """
    
    PrimaryValue_: Optional['KPIPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html#cfn-quicksight-dashboard-kpiconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    ActualValue_: Optional['KPIActualValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html#cfn-quicksight-dashboard-kpiconditionalformattingoption-actualvalue""", alias="ActualValue")
    ComparisonValue_: Optional['KPIComparisonValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html#cfn-quicksight-dashboard-kpiconditionalformattingoption-comparisonvalue""", alias="ComparisonValue")
    ProgressBar_: Optional['KPIProgressBarConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconditionalformattingoption.html#cfn-quicksight-dashboard-kpiconditionalformattingoption-progressbar""", alias="ProgressBar")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormattingOption:
        from troposphere.quicksight import KPIConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: KPIOptions
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['KPISortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconfiguration.html#cfn-quicksight-dashboard-kpiconfiguration-sortconfiguration""", alias="SortConfiguration")
    KPIOptions_: Optional['KPIOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconfiguration.html#cfn-quicksight-dashboard-kpiconfiguration-kpioptions""", alias="KPIOptions")
    FieldWells_: Optional['KPIFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiconfiguration.html#cfn-quicksight-dashboard-kpiconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConfiguration:
        from troposphere.quicksight import KPIConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpifieldwells.html
    Properties:
        - Name: TargetValues
        - Name: TrendGroups
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpifieldwells.html#cfn-quicksight-dashboard-kpifieldwells-targetvalues""", alias="TargetValues")
    TrendGroups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpifieldwells.html#cfn-quicksight-dashboard-kpifieldwells-trendgroups""", alias="TrendGroups")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpifieldwells.html#cfn-quicksight-dashboard-kpifieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIFieldWells:
        from troposphere.quicksight import KPIFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html
    Properties:
        - Name: SecondaryValueFontConfiguration
        - Name: VisualLayoutOptions
        - Name: TrendArrows
        - Name: SecondaryValue
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ProgressBar
        - Name: PrimaryValueFontConfiguration
        - Name: Sparkline
    
    """
    
    SecondaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-secondaryvaluefontconfiguration""", alias="SecondaryValueFontConfiguration")
    VisualLayoutOptions_: Optional['KPIVisualLayoutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-visuallayoutoptions""", alias="VisualLayoutOptions")
    TrendArrows_: Optional['TrendArrowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-trendarrows""", alias="TrendArrows")
    SecondaryValue_: Optional['SecondaryValueOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-secondaryvalue""", alias="SecondaryValue")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ProgressBar_: Optional['ProgressBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-progressbar""", alias="ProgressBar")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    Sparkline_: Optional['KPISparklineOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpioptions.html#cfn-quicksight-dashboard-kpioptions-sparkline""", alias="Sparkline")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIOptions:
        from troposphere.quicksight import KPIOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-dashboard-kpiprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-dashboard-kpiprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIPrimaryValueConditionalFormatting:
        from troposphere.quicksight import KPIPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIProgressBarConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprogressbarconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpiprogressbarconditionalformatting.html#cfn-quicksight-dashboard-kpiprogressbarconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIProgressBarConditionalFormatting:
        from troposphere.quicksight import KPIProgressBarConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisortconfiguration.html
    Properties:
        - Name: TrendGroupSort
    
    """
    
    TrendGroupSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisortconfiguration.html#cfn-quicksight-dashboard-kpisortconfiguration-trendgroupsort""", alias="TrendGroupSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISortConfiguration:
        from troposphere.quicksight import KPISortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISparklineOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisparklineoptions.html
    Properties:
        - Name: Type
        - Name: Color
        - Name: TooltipVisibility
        - Name: Visibility
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisparklineoptions.html#cfn-quicksight-dashboard-kpisparklineoptions-type""", alias="Type")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisparklineoptions.html#cfn-quicksight-dashboard-kpisparklineoptions-color""", alias="Color")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisparklineoptions.html#cfn-quicksight-dashboard-kpisparklineoptions-tooltipvisibility""", alias="TooltipVisibility")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpisparklineoptions.html#cfn-quicksight-dashboard-kpisparklineoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISparklineOptions:
        from troposphere.quicksight import KPISparklineOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['KPIConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['KPIConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisual.html#cfn-quicksight-dashboard-kpivisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisual:
        from troposphere.quicksight import KPIVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualLayoutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisuallayoutoptions.html
    Properties:
        - Name: StandardLayout
    
    """
    
    StandardLayout_: Optional['KPIVisualStandardLayout'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisuallayoutoptions.html#cfn-quicksight-dashboard-kpivisuallayoutoptions-standardlayout""", alias="StandardLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualLayoutOptions:
        from troposphere.quicksight import KPIVisualLayoutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualStandardLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisualstandardlayout.html
    Properties:
        - Name: Type
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-kpivisualstandardlayout.html#cfn-quicksight-dashboard-kpivisualstandardlayout-type""", alias="Type")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualStandardLayout:
        from troposphere.quicksight import KPIVisualStandardLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-labeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-labeloptions.html#cfn-quicksight-dashboard-labeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-labeloptions.html#cfn-quicksight-dashboard-labeloptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-labeloptions.html#cfn-quicksight-dashboard-labeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LabelOptions:
        from troposphere.quicksight import LabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Layout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'LayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layout.html#cfn-quicksight-dashboard-layout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Layout:
        from troposphere.quicksight import Layout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layoutconfiguration.html
    Properties:
        - Name: GridLayout
        - Name: FreeFormLayout
        - Name: SectionBasedLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layoutconfiguration.html#cfn-quicksight-dashboard-layoutconfiguration-gridlayout""", alias="GridLayout")
    FreeFormLayout_: Optional['FreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layoutconfiguration.html#cfn-quicksight-dashboard-layoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    SectionBasedLayout_: Optional['SectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-layoutconfiguration.html#cfn-quicksight-dashboard-layoutconfiguration-sectionbasedlayout""", alias="SectionBasedLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LayoutConfiguration:
        from troposphere.quicksight import LayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LegendOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html
    Properties:
        - Name: Position
        - Name: Title
        - Name: Visibility
        - Name: Height
        - Name: Width
    
    """
    
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html#cfn-quicksight-dashboard-legendoptions-position""", alias="Position")
    Title_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html#cfn-quicksight-dashboard-legendoptions-title""", alias="Title")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html#cfn-quicksight-dashboard-legendoptions-visibility""", alias="Visibility")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html#cfn-quicksight-dashboard-legendoptions-height""", alias="Height")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-legendoptions.html#cfn-quicksight-dashboard-legendoptions-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LegendOptions:
        from troposphere.quicksight import LegendOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html#cfn-quicksight-dashboard-linechartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html#cfn-quicksight-dashboard-linechartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html#cfn-quicksight-dashboard-linechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartaggregatedfieldwells.html#cfn-quicksight-dashboard-linechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartAggregatedFieldWells:
        from troposphere.quicksight import LineChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
        - Name: DefaultSeriesSettings
        - Name: SecondaryYAxisLabelOptions
        - Name: ForecastConfigurations
        - Name: Series
        - Name: Type
        - Name: PrimaryYAxisLabelOptions
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
        - Name: XAxisLabelOptions
    
    """
    
    SortConfiguration_: Optional['LineChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-datalabels""", alias="DataLabels")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    PrimaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    DefaultSeriesSettings_: Optional['LineChartDefaultSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-defaultseriessettings""", alias="DefaultSeriesSettings")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    ForecastConfigurations_: Optional[List['ForecastConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-forecastconfigurations""", alias="ForecastConfigurations")
    Series_: Optional[List['SeriesItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-series""", alias="Series")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-type""", alias="Type")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['LineChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartconfiguration.html#cfn-quicksight-dashboard-linechartconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartConfiguration:
        from troposphere.quicksight import LineChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartDefaultSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartdefaultseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: AxisBinding
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartdefaultseriessettings.html#cfn-quicksight-dashboard-linechartdefaultseriessettings-linestylesettings""", alias="LineStyleSettings")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartdefaultseriessettings.html#cfn-quicksight-dashboard-linechartdefaultseriessettings-axisbinding""", alias="AxisBinding")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartdefaultseriessettings.html#cfn-quicksight-dashboard-linechartdefaultseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartDefaultSeriesSettings:
        from troposphere.quicksight import LineChartDefaultSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartfieldwells.html
    Properties:
        - Name: LineChartAggregatedFieldWells
    
    """
    
    LineChartAggregatedFieldWells_: Optional['LineChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartfieldwells.html#cfn-quicksight-dashboard-linechartfieldwells-linechartaggregatedfieldwells""", alias="LineChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartFieldWells:
        from troposphere.quicksight import LineChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartLineStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html
    Properties:
        - Name: LineInterpolation
        - Name: LineStyle
        - Name: LineVisibility
        - Name: LineWidth
    
    """
    
    LineInterpolation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html#cfn-quicksight-dashboard-linechartlinestylesettings-lineinterpolation""", alias="LineInterpolation")
    LineStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html#cfn-quicksight-dashboard-linechartlinestylesettings-linestyle""", alias="LineStyle")
    LineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html#cfn-quicksight-dashboard-linechartlinestylesettings-linevisibility""", alias="LineVisibility")
    LineWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartlinestylesettings.html#cfn-quicksight-dashboard-linechartlinestylesettings-linewidth""", alias="LineWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartLineStyleSettings:
        from troposphere.quicksight import LineChartLineStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartMarkerStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html
    Properties:
        - Name: MarkerShape
        - Name: MarkerSize
        - Name: MarkerVisibility
        - Name: MarkerColor
    
    """
    
    MarkerShape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html#cfn-quicksight-dashboard-linechartmarkerstylesettings-markershape""", alias="MarkerShape")
    MarkerSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html#cfn-quicksight-dashboard-linechartmarkerstylesettings-markersize""", alias="MarkerSize")
    MarkerVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html#cfn-quicksight-dashboard-linechartmarkerstylesettings-markervisibility""", alias="MarkerVisibility")
    MarkerColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartmarkerstylesettings.html#cfn-quicksight-dashboard-linechartmarkerstylesettings-markercolor""", alias="MarkerColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartMarkerStyleSettings:
        from troposphere.quicksight import LineChartMarkerStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartseriessettings.html#cfn-quicksight-dashboard-linechartseriessettings-linestylesettings""", alias="LineStyleSettings")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartseriessettings.html#cfn-quicksight-dashboard-linechartseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSeriesSettings:
        from troposphere.quicksight import LineChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimitConfiguration
        - Name: ColorItemsLimitConfiguration
        - Name: SmallMultiplesSort
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    CategoryItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html#cfn-quicksight-dashboard-linechartsortconfiguration-categoryitemslimitconfiguration""", alias="CategoryItemsLimitConfiguration")
    ColorItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html#cfn-quicksight-dashboard-linechartsortconfiguration-coloritemslimitconfiguration""", alias="ColorItemsLimitConfiguration")
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html#cfn-quicksight-dashboard-linechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html#cfn-quicksight-dashboard-linechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartsortconfiguration.html#cfn-quicksight-dashboard-linechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSortConfiguration:
        from troposphere.quicksight import LineChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['LineChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linechartvisual.html#cfn-quicksight-dashboard-linechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartVisual:
        from troposphere.quicksight import LineChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineSeriesAxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-lineseriesaxisdisplayoptions.html
    Properties:
        - Name: MissingDataConfigurations
        - Name: AxisOptions
    
    """
    
    MissingDataConfigurations_: Optional[List['MissingDataConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-lineseriesaxisdisplayoptions.html#cfn-quicksight-dashboard-lineseriesaxisdisplayoptions-missingdataconfigurations""", alias="MissingDataConfigurations")
    AxisOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-lineseriesaxisdisplayoptions.html#cfn-quicksight-dashboard-lineseriesaxisdisplayoptions-axisoptions""", alias="AxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineSeriesAxisDisplayOptions:
        from troposphere.quicksight import LineSeriesAxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LinkSharingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linksharingconfiguration.html
    Properties:
        - Name: Permissions
    
    """
    
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-linksharingconfiguration.html#cfn-quicksight-dashboard-linksharingconfiguration-permissions""", alias="Permissions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LinkSharingConfiguration:
        from troposphere.quicksight import LinkSharingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SearchOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html#cfn-quicksight-dashboard-listcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SearchOptions_: Optional['ListControlSearchOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html#cfn-quicksight-dashboard-listcontroldisplayoptions-searchoptions""", alias="SearchOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html#cfn-quicksight-dashboard-listcontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontroldisplayoptions.html#cfn-quicksight-dashboard-listcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlDisplayOptions:
        from troposphere.quicksight import ListControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSearchOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolsearchoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolsearchoptions.html#cfn-quicksight-dashboard-listcontrolsearchoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSearchOptions:
        from troposphere.quicksight import ListControlSearchOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSelectAllOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolselectalloptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-listcontrolselectalloptions.html#cfn-quicksight-dashboard-listcontrolselectalloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSelectAllOptions:
        from troposphere.quicksight import ListControlSelectAllOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LoadingAnimation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-loadinganimation.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-loadinganimation.html#cfn-quicksight-dashboard-loadinganimation-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LoadingAnimation:
        from troposphere.quicksight import LoadingAnimation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LocalNavigationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-localnavigationconfiguration.html
    Properties:
        - Name: TargetSheetId
    
    """
    
    TargetSheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-localnavigationconfiguration.html#cfn-quicksight-dashboard-localnavigationconfiguration-targetsheetid""", alias="TargetSheetId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LocalNavigationConfiguration:
        from troposphere.quicksight import LocalNavigationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LongFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-longformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-longformattext.html#cfn-quicksight-dashboard-longformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-longformattext.html#cfn-quicksight-dashboard-longformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LongFormatText:
        from troposphere.quicksight import LongFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MappedDataSetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-mappeddatasetparameter.html
    Properties:
        - Name: DataSetParameterName
        - Name: DataSetIdentifier
    
    """
    
    DataSetParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-mappeddatasetparameter.html#cfn-quicksight-dashboard-mappeddatasetparameter-datasetparametername""", alias="DataSetParameterName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-mappeddatasetparameter.html#cfn-quicksight-dashboard-mappeddatasetparameter-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MappedDataSetParameter:
        from troposphere.quicksight import MappedDataSetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumlabeltype.html#cfn-quicksight-dashboard-maximumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumLabelType:
        from troposphere.quicksight import MaximumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumMinimumComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html
    Properties:
        - Name: Type
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html#cfn-quicksight-dashboard-maximumminimumcomputation-type""", alias="Type")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html#cfn-quicksight-dashboard-maximumminimumcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html#cfn-quicksight-dashboard-maximumminimumcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html#cfn-quicksight-dashboard-maximumminimumcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-maximumminimumcomputation.html#cfn-quicksight-dashboard-maximumminimumcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumMinimumComputation:
        from troposphere.quicksight import MaximumMinimumComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html
    Properties:
        - Name: DateMeasureField
        - Name: NumericalMeasureField
        - Name: CategoricalMeasureField
        - Name: CalculatedMeasureField
    
    """
    
    DateMeasureField_: Optional['DateMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html#cfn-quicksight-dashboard-measurefield-datemeasurefield""", alias="DateMeasureField")
    NumericalMeasureField_: Optional['NumericalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html#cfn-quicksight-dashboard-measurefield-numericalmeasurefield""", alias="NumericalMeasureField")
    CategoricalMeasureField_: Optional['CategoricalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html#cfn-quicksight-dashboard-measurefield-categoricalmeasurefield""", alias="CategoricalMeasureField")
    CalculatedMeasureField_: Optional['CalculatedMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-measurefield.html#cfn-quicksight-dashboard-measurefield-calculatedmeasurefield""", alias="CalculatedMeasureField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MeasureField:
        from troposphere.quicksight import MeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MetricComparisonComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html
    Properties:
        - Name: TargetValue
        - Name: Time
        - Name: ComputationId
        - Name: FromValue
        - Name: Name
    
    """
    
    TargetValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html#cfn-quicksight-dashboard-metriccomparisoncomputation-targetvalue""", alias="TargetValue")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html#cfn-quicksight-dashboard-metriccomparisoncomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html#cfn-quicksight-dashboard-metriccomparisoncomputation-computationid""", alias="ComputationId")
    FromValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html#cfn-quicksight-dashboard-metriccomparisoncomputation-fromvalue""", alias="FromValue")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-metriccomparisoncomputation.html#cfn-quicksight-dashboard-metriccomparisoncomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MetricComparisonComputation:
        from troposphere.quicksight import MetricComparisonComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MinimumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-minimumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-minimumlabeltype.html#cfn-quicksight-dashboard-minimumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MinimumLabelType:
        from troposphere.quicksight import MinimumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MissingDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-missingdataconfiguration.html
    Properties:
        - Name: TreatmentOption
    
    """
    
    TreatmentOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-missingdataconfiguration.html#cfn-quicksight-dashboard-missingdataconfiguration-treatmentoption""", alias="TreatmentOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MissingDataConfiguration:
        from troposphere.quicksight import MissingDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NegativeValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-negativevalueconfiguration.html
    Properties:
        - Name: DisplayMode
    
    """
    
    DisplayMode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-negativevalueconfiguration.html#cfn-quicksight-dashboard-negativevalueconfiguration-displaymode""", alias="DisplayMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NegativeValueConfiguration:
        from troposphere.quicksight import NegativeValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NullValueFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-nullvalueformatconfiguration.html
    Properties:
        - Name: NullString
    
    """
    
    NullString_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-nullvalueformatconfiguration.html#cfn-quicksight-dashboard-nullvalueformatconfiguration-nullstring""", alias="NullString")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NullValueFormatConfiguration:
        from troposphere.quicksight import NullValueFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberdisplayformatconfiguration.html#cfn-quicksight-dashboard-numberdisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberDisplayFormatConfiguration:
        from troposphere.quicksight import NumberDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberformatconfiguration.html
    Properties:
        - Name: FormatConfiguration
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numberformatconfiguration.html#cfn-quicksight-dashboard-numberformatconfiguration-formatconfiguration""", alias="FormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberFormatConfiguration:
        from troposphere.quicksight import NumberFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaxisoptions.html
    Properties:
        - Name: Scale
        - Name: Range
    
    """
    
    Scale_: Optional['AxisScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaxisoptions.html#cfn-quicksight-dashboard-numericaxisoptions-scale""", alias="Scale")
    Range_: Optional['AxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaxisoptions.html#cfn-quicksight-dashboard-numericaxisoptions-range""", alias="Range")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericAxisOptions:
        from troposphere.quicksight import NumericAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalitydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: Value
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalitydrilldownfilter.html#cfn-quicksight-dashboard-numericequalitydrilldownfilter-column""", alias="Column")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalitydrilldownfilter.html#cfn-quicksight-dashboard-numericequalitydrilldownfilter-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityDrillDownFilter:
        from troposphere.quicksight import NumericEqualityDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: Value
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
        - Name: FilterId
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-column""", alias="Column")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-value""", alias="Value")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericequalityfilter.html#cfn-quicksight-dashboard-numericequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityFilter:
        from troposphere.quicksight import NumericEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: CurrencyDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericformatconfiguration.html#cfn-quicksight-dashboard-numericformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    CurrencyDisplayFormatConfiguration_: Optional['CurrencyDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericformatconfiguration.html#cfn-quicksight-dashboard-numericformatconfiguration-currencydisplayformatconfiguration""", alias="CurrencyDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericformatconfiguration.html#cfn-quicksight-dashboard-numericformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericFormatConfiguration:
        from troposphere.quicksight import NumericFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: IncludeMaximum
        - Name: RangeMinimum
        - Name: NullOption
        - Name: SelectAllOptions
        - Name: FilterId
        - Name: RangeMaximum
        - Name: IncludeMinimum
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-column""", alias="Column")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-includemaximum""", alias="IncludeMaximum")
    RangeMinimum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-rangeminimum""", alias="RangeMinimum")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-nulloption""", alias="NullOption")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-filterid""", alias="FilterId")
    RangeMaximum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-rangemaximum""", alias="RangeMaximum")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefilter.html#cfn-quicksight-dashboard-numericrangefilter-includeminimum""", alias="IncludeMinimum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilter:
        from troposphere.quicksight import NumericRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefiltervalue.html
    Properties:
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    StaticValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefiltervalue.html#cfn-quicksight-dashboard-numericrangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericrangefiltervalue.html#cfn-quicksight-dashboard-numericrangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilterValue:
        from troposphere.quicksight import NumericRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericSeparatorConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericseparatorconfiguration.html
    Properties:
        - Name: DecimalSeparator
        - Name: ThousandsSeparator
    
    """
    
    DecimalSeparator_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericseparatorconfiguration.html#cfn-quicksight-dashboard-numericseparatorconfiguration-decimalseparator""", alias="DecimalSeparator")
    ThousandsSeparator_: Optional['ThousandSeparatorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericseparatorconfiguration.html#cfn-quicksight-dashboard-numericseparatorconfiguration-thousandsseparator""", alias="ThousandsSeparator")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericSeparatorConfiguration:
        from troposphere.quicksight import NumericSeparatorConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalaggregationfunction.html
    Properties:
        - Name: PercentileAggregation
        - Name: SimpleNumericalAggregation
    
    """
    
    PercentileAggregation_: Optional['PercentileAggregation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalaggregationfunction.html#cfn-quicksight-dashboard-numericalaggregationfunction-percentileaggregation""", alias="PercentileAggregation")
    SimpleNumericalAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalaggregationfunction.html#cfn-quicksight-dashboard-numericalaggregationfunction-simplenumericalaggregation""", alias="SimpleNumericalAggregation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalAggregationFunction:
        from troposphere.quicksight import NumericalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html#cfn-quicksight-dashboard-numericaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html#cfn-quicksight-dashboard-numericaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html#cfn-quicksight-dashboard-numericaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericaldimensionfield.html#cfn-quicksight-dashboard-numericaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalDimensionField:
        from troposphere.quicksight import NumericalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html#cfn-quicksight-dashboard-numericalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html#cfn-quicksight-dashboard-numericalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html#cfn-quicksight-dashboard-numericalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-numericalmeasurefield.html#cfn-quicksight-dashboard-numericalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalMeasureField:
        from troposphere.quicksight import NumericalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PaginationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paginationconfiguration.html
    Properties:
        - Name: PageSize
        - Name: PageNumber
    
    """
    
    PageSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paginationconfiguration.html#cfn-quicksight-dashboard-paginationconfiguration-pagesize""", alias="PageSize")
    PageNumber_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paginationconfiguration.html#cfn-quicksight-dashboard-paginationconfiguration-pagenumber""", alias="PageNumber")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PaginationConfiguration:
        from troposphere.quicksight import PaginationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html
    Properties:
        - Name: BorderThickness
        - Name: BorderStyle
        - Name: GutterSpacing
        - Name: BackgroundVisibility
        - Name: BorderVisibility
        - Name: BorderColor
        - Name: Title
        - Name: GutterVisibility
        - Name: BackgroundColor
    
    """
    
    BorderThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-borderthickness""", alias="BorderThickness")
    BorderStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-borderstyle""", alias="BorderStyle")
    GutterSpacing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-gutterspacing""", alias="GutterSpacing")
    BackgroundVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-backgroundvisibility""", alias="BackgroundVisibility")
    BorderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-bordervisibility""", alias="BorderVisibility")
    BorderColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-bordercolor""", alias="BorderColor")
    Title_: Optional['PanelTitleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-title""", alias="Title")
    GutterVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-guttervisibility""", alias="GutterVisibility")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-panelconfiguration.html#cfn-quicksight-dashboard-panelconfiguration-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelConfiguration:
        from troposphere.quicksight import PanelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelTitleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paneltitleoptions.html
    Properties:
        - Name: Visibility
        - Name: FontConfiguration
        - Name: HorizontalTextAlignment
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paneltitleoptions.html#cfn-quicksight-dashboard-paneltitleoptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paneltitleoptions.html#cfn-quicksight-dashboard-paneltitleoptions-fontconfiguration""", alias="FontConfiguration")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-paneltitleoptions.html#cfn-quicksight-dashboard-paneltitleoptions-horizontaltextalignment""", alias="HorizontalTextAlignment")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelTitleOptions:
        from troposphere.quicksight import PanelTitleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
    
    """
    
    Slider_: Optional['ParameterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-slider""", alias="Slider")
    TextArea_: Optional['ParameterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['ParameterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['ParameterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-textfield""", alias="TextField")
    List_: Optional['ParameterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-list""", alias="List")
    DateTimePicker_: Optional['ParameterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametercontrol.html#cfn-quicksight-dashboard-parametercontrol-datetimepicker""", alias="DateTimePicker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterControl:
        from troposphere.quicksight import ParameterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html#cfn-quicksight-dashboard-parameterdatetimepickercontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html#cfn-quicksight-dashboard-parameterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html#cfn-quicksight-dashboard-parameterdatetimepickercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdatetimepickercontrol.html#cfn-quicksight-dashboard-parameterdatetimepickercontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDateTimePickerControl:
        from troposphere.quicksight import ParameterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html
    Properties:
        - Name: StringParameterDeclaration
        - Name: DateTimeParameterDeclaration
        - Name: DecimalParameterDeclaration
        - Name: IntegerParameterDeclaration
    
    """
    
    StringParameterDeclaration_: Optional['StringParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html#cfn-quicksight-dashboard-parameterdeclaration-stringparameterdeclaration""", alias="StringParameterDeclaration")
    DateTimeParameterDeclaration_: Optional['DateTimeParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html#cfn-quicksight-dashboard-parameterdeclaration-datetimeparameterdeclaration""", alias="DateTimeParameterDeclaration")
    DecimalParameterDeclaration_: Optional['DecimalParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html#cfn-quicksight-dashboard-parameterdeclaration-decimalparameterdeclaration""", alias="DecimalParameterDeclaration")
    IntegerParameterDeclaration_: Optional['IntegerParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdeclaration.html#cfn-quicksight-dashboard-parameterdeclaration-integerparameterdeclaration""", alias="IntegerParameterDeclaration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDeclaration:
        from troposphere.quicksight import ParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterdropdowncontrol.html#cfn-quicksight-dashboard-parameterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDropDownControl:
        from troposphere.quicksight import ParameterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterlistcontrol.html#cfn-quicksight-dashboard-parameterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterListControl:
        from troposphere.quicksight import ParameterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterselectablevalues.html
    Properties:
        - Name: LinkToDataSetColumn
        - Name: Values
    
    """
    
    LinkToDataSetColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterselectablevalues.html#cfn-quicksight-dashboard-parameterselectablevalues-linktodatasetcolumn""", alias="LinkToDataSetColumn")
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterselectablevalues.html#cfn-quicksight-dashboard-parameterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSelectableValues:
        from troposphere.quicksight import ParameterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: StepSize
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
        - Name: MaximumValue
        - Name: MinimumValue
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-parametercontrolid""", alias="ParameterControlId")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-maximumvalue""", alias="MaximumValue")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameterslidercontrol.html#cfn-quicksight-dashboard-parameterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSliderControl:
        from troposphere.quicksight import ParameterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html#cfn-quicksight-dashboard-parametertextareacontrol-parametercontrolid""", alias="ParameterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html#cfn-quicksight-dashboard-parametertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html#cfn-quicksight-dashboard-parametertextareacontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html#cfn-quicksight-dashboard-parametertextareacontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextareacontrol.html#cfn-quicksight-dashboard-parametertextareacontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextAreaControl:
        from troposphere.quicksight import ParameterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html#cfn-quicksight-dashboard-parametertextfieldcontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html#cfn-quicksight-dashboard-parametertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html#cfn-quicksight-dashboard-parametertextfieldcontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parametertextfieldcontrol.html#cfn-quicksight-dashboard-parametertextfieldcontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextFieldControl:
        from troposphere.quicksight import ParameterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Parameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html
    Properties:
        - Name: StringParameters
        - Name: DecimalParameters
        - Name: IntegerParameters
        - Name: DateTimeParameters
    
    """
    
    StringParameters_: Optional[List['StringParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html#cfn-quicksight-dashboard-parameters-stringparameters""", alias="StringParameters")
    DecimalParameters_: Optional[List['DecimalParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html#cfn-quicksight-dashboard-parameters-decimalparameters""", alias="DecimalParameters")
    IntegerParameters_: Optional[List['IntegerParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html#cfn-quicksight-dashboard-parameters-integerparameters""", alias="IntegerParameters")
    DateTimeParameters_: Optional[List['DateTimeParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-parameters.html#cfn-quicksight-dashboard-parameters-datetimeparameters""", alias="DateTimeParameters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Parameters:
        from troposphere.quicksight import Parameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentVisibleRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentvisiblerange.html
    Properties:
        - Name: From
        - Name: To
    
    """
    
    From_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentvisiblerange.html#cfn-quicksight-dashboard-percentvisiblerange-from""", alias="From")
    To_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentvisiblerange.html#cfn-quicksight-dashboard-percentvisiblerange-to""", alias="To")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentVisibleRange:
        from troposphere.quicksight import PercentVisibleRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentageDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentagedisplayformatconfiguration.html#cfn-quicksight-dashboard-percentagedisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentageDisplayFormatConfiguration:
        from troposphere.quicksight import PercentageDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentileAggregation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentileaggregation.html
    Properties:
        - Name: PercentileValue
    
    """
    
    PercentileValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-percentileaggregation.html#cfn-quicksight-dashboard-percentileaggregation-percentilevalue""", alias="PercentileValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentileAggregation:
        from troposphere.quicksight import PercentileAggregation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodOverPeriodComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html#cfn-quicksight-dashboard-periodoverperiodcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html#cfn-quicksight-dashboard-periodoverperiodcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html#cfn-quicksight-dashboard-periodoverperiodcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodoverperiodcomputation.html#cfn-quicksight-dashboard-periodoverperiodcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodOverPeriodComputation:
        from troposphere.quicksight import PeriodOverPeriodComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodToDateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html
    Properties:
        - Name: PeriodTimeGranularity
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    PeriodTimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html#cfn-quicksight-dashboard-periodtodatecomputation-periodtimegranularity""", alias="PeriodTimeGranularity")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html#cfn-quicksight-dashboard-periodtodatecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html#cfn-quicksight-dashboard-periodtodatecomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html#cfn-quicksight-dashboard-periodtodatecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-periodtodatecomputation.html#cfn-quicksight-dashboard-periodtodatecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodToDateComputation:
        from troposphere.quicksight import PeriodToDateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartaggregatedfieldwells.html#cfn-quicksight-dashboard-piechartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartaggregatedfieldwells.html#cfn-quicksight-dashboard-piechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartaggregatedfieldwells.html#cfn-quicksight-dashboard-piechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartAggregatedFieldWells:
        from troposphere.quicksight import PieChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ContributionAnalysisDefaults
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: DonutOptions
        - Name: SmallMultiplesOptions
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['PieChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-datalabels""", alias="DataLabels")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['PieChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-tooltip""", alias="Tooltip")
    DonutOptions_: Optional['DonutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-donutoptions""", alias="DonutOptions")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartconfiguration.html#cfn-quicksight-dashboard-piechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartConfiguration:
        from troposphere.quicksight import PieChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartfieldwells.html
    Properties:
        - Name: PieChartAggregatedFieldWells
    
    """
    
    PieChartAggregatedFieldWells_: Optional['PieChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartfieldwells.html#cfn-quicksight-dashboard-piechartfieldwells-piechartaggregatedfieldwells""", alias="PieChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartFieldWells:
        from troposphere.quicksight import PieChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html#cfn-quicksight-dashboard-piechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html#cfn-quicksight-dashboard-piechartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html#cfn-quicksight-dashboard-piechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartsortconfiguration.html#cfn-quicksight-dashboard-piechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartSortConfiguration:
        from troposphere.quicksight import PieChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PieChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-piechartvisual.html#cfn-quicksight-dashboard-piechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartVisual:
        from troposphere.quicksight import PieChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotFieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivotfieldsortoptions.html
    Properties:
        - Name: SortBy
        - Name: FieldId
    
    """
    
    SortBy_: 'PivotTableSortBy' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivotfieldsortoptions.html#cfn-quicksight-dashboard-pivotfieldsortoptions-sortby""", alias="SortBy")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivotfieldsortoptions.html#cfn-quicksight-dashboard-pivotfieldsortoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotFieldSortOptions:
        from troposphere.quicksight import PivotFieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableaggregatedfieldwells.html#cfn-quicksight-dashboard-pivottableaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableaggregatedfieldwells.html#cfn-quicksight-dashboard-pivottableaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableaggregatedfieldwells.html#cfn-quicksight-dashboard-pivottableaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableAggregatedFieldWells:
        from troposphere.quicksight import PivotTableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html
    Properties:
        - Name: Scope
        - Name: Scopes
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    Scope_: Optional['PivotTableConditionalFormattingScope'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html#cfn-quicksight-dashboard-pivottablecellconditionalformatting-scope""", alias="Scope")
    Scopes_: Optional[List['PivotTableConditionalFormattingScope']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html#cfn-quicksight-dashboard-pivottablecellconditionalformatting-scopes""", alias="Scopes")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html#cfn-quicksight-dashboard-pivottablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablecellconditionalformatting.html#cfn-quicksight-dashboard-pivottablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableCellConditionalFormatting:
        from troposphere.quicksight import PivotTableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['PivotTableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformatting.html#cfn-quicksight-dashboard-pivottableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormatting:
        from troposphere.quicksight import PivotTableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingoption.html
    Properties:
        - Name: Cell
    
    """
    
    Cell_: Optional['PivotTableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingoption.html#cfn-quicksight-dashboard-pivottableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingOption:
        from troposphere.quicksight import PivotTableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingScope(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingscope.html
    Properties:
        - Name: Role
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconditionalformattingscope.html#cfn-quicksight-dashboard-pivottableconditionalformattingscope-role""", alias="Role")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingScope:
        from troposphere.quicksight import PivotTableConditionalFormattingScope as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['PivotTableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['PivotTablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['PivotTableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-tableoptions""", alias="TableOptions")
    FieldWells_: Optional['PivotTableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['PivotTableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['PivotTableTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableconfiguration.html#cfn-quicksight-dashboard-pivottableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConfiguration:
        from troposphere.quicksight import PivotTableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableDataPathOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabledatapathoption.html
    Properties:
        - Name: DataPathList
        - Name: Width
    
    """
    
    DataPathList_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabledatapathoption.html#cfn-quicksight-dashboard-pivottabledatapathoption-datapathlist""", alias="DataPathList")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabledatapathoption.html#cfn-quicksight-dashboard-pivottabledatapathoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableDataPathOption:
        from troposphere.quicksight import PivotTableDataPathOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestateoption.html
    Properties:
        - Name: Target
        - Name: State
    
    """
    
    Target_: 'PivotTableFieldCollapseStateTarget' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestateoption.html#cfn-quicksight-dashboard-pivottablefieldcollapsestateoption-target""", alias="Target")
    State_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestateoption.html#cfn-quicksight-dashboard-pivottablefieldcollapsestateoption-state""", alias="State")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateOption:
        from troposphere.quicksight import PivotTableFieldCollapseStateOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestatetarget.html
    Properties:
        - Name: FieldId
        - Name: FieldDataPathValues
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestatetarget.html#cfn-quicksight-dashboard-pivottablefieldcollapsestatetarget-fieldid""", alias="FieldId")
    FieldDataPathValues_: Optional[List['DataPathValue']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldcollapsestatetarget.html#cfn-quicksight-dashboard-pivottablefieldcollapsestatetarget-fielddatapathvalues""", alias="FieldDataPathValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateTarget:
        from troposphere.quicksight import PivotTableFieldCollapseStateTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: FieldId
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoption.html#cfn-quicksight-dashboard-pivottablefieldoption-customlabel""", alias="CustomLabel")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoption.html#cfn-quicksight-dashboard-pivottablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoption.html#cfn-quicksight-dashboard-pivottablefieldoption-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOption:
        from troposphere.quicksight import PivotTableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoptions.html
    Properties:
        - Name: CollapseStateOptions
        - Name: DataPathOptions
        - Name: SelectedFieldOptions
    
    """
    
    CollapseStateOptions_: Optional[List['PivotTableFieldCollapseStateOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoptions.html#cfn-quicksight-dashboard-pivottablefieldoptions-collapsestateoptions""", alias="CollapseStateOptions")
    DataPathOptions_: Optional[List['PivotTableDataPathOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoptions.html#cfn-quicksight-dashboard-pivottablefieldoptions-datapathoptions""", alias="DataPathOptions")
    SelectedFieldOptions_: Optional[List['PivotTableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldoptions.html#cfn-quicksight-dashboard-pivottablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOptions:
        from troposphere.quicksight import PivotTableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldSubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldsubtotaloptions.html
    Properties:
        - Name: FieldId
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldsubtotaloptions.html#cfn-quicksight-dashboard-pivottablefieldsubtotaloptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldSubtotalOptions:
        from troposphere.quicksight import PivotTableFieldSubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldwells.html
    Properties:
        - Name: PivotTableAggregatedFieldWells
    
    """
    
    PivotTableAggregatedFieldWells_: Optional['PivotTableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablefieldwells.html#cfn-quicksight-dashboard-pivottablefieldwells-pivottableaggregatedfieldwells""", alias="PivotTableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldWells:
        from troposphere.quicksight import PivotTableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html
    Properties:
        - Name: RowFieldNamesStyle
        - Name: RowHeaderStyle
        - Name: CollapsedRowDimensionsVisibility
        - Name: RowsLayout
        - Name: MetricPlacement
        - Name: DefaultCellWidth
        - Name: ColumnNamesVisibility
        - Name: RowsLabelOptions
        - Name: SingleMetricVisibility
        - Name: ColumnHeaderStyle
        - Name: ToggleButtonsVisibility
        - Name: CellStyle
        - Name: RowAlternateColorOptions
    
    """
    
    RowFieldNamesStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-rowfieldnamesstyle""", alias="RowFieldNamesStyle")
    RowHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-rowheaderstyle""", alias="RowHeaderStyle")
    CollapsedRowDimensionsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-collapsedrowdimensionsvisibility""", alias="CollapsedRowDimensionsVisibility")
    RowsLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-rowslayout""", alias="RowsLayout")
    MetricPlacement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-metricplacement""", alias="MetricPlacement")
    DefaultCellWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-defaultcellwidth""", alias="DefaultCellWidth")
    ColumnNamesVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-columnnamesvisibility""", alias="ColumnNamesVisibility")
    RowsLabelOptions_: Optional['PivotTableRowsLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-rowslabeloptions""", alias="RowsLabelOptions")
    SingleMetricVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-singlemetricvisibility""", alias="SingleMetricVisibility")
    ColumnHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-columnheaderstyle""", alias="ColumnHeaderStyle")
    ToggleButtonsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-togglebuttonsvisibility""", alias="ToggleButtonsVisibility")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-cellstyle""", alias="CellStyle")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottableoptions.html#cfn-quicksight-dashboard-pivottableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableOptions:
        from troposphere.quicksight import PivotTableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablepaginatedreportoptions.html#cfn-quicksight-dashboard-pivottablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablepaginatedreportoptions.html#cfn-quicksight-dashboard-pivottablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTablePaginatedReportOptions:
        from troposphere.quicksight import PivotTablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableRowsLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablerowslabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablerowslabeloptions.html#cfn-quicksight-dashboard-pivottablerowslabeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablerowslabeloptions.html#cfn-quicksight-dashboard-pivottablerowslabeloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableRowsLabelOptions:
        from troposphere.quicksight import PivotTableRowsLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortBy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortby.html
    Properties:
        - Name: Field
        - Name: DataPath
        - Name: Column
    
    """
    
    Field_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortby.html#cfn-quicksight-dashboard-pivottablesortby-field""", alias="Field")
    DataPath_: Optional['DataPathSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortby.html#cfn-quicksight-dashboard-pivottablesortby-datapath""", alias="DataPath")
    Column_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortby.html#cfn-quicksight-dashboard-pivottablesortby-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortBy:
        from troposphere.quicksight import PivotTableSortBy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortconfiguration.html
    Properties:
        - Name: FieldSortOptions
    
    """
    
    FieldSortOptions_: Optional[List['PivotFieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablesortconfiguration.html#cfn-quicksight-dashboard-pivottablesortconfiguration-fieldsortoptions""", alias="FieldSortOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortConfiguration:
        from troposphere.quicksight import PivotTableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html
    Properties:
        - Name: ColumnSubtotalOptions
        - Name: RowSubtotalOptions
        - Name: RowTotalOptions
        - Name: ColumnTotalOptions
    
    """
    
    ColumnSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html#cfn-quicksight-dashboard-pivottabletotaloptions-columnsubtotaloptions""", alias="ColumnSubtotalOptions")
    RowSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html#cfn-quicksight-dashboard-pivottabletotaloptions-rowsubtotaloptions""", alias="RowSubtotalOptions")
    RowTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html#cfn-quicksight-dashboard-pivottabletotaloptions-rowtotaloptions""", alias="RowTotalOptions")
    ColumnTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottabletotaloptions.html#cfn-quicksight-dashboard-pivottabletotaloptions-columntotaloptions""", alias="ColumnTotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableTotalOptions:
        from troposphere.quicksight import PivotTableTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['PivotTableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PivotTableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottablevisual.html#cfn-quicksight-dashboard-pivottablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableVisual:
        from troposphere.quicksight import PivotTableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ValueCellStyle
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: MetricHeaderCellStyle
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-valuecellstyle""", alias="ValueCellStyle")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-totalsvisibility""", alias="TotalsVisibility")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-pivottotaloptions.html#cfn-quicksight-dashboard-pivottotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTotalOptions:
        from troposphere.quicksight import PivotTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PredefinedHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-predefinedhierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-predefinedhierarchy.html#cfn-quicksight-dashboard-predefinedhierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-predefinedhierarchy.html#cfn-quicksight-dashboard-predefinedhierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-predefinedhierarchy.html#cfn-quicksight-dashboard-predefinedhierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PredefinedHierarchy:
        from troposphere.quicksight import PredefinedHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ProgressBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-progressbaroptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-progressbaroptions.html#cfn-quicksight-dashboard-progressbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ProgressBarOptions:
        from troposphere.quicksight import ProgressBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Color
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartaggregatedfieldwells.html#cfn-quicksight-dashboard-radarchartaggregatedfieldwells-category""", alias="Category")
    Color_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartaggregatedfieldwells.html#cfn-quicksight-dashboard-radarchartaggregatedfieldwells-color""", alias="Color")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartaggregatedfieldwells.html#cfn-quicksight-dashboard-radarchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAggregatedFieldWells:
        from troposphere.quicksight import RadarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAreaStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartareastylesettings.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartareastylesettings.html#cfn-quicksight-dashboard-radarchartareastylesettings-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAreaStyleSettings:
        from troposphere.quicksight import RadarChartAreaStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: Shape
        - Name: BaseSeriesSettings
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: AxesRangeScale
        - Name: VisualPalette
        - Name: AlternateBandColorsVisibility
        - Name: StartAngle
        - Name: CategoryAxis
        - Name: FieldWells
        - Name: ColorAxis
        - Name: AlternateBandOddColor
        - Name: AlternateBandEvenColor
    
    """
    
    SortConfiguration_: Optional['RadarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-legend""", alias="Legend")
    Shape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-shape""", alias="Shape")
    BaseSeriesSettings_: Optional['RadarChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-baseseriessettings""", alias="BaseSeriesSettings")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    AxesRangeScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-axesrangescale""", alias="AxesRangeScale")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-visualpalette""", alias="VisualPalette")
    AlternateBandColorsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-alternatebandcolorsvisibility""", alias="AlternateBandColorsVisibility")
    StartAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-startangle""", alias="StartAngle")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-categoryaxis""", alias="CategoryAxis")
    FieldWells_: Optional['RadarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-fieldwells""", alias="FieldWells")
    ColorAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-coloraxis""", alias="ColorAxis")
    AlternateBandOddColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-alternatebandoddcolor""", alias="AlternateBandOddColor")
    AlternateBandEvenColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartconfiguration.html#cfn-quicksight-dashboard-radarchartconfiguration-alternatebandevencolor""", alias="AlternateBandEvenColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartConfiguration:
        from troposphere.quicksight import RadarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartfieldwells.html
    Properties:
        - Name: RadarChartAggregatedFieldWells
    
    """
    
    RadarChartAggregatedFieldWells_: Optional['RadarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartfieldwells.html#cfn-quicksight-dashboard-radarchartfieldwells-radarchartaggregatedfieldwells""", alias="RadarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartFieldWells:
        from troposphere.quicksight import RadarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartseriessettings.html
    Properties:
        - Name: AreaStyleSettings
    
    """
    
    AreaStyleSettings_: Optional['RadarChartAreaStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartseriessettings.html#cfn-quicksight-dashboard-radarchartseriessettings-areastylesettings""", alias="AreaStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSeriesSettings:
        from troposphere.quicksight import RadarChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html#cfn-quicksight-dashboard-radarchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html#cfn-quicksight-dashboard-radarchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html#cfn-quicksight-dashboard-radarchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartsortconfiguration.html#cfn-quicksight-dashboard-radarchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSortConfiguration:
        from troposphere.quicksight import RadarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['RadarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-radarchartvisual.html#cfn-quicksight-dashboard-radarchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartVisual:
        from troposphere.quicksight import RadarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RangeEndsLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rangeendslabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rangeendslabeltype.html#cfn-quicksight-dashboard-rangeendslabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RangeEndsLabelType:
        from troposphere.quicksight import RangeEndsLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLine(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html
    Properties:
        - Name: Status
        - Name: DataConfiguration
        - Name: LabelConfiguration
        - Name: StyleConfiguration
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html#cfn-quicksight-dashboard-referenceline-status""", alias="Status")
    DataConfiguration_: 'ReferenceLineDataConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html#cfn-quicksight-dashboard-referenceline-dataconfiguration""", alias="DataConfiguration")
    LabelConfiguration_: Optional['ReferenceLineLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html#cfn-quicksight-dashboard-referenceline-labelconfiguration""", alias="LabelConfiguration")
    StyleConfiguration_: Optional['ReferenceLineStyleConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referenceline.html#cfn-quicksight-dashboard-referenceline-styleconfiguration""", alias="StyleConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLine:
        from troposphere.quicksight import ReferenceLine as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineCustomLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinecustomlabelconfiguration.html
    Properties:
        - Name: CustomLabel
    
    """
    
    CustomLabel_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinecustomlabelconfiguration.html#cfn-quicksight-dashboard-referencelinecustomlabelconfiguration-customlabel""", alias="CustomLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineCustomLabelConfiguration:
        from troposphere.quicksight import ReferenceLineCustomLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html
    Properties:
        - Name: DynamicConfiguration
        - Name: AxisBinding
        - Name: SeriesType
        - Name: StaticConfiguration
    
    """
    
    DynamicConfiguration_: Optional['ReferenceLineDynamicDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html#cfn-quicksight-dashboard-referencelinedataconfiguration-dynamicconfiguration""", alias="DynamicConfiguration")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html#cfn-quicksight-dashboard-referencelinedataconfiguration-axisbinding""", alias="AxisBinding")
    SeriesType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html#cfn-quicksight-dashboard-referencelinedataconfiguration-seriestype""", alias="SeriesType")
    StaticConfiguration_: Optional['ReferenceLineStaticDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedataconfiguration.html#cfn-quicksight-dashboard-referencelinedataconfiguration-staticconfiguration""", alias="StaticConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDataConfiguration:
        from troposphere.quicksight import ReferenceLineDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDynamicDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedynamicdataconfiguration.html
    Properties:
        - Name: Column
        - Name: MeasureAggregationFunction
        - Name: Calculation
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedynamicdataconfiguration.html#cfn-quicksight-dashboard-referencelinedynamicdataconfiguration-column""", alias="Column")
    MeasureAggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedynamicdataconfiguration.html#cfn-quicksight-dashboard-referencelinedynamicdataconfiguration-measureaggregationfunction""", alias="MeasureAggregationFunction")
    Calculation_: 'NumericalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinedynamicdataconfiguration.html#cfn-quicksight-dashboard-referencelinedynamicdataconfiguration-calculation""", alias="Calculation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDynamicDataConfiguration:
        from troposphere.quicksight import ReferenceLineDynamicDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html
    Properties:
        - Name: HorizontalPosition
        - Name: ValueLabelConfiguration
        - Name: CustomLabelConfiguration
        - Name: FontColor
        - Name: FontConfiguration
        - Name: VerticalPosition
    
    """
    
    HorizontalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-horizontalposition""", alias="HorizontalPosition")
    ValueLabelConfiguration_: Optional['ReferenceLineValueLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-valuelabelconfiguration""", alias="ValueLabelConfiguration")
    CustomLabelConfiguration_: Optional['ReferenceLineCustomLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-customlabelconfiguration""", alias="CustomLabelConfiguration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-fontcolor""", alias="FontColor")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-fontconfiguration""", alias="FontConfiguration")
    VerticalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinelabelconfiguration.html#cfn-quicksight-dashboard-referencelinelabelconfiguration-verticalposition""", alias="VerticalPosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineLabelConfiguration:
        from troposphere.quicksight import ReferenceLineLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStaticDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestaticdataconfiguration.html
    Properties:
        - Name: Value
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestaticdataconfiguration.html#cfn-quicksight-dashboard-referencelinestaticdataconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStaticDataConfiguration:
        from troposphere.quicksight import ReferenceLineStaticDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStyleConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestyleconfiguration.html
    Properties:
        - Name: Pattern
        - Name: Color
    
    """
    
    Pattern_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestyleconfiguration.html#cfn-quicksight-dashboard-referencelinestyleconfiguration-pattern""", alias="Pattern")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinestyleconfiguration.html#cfn-quicksight-dashboard-referencelinestyleconfiguration-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStyleConfiguration:
        from troposphere.quicksight import ReferenceLineStyleConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineValueLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinevaluelabelconfiguration.html
    Properties:
        - Name: FormatConfiguration
        - Name: RelativePosition
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinevaluelabelconfiguration.html#cfn-quicksight-dashboard-referencelinevaluelabelconfiguration-formatconfiguration""", alias="FormatConfiguration")
    RelativePosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-referencelinevaluelabelconfiguration.html#cfn-quicksight-dashboard-referencelinevaluelabelconfiguration-relativeposition""", alias="RelativePosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineValueLabelConfiguration:
        from troposphere.quicksight import ReferenceLineValueLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDateTimeControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatetimecontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatetimecontroldisplayoptions.html#cfn-quicksight-dashboard-relativedatetimecontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatetimecontroldisplayoptions.html#cfn-quicksight-dashboard-relativedatetimecontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatetimecontroldisplayoptions.html#cfn-quicksight-dashboard-relativedatetimecontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDateTimeControlDisplayOptions:
        from troposphere.quicksight import RelativeDateTimeControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDatesFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html
    Properties:
        - Name: RelativeDateValue
        - Name: Column
        - Name: RelativeDateType
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: NullOption
        - Name: FilterId
        - Name: AnchorDateConfiguration
        - Name: MinimumGranularity
        - Name: ExcludePeriodConfiguration
    
    """
    
    RelativeDateValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-relativedatevalue""", alias="RelativeDateValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-column""", alias="Column")
    RelativeDateType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-relativedatetype""", alias="RelativeDateType")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-filterid""", alias="FilterId")
    AnchorDateConfiguration_: 'AnchorDateConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-anchordateconfiguration""", alias="AnchorDateConfiguration")
    MinimumGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-minimumgranularity""", alias="MinimumGranularity")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-relativedatesfilter.html#cfn-quicksight-dashboard-relativedatesfilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDatesFilter:
        from troposphere.quicksight import RelativeDatesFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Resource
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-resourcepermission.html#cfn-quicksight-dashboard-resourcepermission-actions""", alias="Actions")
    Resource_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-resourcepermission.html#cfn-quicksight-dashboard-resourcepermission-resource""", alias="Resource")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-resourcepermission.html#cfn-quicksight-dashboard-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RollingDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rollingdateconfiguration.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rollingdateconfiguration.html#cfn-quicksight-dashboard-rollingdateconfiguration-expression""", alias="Expression")
    DataSetIdentifier_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rollingdateconfiguration.html#cfn-quicksight-dashboard-rollingdateconfiguration-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RollingDateConfiguration:
        from troposphere.quicksight import RollingDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowAlternateColorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rowalternatecoloroptions.html
    Properties:
        - Name: Status
        - Name: UsePrimaryBackgroundColor
        - Name: RowAlternateColors
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rowalternatecoloroptions.html#cfn-quicksight-dashboard-rowalternatecoloroptions-status""", alias="Status")
    UsePrimaryBackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rowalternatecoloroptions.html#cfn-quicksight-dashboard-rowalternatecoloroptions-useprimarybackgroundcolor""", alias="UsePrimaryBackgroundColor")
    RowAlternateColors_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-rowalternatecoloroptions.html#cfn-quicksight-dashboard-rowalternatecoloroptions-rowalternatecolors""", alias="RowAlternateColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowAlternateColorOptions:
        from troposphere.quicksight import RowAlternateColorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SameSheetTargetVisualConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-samesheettargetvisualconfiguration.html
    Properties:
        - Name: TargetVisualOptions
        - Name: TargetVisuals
    
    """
    
    TargetVisualOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-samesheettargetvisualconfiguration.html#cfn-quicksight-dashboard-samesheettargetvisualconfiguration-targetvisualoptions""", alias="TargetVisualOptions")
    TargetVisuals_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-samesheettargetvisualconfiguration.html#cfn-quicksight-dashboard-samesheettargetvisualconfiguration-targetvisuals""", alias="TargetVisuals")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SameSheetTargetVisualConfiguration:
        from troposphere.quicksight import SameSheetTargetVisualConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramaggregatedfieldwells.html
    Properties:
        - Name: Destination
        - Name: Source
        - Name: Weight
    
    """
    
    Destination_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-dashboard-sankeydiagramaggregatedfieldwells-destination""", alias="Destination")
    Source_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-dashboard-sankeydiagramaggregatedfieldwells-source""", alias="Source")
    Weight_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-dashboard-sankeydiagramaggregatedfieldwells-weight""", alias="Weight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramAggregatedFieldWells:
        from troposphere.quicksight import SankeyDiagramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabels
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['SankeyDiagramSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramchartconfiguration.html#cfn-quicksight-dashboard-sankeydiagramchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramchartconfiguration.html#cfn-quicksight-dashboard-sankeydiagramchartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['SankeyDiagramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramchartconfiguration.html#cfn-quicksight-dashboard-sankeydiagramchartconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramChartConfiguration:
        from troposphere.quicksight import SankeyDiagramChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramfieldwells.html
    Properties:
        - Name: SankeyDiagramAggregatedFieldWells
    
    """
    
    SankeyDiagramAggregatedFieldWells_: Optional['SankeyDiagramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramfieldwells.html#cfn-quicksight-dashboard-sankeydiagramfieldwells-sankeydiagramaggregatedfieldwells""", alias="SankeyDiagramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramFieldWells:
        from troposphere.quicksight import SankeyDiagramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramsortconfiguration.html
    Properties:
        - Name: WeightSort
        - Name: SourceItemsLimit
        - Name: DestinationItemsLimit
    
    """
    
    WeightSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramsortconfiguration.html#cfn-quicksight-dashboard-sankeydiagramsortconfiguration-weightsort""", alias="WeightSort")
    SourceItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramsortconfiguration.html#cfn-quicksight-dashboard-sankeydiagramsortconfiguration-sourceitemslimit""", alias="SourceItemsLimit")
    DestinationItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramsortconfiguration.html#cfn-quicksight-dashboard-sankeydiagramsortconfiguration-destinationitemslimit""", alias="DestinationItemsLimit")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramSortConfiguration:
        from troposphere.quicksight import SankeyDiagramSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html#cfn-quicksight-dashboard-sankeydiagramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html#cfn-quicksight-dashboard-sankeydiagramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['SankeyDiagramChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html#cfn-quicksight-dashboard-sankeydiagramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html#cfn-quicksight-dashboard-sankeydiagramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sankeydiagramvisual.html#cfn-quicksight-dashboard-sankeydiagramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramVisual:
        from troposphere.quicksight import SankeyDiagramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotCategoricallyAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotcategoricallyaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotCategoricallyAggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotCategoricallyAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html
    Properties:
        - Name: YAxisLabelOptions
        - Name: Legend
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-yaxislabeloptions""", alias="YAxisLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-legend""", alias="Legend")
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['ScatterPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotconfiguration.html#cfn-quicksight-dashboard-scatterplotconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotConfiguration:
        from troposphere.quicksight import ScatterPlotConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotfieldwells.html
    Properties:
        - Name: ScatterPlotUnaggregatedFieldWells
        - Name: ScatterPlotCategoricallyAggregatedFieldWells
    
    """
    
    ScatterPlotUnaggregatedFieldWells_: Optional['ScatterPlotUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotfieldwells.html#cfn-quicksight-dashboard-scatterplotfieldwells-scatterplotunaggregatedfieldwells""", alias="ScatterPlotUnaggregatedFieldWells")
    ScatterPlotCategoricallyAggregatedFieldWells_: Optional['ScatterPlotCategoricallyAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotfieldwells.html#cfn-quicksight-dashboard-scatterplotfieldwells-scatterplotcategoricallyaggregatedfieldwells""", alias="ScatterPlotCategoricallyAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotFieldWells:
        from troposphere.quicksight import ScatterPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotunaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotunaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotunaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotunaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotunaggregatedfieldwells.html#cfn-quicksight-dashboard-scatterplotunaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotUnaggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ScatterPlotConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scatterplotvisual.html#cfn-quicksight-dashboard-scatterplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotVisual:
        from troposphere.quicksight import ScatterPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScrollBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scrollbaroptions.html
    Properties:
        - Name: VisibleRange
        - Name: Visibility
    
    """
    
    VisibleRange_: Optional['VisibleRangeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scrollbaroptions.html#cfn-quicksight-dashboard-scrollbaroptions-visiblerange""", alias="VisibleRange")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-scrollbaroptions.html#cfn-quicksight-dashboard-scrollbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScrollBarOptions:
        from troposphere.quicksight import ScrollBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SecondaryValueOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-secondaryvalueoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-secondaryvalueoptions.html#cfn-quicksight-dashboard-secondaryvalueoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SecondaryValueOptions:
        from troposphere.quicksight import SecondaryValueOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionAfterPageBreak(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionafterpagebreak.html
    Properties:
        - Name: Status
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionafterpagebreak.html#cfn-quicksight-dashboard-sectionafterpagebreak-status""", alias="Status")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionAfterPageBreak:
        from troposphere.quicksight import SectionAfterPageBreak as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutcanvassizeoptions.html
    Properties:
        - Name: PaperCanvasSizeOptions
    
    """
    
    PaperCanvasSizeOptions_: Optional['SectionBasedLayoutPaperCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutcanvassizeoptions.html#cfn-quicksight-dashboard-sectionbasedlayoutcanvassizeoptions-papercanvassizeoptions""", alias="PaperCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: FooterSections
        - Name: BodySections
        - Name: HeaderSections
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html#cfn-quicksight-dashboard-sectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    FooterSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html#cfn-quicksight-dashboard-sectionbasedlayoutconfiguration-footersections""", alias="FooterSections")
    BodySections_: List['BodySectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html#cfn-quicksight-dashboard-sectionbasedlayoutconfiguration-bodysections""", alias="BodySections")
    HeaderSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutconfiguration.html#cfn-quicksight-dashboard-sectionbasedlayoutconfiguration-headersections""", alias="HeaderSections")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutConfiguration:
        from troposphere.quicksight import SectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutPaperCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions.html
    Properties:
        - Name: PaperMargin
        - Name: PaperSize
        - Name: PaperOrientation
    
    """
    
    PaperMargin_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions-papermargin""", alias="PaperMargin")
    PaperSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions-papersize""", alias="PaperSize")
    PaperOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-dashboard-sectionbasedlayoutpapercanvassizeoptions-paperorientation""", alias="PaperOrientation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutPaperCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutPaperCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionlayoutconfiguration.html
    Properties:
        - Name: FreeFormLayout
    
    """
    
    FreeFormLayout_: 'FreeFormSectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionlayoutconfiguration.html#cfn-quicksight-dashboard-sectionlayoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionLayoutConfiguration:
        from troposphere.quicksight import SectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionPageBreakConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionpagebreakconfiguration.html
    Properties:
        - Name: After
    
    """
    
    After_: Optional['SectionAfterPageBreak'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionpagebreakconfiguration.html#cfn-quicksight-dashboard-sectionpagebreakconfiguration-after""", alias="After")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionPageBreakConfiguration:
        from troposphere.quicksight import SectionPageBreakConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionstyle.html
    Properties:
        - Name: Padding
        - Name: Height
    
    """
    
    Padding_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionstyle.html#cfn-quicksight-dashboard-sectionstyle-padding""", alias="Padding")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sectionstyle.html#cfn-quicksight-dashboard-sectionstyle-height""", alias="Height")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionStyle:
        from troposphere.quicksight import SectionStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SelectedSheetsFilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-selectedsheetsfilterscopeconfiguration.html
    Properties:
        - Name: SheetVisualScopingConfigurations
    
    """
    
    SheetVisualScopingConfigurations_: Optional[List['SheetVisualScopingConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-selectedsheetsfilterscopeconfiguration.html#cfn-quicksight-dashboard-selectedsheetsfilterscopeconfiguration-sheetvisualscopingconfigurations""", alias="SheetVisualScopingConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SelectedSheetsFilterScopeConfiguration:
        from troposphere.quicksight import SelectedSheetsFilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-seriesitem.html
    Properties:
        - Name: FieldSeriesItem
        - Name: DataFieldSeriesItem
    
    """
    
    FieldSeriesItem_: Optional['FieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-seriesitem.html#cfn-quicksight-dashboard-seriesitem-fieldseriesitem""", alias="FieldSeriesItem")
    DataFieldSeriesItem_: Optional['DataFieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-seriesitem.html#cfn-quicksight-dashboard-seriesitem-datafieldseriesitem""", alias="DataFieldSeriesItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SeriesItem:
        from troposphere.quicksight import SeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SetParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-setparametervalueconfiguration.html
    Properties:
        - Name: DestinationParameterName
        - Name: Value
    
    """
    
    DestinationParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-setparametervalueconfiguration.html#cfn-quicksight-dashboard-setparametervalueconfiguration-destinationparametername""", alias="DestinationParameterName")
    Value_: 'DestinationParameterValueConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-setparametervalueconfiguration.html#cfn-quicksight-dashboard-setparametervalueconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SetParameterValueConfiguration:
        from troposphere.quicksight import SetParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShapeConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shapeconditionalformat.html
    Properties:
        - Name: BackgroundColor
    
    """
    
    BackgroundColor_: 'ConditionalFormattingColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shapeconditionalformat.html#cfn-quicksight-dashboard-shapeconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShapeConditionalFormat:
        from troposphere.quicksight import ShapeConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Sheet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheet.html
    Properties:
        - Name: SheetId
        - Name: Name
    
    """
    
    SheetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheet.html#cfn-quicksight-dashboard-sheet-sheetid""", alias="SheetId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheet.html#cfn-quicksight-dashboard-sheet-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Sheet:
        from troposphere.quicksight import Sheet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlInfoIconLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolinfoiconlabeloptions.html
    Properties:
        - Name: Visibility
        - Name: InfoIconText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-dashboard-sheetcontrolinfoiconlabeloptions-visibility""", alias="Visibility")
    InfoIconText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-dashboard-sheetcontrolinfoiconlabeloptions-infoicontext""", alias="InfoIconText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlInfoIconLabelOptions:
        from troposphere.quicksight import SheetControlInfoIconLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'SheetControlLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayout.html#cfn-quicksight-dashboard-sheetcontrollayout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayout:
        from troposphere.quicksight import SheetControlLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayoutconfiguration.html
    Properties:
        - Name: GridLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrollayoutconfiguration.html#cfn-quicksight-dashboard-sheetcontrollayoutconfiguration-gridlayout""", alias="GridLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayoutConfiguration:
        from troposphere.quicksight import SheetControlLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlsOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolsoption.html
    Properties:
        - Name: VisibilityState
    
    """
    
    VisibilityState_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetcontrolsoption.html#cfn-quicksight-dashboard-sheetcontrolsoption-visibilitystate""", alias="VisibilityState")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlsOption:
        from troposphere.quicksight import SheetControlsOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html
    Properties:
        - Name: Description
        - Name: ParameterControls
        - Name: TextBoxes
        - Name: Layouts
        - Name: ContentType
        - Name: SheetId
        - Name: FilterControls
        - Name: SheetControlLayouts
        - Name: Title
        - Name: Visuals
        - Name: Name
    
    """
    
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-description""", alias="Description")
    ParameterControls_: Optional[List['ParameterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-parametercontrols""", alias="ParameterControls")
    TextBoxes_: Optional[List['SheetTextBox']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-textboxes""", alias="TextBoxes")
    Layouts_: Optional[List['Layout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-layouts""", alias="Layouts")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-contenttype""", alias="ContentType")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-sheetid""", alias="SheetId")
    FilterControls_: Optional[List['FilterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-filtercontrols""", alias="FilterControls")
    SheetControlLayouts_: Optional[List['SheetControlLayout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-sheetcontrollayouts""", alias="SheetControlLayouts")
    Title_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-title""", alias="Title")
    Visuals_: Optional[List['Visual']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-visuals""", alias="Visuals")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetdefinition.html#cfn-quicksight-dashboard-sheetdefinition-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetDefinition:
        from troposphere.quicksight import SheetDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementConfigurationOverrides(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementconfigurationoverrides.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementconfigurationoverrides.html#cfn-quicksight-dashboard-sheetelementconfigurationoverrides-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementConfigurationOverrides:
        from troposphere.quicksight import SheetElementConfigurationOverrides as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementRenderingRule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementrenderingrule.html
    Properties:
        - Name: Expression
        - Name: ConfigurationOverrides
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementrenderingrule.html#cfn-quicksight-dashboard-sheetelementrenderingrule-expression""", alias="Expression")
    ConfigurationOverrides_: 'SheetElementConfigurationOverrides' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetelementrenderingrule.html#cfn-quicksight-dashboard-sheetelementrenderingrule-configurationoverrides""", alias="ConfigurationOverrides")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementRenderingRule:
        from troposphere.quicksight import SheetElementRenderingRule as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetLayoutElementMaximizationOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetlayoutelementmaximizationoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetlayoutelementmaximizationoption.html#cfn-quicksight-dashboard-sheetlayoutelementmaximizationoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetLayoutElementMaximizationOption:
        from troposphere.quicksight import SheetLayoutElementMaximizationOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetTextBox(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheettextbox.html
    Properties:
        - Name: SheetTextBoxId
        - Name: Content
    
    """
    
    SheetTextBoxId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheettextbox.html#cfn-quicksight-dashboard-sheettextbox-sheettextboxid""", alias="SheetTextBoxId")
    Content_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheettextbox.html#cfn-quicksight-dashboard-sheettextbox-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetTextBox:
        from troposphere.quicksight import SheetTextBox as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetVisualScopingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetvisualscopingconfiguration.html
    Properties:
        - Name: Scope
        - Name: SheetId
        - Name: VisualIds
    
    """
    
    Scope_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetvisualscopingconfiguration.html#cfn-quicksight-dashboard-sheetvisualscopingconfiguration-scope""", alias="Scope")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetvisualscopingconfiguration.html#cfn-quicksight-dashboard-sheetvisualscopingconfiguration-sheetid""", alias="SheetId")
    VisualIds_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-sheetvisualscopingconfiguration.html#cfn-quicksight-dashboard-sheetvisualscopingconfiguration-visualids""", alias="VisualIds")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetVisualScopingConfiguration:
        from troposphere.quicksight import SheetVisualScopingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShortFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shortformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shortformattext.html#cfn-quicksight-dashboard-shortformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-shortformattext.html#cfn-quicksight-dashboard-shortformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShortFormatText:
        from troposphere.quicksight import ShortFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SimpleClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-simpleclustermarker.html
    Properties:
        - Name: Color
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-simpleclustermarker.html#cfn-quicksight-dashboard-simpleclustermarker-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SimpleClusterMarker:
        from troposphere.quicksight import SimpleClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SliderControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-slidercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-slidercontroldisplayoptions.html#cfn-quicksight-dashboard-slidercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-slidercontroldisplayoptions.html#cfn-quicksight-dashboard-slidercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SliderControlDisplayOptions:
        from troposphere.quicksight import SliderControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesAxisProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesaxisproperties.html
    Properties:
        - Name: Placement
        - Name: Scale
    
    """
    
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesaxisproperties.html#cfn-quicksight-dashboard-smallmultiplesaxisproperties-placement""", alias="Placement")
    Scale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesaxisproperties.html#cfn-quicksight-dashboard-smallmultiplesaxisproperties-scale""", alias="Scale")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesAxisProperties:
        from troposphere.quicksight import SmallMultiplesAxisProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html
    Properties:
        - Name: MaxVisibleRows
        - Name: PanelConfiguration
        - Name: MaxVisibleColumns
        - Name: XAxis
        - Name: YAxis
    
    """
    
    MaxVisibleRows_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html#cfn-quicksight-dashboard-smallmultiplesoptions-maxvisiblerows""", alias="MaxVisibleRows")
    PanelConfiguration_: Optional['PanelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html#cfn-quicksight-dashboard-smallmultiplesoptions-panelconfiguration""", alias="PanelConfiguration")
    MaxVisibleColumns_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html#cfn-quicksight-dashboard-smallmultiplesoptions-maxvisiblecolumns""", alias="MaxVisibleColumns")
    XAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html#cfn-quicksight-dashboard-smallmultiplesoptions-xaxis""", alias="XAxis")
    YAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-smallmultiplesoptions.html#cfn-quicksight-dashboard-smallmultiplesoptions-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesOptions:
        from troposphere.quicksight import SmallMultiplesOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Spacing(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: Right
        - Name: Bottom
    
    """
    
    Left_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html#cfn-quicksight-dashboard-spacing-left""", alias="Left")
    Top_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html#cfn-quicksight-dashboard-spacing-top""", alias="Top")
    Right_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html#cfn-quicksight-dashboard-spacing-right""", alias="Right")
    Bottom_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-spacing.html#cfn-quicksight-dashboard-spacing-bottom""", alias="Bottom")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Spacing:
        from troposphere.quicksight import Spacing as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringdefaultvalues.html#cfn-quicksight-dashboard-stringdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringdefaultvalues.html#cfn-quicksight-dashboard-stringdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringDefaultValues:
        from troposphere.quicksight import StringDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringformatconfiguration.html#cfn-quicksight-dashboard-stringformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringformatconfiguration.html#cfn-quicksight-dashboard-stringformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringFormatConfiguration:
        from troposphere.quicksight import StringFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameter.html
    Properties:
        - Name: Values
        - Name: Name
    
    """
    
    Values_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameter.html#cfn-quicksight-dashboard-stringparameter-values""", alias="Values")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameter.html#cfn-quicksight-dashboard-stringparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringParameter:
        from troposphere.quicksight import StringParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html#cfn-quicksight-dashboard-stringparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['StringDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html#cfn-quicksight-dashboard-stringparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html#cfn-quicksight-dashboard-stringparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['StringValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html#cfn-quicksight-dashboard-stringparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringparameterdeclaration.html#cfn-quicksight-dashboard-stringparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringParameterDeclaration:
        from troposphere.quicksight import StringParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringvaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-stringvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-stringvaluewhenunsetconfiguration.html#cfn-quicksight-dashboard-stringvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringValueWhenUnsetConfiguration:
        from troposphere.quicksight import StringValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: FieldLevelOptions
        - Name: ValueCellStyle
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: FieldLevel
        - Name: MetricHeaderCellStyle
        - Name: StyleTargets
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-customlabel""", alias="CustomLabel")
    FieldLevelOptions_: Optional[List['PivotTableFieldSubtotalOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-fieldleveloptions""", alias="FieldLevelOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-valuecellstyle""", alias="ValueCellStyle")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-totalsvisibility""", alias="TotalsVisibility")
    FieldLevel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-fieldlevel""", alias="FieldLevel")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    StyleTargets_: Optional[List['TableStyleTarget']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-subtotaloptions.html#cfn-quicksight-dashboard-subtotaloptions-styletargets""", alias="StyleTargets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SubtotalOptions:
        from troposphere.quicksight import SubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableaggregatedfieldwells.html#cfn-quicksight-dashboard-tableaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableaggregatedfieldwells.html#cfn-quicksight-dashboard-tableaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableAggregatedFieldWells:
        from troposphere.quicksight import TableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableborderoptions.html
    Properties:
        - Name: Thickness
        - Name: Color
        - Name: Style
    
    """
    
    Thickness_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableborderoptions.html#cfn-quicksight-dashboard-tableborderoptions-thickness""", alias="Thickness")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableborderoptions.html#cfn-quicksight-dashboard-tableborderoptions-color""", alias="Color")
    Style_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableborderoptions.html#cfn-quicksight-dashboard-tableborderoptions-style""", alias="Style")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableBorderOptions:
        from troposphere.quicksight import TableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellconditionalformatting.html
    Properties:
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellconditionalformatting.html#cfn-quicksight-dashboard-tablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellconditionalformatting.html#cfn-quicksight-dashboard-tablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellConditionalFormatting:
        from troposphere.quicksight import TableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellImageSizingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellimagesizingconfiguration.html
    Properties:
        - Name: TableCellImageScalingConfiguration
    
    """
    
    TableCellImageScalingConfiguration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellimagesizingconfiguration.html#cfn-quicksight-dashboard-tablecellimagesizingconfiguration-tablecellimagescalingconfiguration""", alias="TableCellImageScalingConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellImageSizingConfiguration:
        from troposphere.quicksight import TableCellImageSizingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html
    Properties:
        - Name: VerticalTextAlignment
        - Name: Visibility
        - Name: Height
        - Name: FontConfiguration
        - Name: Border
        - Name: TextWrap
        - Name: HorizontalTextAlignment
        - Name: BackgroundColor
    
    """
    
    VerticalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-verticaltextalignment""", alias="VerticalTextAlignment")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-visibility""", alias="Visibility")
    Height_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-height""", alias="Height")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-fontconfiguration""", alias="FontConfiguration")
    Border_: Optional['GlobalTableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-border""", alias="Border")
    TextWrap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-textwrap""", alias="TextWrap")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-horizontaltextalignment""", alias="HorizontalTextAlignment")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablecellstyle.html#cfn-quicksight-dashboard-tablecellstyle-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellStyle:
        from troposphere.quicksight import TableCellStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['TableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformatting.html#cfn-quicksight-dashboard-tableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormatting:
        from troposphere.quicksight import TableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformattingoption.html
    Properties:
        - Name: Row
        - Name: Cell
    
    """
    
    Row_: Optional['TableRowConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformattingoption.html#cfn-quicksight-dashboard-tableconditionalformattingoption-row""", alias="Row")
    Cell_: Optional['TableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconditionalformattingoption.html#cfn-quicksight-dashboard-tableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormattingOption:
        from troposphere.quicksight import TableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: TableInlineVisualizations
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['TableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['TablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['TableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-tableoptions""", alias="TableOptions")
    TableInlineVisualizations_: Optional[List['TableInlineVisualization']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-tableinlinevisualizations""", alias="TableInlineVisualizations")
    FieldWells_: Optional['TableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['TableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['TotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableconfiguration.html#cfn-quicksight-dashboard-tableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConfiguration:
        from troposphere.quicksight import TableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomIconContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomiconcontent.html
    Properties:
        - Name: Icon
    
    """
    
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomiconcontent.html#cfn-quicksight-dashboard-tablefieldcustomiconcontent-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomIconContent:
        from troposphere.quicksight import TableFieldCustomIconContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomTextContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomtextcontent.html
    Properties:
        - Name: Value
        - Name: FontConfiguration
    
    """
    
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomtextcontent.html#cfn-quicksight-dashboard-tablefieldcustomtextcontent-value""", alias="Value")
    FontConfiguration_: 'FontConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldcustomtextcontent.html#cfn-quicksight-dashboard-tablefieldcustomtextcontent-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomTextContent:
        from troposphere.quicksight import TableFieldCustomTextContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldImageConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldimageconfiguration.html
    Properties:
        - Name: SizingOptions
    
    """
    
    SizingOptions_: Optional['TableCellImageSizingConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldimageconfiguration.html#cfn-quicksight-dashboard-tablefieldimageconfiguration-sizingoptions""", alias="SizingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldImageConfiguration:
        from troposphere.quicksight import TableFieldImageConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkconfiguration.html
    Properties:
        - Name: Target
        - Name: Content
    
    """
    
    Target_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkconfiguration.html#cfn-quicksight-dashboard-tablefieldlinkconfiguration-target""", alias="Target")
    Content_: 'TableFieldLinkContentConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkconfiguration.html#cfn-quicksight-dashboard-tablefieldlinkconfiguration-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkConfiguration:
        from troposphere.quicksight import TableFieldLinkConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkcontentconfiguration.html
    Properties:
        - Name: CustomIconContent
        - Name: CustomTextContent
    
    """
    
    CustomIconContent_: Optional['TableFieldCustomIconContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkcontentconfiguration.html#cfn-quicksight-dashboard-tablefieldlinkcontentconfiguration-customiconcontent""", alias="CustomIconContent")
    CustomTextContent_: Optional['TableFieldCustomTextContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldlinkcontentconfiguration.html#cfn-quicksight-dashboard-tablefieldlinkcontentconfiguration-customtextcontent""", alias="CustomTextContent")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkContentConfiguration:
        from troposphere.quicksight import TableFieldLinkContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: URLStyling
        - Name: FieldId
        - Name: Visibility
        - Name: Width
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html#cfn-quicksight-dashboard-tablefieldoption-customlabel""", alias="CustomLabel")
    URLStyling_: Optional['TableFieldURLConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html#cfn-quicksight-dashboard-tablefieldoption-urlstyling""", alias="URLStyling")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html#cfn-quicksight-dashboard-tablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html#cfn-quicksight-dashboard-tablefieldoption-visibility""", alias="Visibility")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoption.html#cfn-quicksight-dashboard-tablefieldoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOption:
        from troposphere.quicksight import TableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoptions.html
    Properties:
        - Name: Order
        - Name: PinnedFieldOptions
        - Name: SelectedFieldOptions
    
    """
    
    Order_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoptions.html#cfn-quicksight-dashboard-tablefieldoptions-order""", alias="Order")
    PinnedFieldOptions_: Optional['TablePinnedFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoptions.html#cfn-quicksight-dashboard-tablefieldoptions-pinnedfieldoptions""", alias="PinnedFieldOptions")
    SelectedFieldOptions_: Optional[List['TableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldoptions.html#cfn-quicksight-dashboard-tablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOptions:
        from troposphere.quicksight import TableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldURLConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldurlconfiguration.html
    Properties:
        - Name: LinkConfiguration
        - Name: ImageConfiguration
    
    """
    
    LinkConfiguration_: Optional['TableFieldLinkConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldurlconfiguration.html#cfn-quicksight-dashboard-tablefieldurlconfiguration-linkconfiguration""", alias="LinkConfiguration")
    ImageConfiguration_: Optional['TableFieldImageConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldurlconfiguration.html#cfn-quicksight-dashboard-tablefieldurlconfiguration-imageconfiguration""", alias="ImageConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldURLConfiguration:
        from troposphere.quicksight import TableFieldURLConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldwells.html
    Properties:
        - Name: TableUnaggregatedFieldWells
        - Name: TableAggregatedFieldWells
    
    """
    
    TableUnaggregatedFieldWells_: Optional['TableUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldwells.html#cfn-quicksight-dashboard-tablefieldwells-tableunaggregatedfieldwells""", alias="TableUnaggregatedFieldWells")
    TableAggregatedFieldWells_: Optional['TableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablefieldwells.html#cfn-quicksight-dashboard-tablefieldwells-tableaggregatedfieldwells""", alias="TableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldWells:
        from troposphere.quicksight import TableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableInlineVisualization(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableinlinevisualization.html
    Properties:
        - Name: DataBars
    
    """
    
    DataBars_: Optional['DataBarsOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableinlinevisualization.html#cfn-quicksight-dashboard-tableinlinevisualization-databars""", alias="DataBars")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableInlineVisualization:
        from troposphere.quicksight import TableInlineVisualization as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html
    Properties:
        - Name: HeaderStyle
        - Name: CellStyle
        - Name: Orientation
        - Name: RowAlternateColorOptions
    
    """
    
    HeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html#cfn-quicksight-dashboard-tableoptions-headerstyle""", alias="HeaderStyle")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html#cfn-quicksight-dashboard-tableoptions-cellstyle""", alias="CellStyle")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html#cfn-quicksight-dashboard-tableoptions-orientation""", alias="Orientation")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableoptions.html#cfn-quicksight-dashboard-tableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableOptions:
        from troposphere.quicksight import TableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepaginatedreportoptions.html#cfn-quicksight-dashboard-tablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepaginatedreportoptions.html#cfn-quicksight-dashboard-tablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePaginatedReportOptions:
        from troposphere.quicksight import TablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePinnedFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepinnedfieldoptions.html
    Properties:
        - Name: PinnedLeftFields
    
    """
    
    PinnedLeftFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablepinnedfieldoptions.html#cfn-quicksight-dashboard-tablepinnedfieldoptions-pinnedleftfields""", alias="PinnedLeftFields")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePinnedFieldOptions:
        from troposphere.quicksight import TablePinnedFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableRowConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablerowconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablerowconditionalformatting.html#cfn-quicksight-dashboard-tablerowconditionalformatting-textcolor""", alias="TextColor")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablerowconditionalformatting.html#cfn-quicksight-dashboard-tablerowconditionalformatting-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableRowConditionalFormatting:
        from troposphere.quicksight import TableRowConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSideBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: InnerHorizontal
        - Name: Right
        - Name: Bottom
        - Name: InnerVertical
    
    """
    
    Left_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-left""", alias="Left")
    Top_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-top""", alias="Top")
    InnerHorizontal_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-innerhorizontal""", alias="InnerHorizontal")
    Right_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-right""", alias="Right")
    Bottom_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-bottom""", alias="Bottom")
    InnerVertical_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesideborderoptions.html#cfn-quicksight-dashboard-tablesideborderoptions-innervertical""", alias="InnerVertical")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSideBorderOptions:
        from troposphere.quicksight import TableSideBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesortconfiguration.html
    Properties:
        - Name: RowSort
        - Name: PaginationConfiguration
    
    """
    
    RowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesortconfiguration.html#cfn-quicksight-dashboard-tablesortconfiguration-rowsort""", alias="RowSort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablesortconfiguration.html#cfn-quicksight-dashboard-tablesortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSortConfiguration:
        from troposphere.quicksight import TableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableStyleTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablestyletarget.html
    Properties:
        - Name: CellType
    
    """
    
    CellType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablestyletarget.html#cfn-quicksight-dashboard-tablestyletarget-celltype""", alias="CellType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableStyleTarget:
        from troposphere.quicksight import TableStyleTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableunaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['UnaggregatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tableunaggregatedfieldwells.html#cfn-quicksight-dashboard-tableunaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableUnaggregatedFieldWells:
        from troposphere.quicksight import TableUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['TableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tablevisual.html#cfn-quicksight-dashboard-tablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableVisual:
        from troposphere.quicksight import TableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextAreaControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textareacontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textareacontroldisplayoptions.html#cfn-quicksight-dashboard-textareacontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textareacontroldisplayoptions.html#cfn-quicksight-dashboard-textareacontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textareacontroldisplayoptions.html#cfn-quicksight-dashboard-textareacontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextAreaControlDisplayOptions:
        from troposphere.quicksight import TextAreaControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textconditionalformat.html
    Properties:
        - Name: TextColor
        - Name: Icon
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textconditionalformat.html#cfn-quicksight-dashboard-textconditionalformat-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textconditionalformat.html#cfn-quicksight-dashboard-textconditionalformat-icon""", alias="Icon")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textconditionalformat.html#cfn-quicksight-dashboard-textconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextConditionalFormat:
        from troposphere.quicksight import TextConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextControlPlaceholderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textcontrolplaceholderoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textcontrolplaceholderoptions.html#cfn-quicksight-dashboard-textcontrolplaceholderoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextControlPlaceholderOptions:
        from troposphere.quicksight import TextControlPlaceholderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextFieldControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textfieldcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textfieldcontroldisplayoptions.html#cfn-quicksight-dashboard-textfieldcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textfieldcontroldisplayoptions.html#cfn-quicksight-dashboard-textfieldcontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-textfieldcontroldisplayoptions.html#cfn-quicksight-dashboard-textfieldcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextFieldControlDisplayOptions:
        from troposphere.quicksight import TextFieldControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThousandSeparatorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-thousandseparatoroptions.html
    Properties:
        - Name: Symbol
        - Name: Visibility
    
    """
    
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-thousandseparatoroptions.html#cfn-quicksight-dashboard-thousandseparatoroptions-symbol""", alias="Symbol")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-thousandseparatoroptions.html#cfn-quicksight-dashboard-thousandseparatoroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThousandSeparatorOptions:
        from troposphere.quicksight import ThousandSeparatorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeBasedForecastProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: UpperBoundary
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-seasonality""", alias="Seasonality")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-upperboundary""", alias="UpperBoundary")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timebasedforecastproperties.html#cfn-quicksight-dashboard-timebasedforecastproperties-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeBasedForecastProperties:
        from troposphere.quicksight import TimeBasedForecastProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html
    Properties:
        - Name: Column
        - Name: RollingDate
        - Name: Value
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: FilterId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-column""", alias="Column")
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-rollingdate""", alias="RollingDate")
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-value""", alias="Value")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-parametername""", alias="ParameterName")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timeequalityfilter.html#cfn-quicksight-dashboard-timeequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeEqualityFilter:
        from troposphere.quicksight import TimeEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html
    Properties:
        - Name: Column
        - Name: RangeMinimum
        - Name: TimeGranularity
        - Name: RangeMaximum
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html#cfn-quicksight-dashboard-timerangedrilldownfilter-column""", alias="Column")
    RangeMinimum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html#cfn-quicksight-dashboard-timerangedrilldownfilter-rangeminimum""", alias="RangeMinimum")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html#cfn-quicksight-dashboard-timerangedrilldownfilter-timegranularity""", alias="TimeGranularity")
    RangeMaximum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangedrilldownfilter.html#cfn-quicksight-dashboard-timerangedrilldownfilter-rangemaximum""", alias="RangeMaximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeDrillDownFilter:
        from troposphere.quicksight import TimeRangeDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html
    Properties:
        - Name: RangeMinimumValue
        - Name: Column
        - Name: RangeMaximumValue
        - Name: IncludeMaximum
        - Name: TimeGranularity
        - Name: NullOption
        - Name: FilterId
        - Name: IncludeMinimum
        - Name: ExcludePeriodConfiguration
    
    """
    
    RangeMinimumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-rangeminimumvalue""", alias="RangeMinimumValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-column""", alias="Column")
    RangeMaximumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-rangemaximumvalue""", alias="RangeMaximumValue")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-includemaximum""", alias="IncludeMaximum")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-timegranularity""", alias="TimeGranularity")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-filterid""", alias="FilterId")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-includeminimum""", alias="IncludeMinimum")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefilter.html#cfn-quicksight-dashboard-timerangefilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilter:
        from troposphere.quicksight import TimeRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefiltervalue.html
    Properties:
        - Name: RollingDate
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefiltervalue.html#cfn-quicksight-dashboard-timerangefiltervalue-rollingdate""", alias="RollingDate")
    StaticValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefiltervalue.html#cfn-quicksight-dashboard-timerangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-timerangefiltervalue.html#cfn-quicksight-dashboard-timerangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilterValue:
        from troposphere.quicksight import TimeRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipitem.html
    Properties:
        - Name: FieldTooltipItem
        - Name: ColumnTooltipItem
    
    """
    
    FieldTooltipItem_: Optional['FieldTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipitem.html#cfn-quicksight-dashboard-tooltipitem-fieldtooltipitem""", alias="FieldTooltipItem")
    ColumnTooltipItem_: Optional['ColumnTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipitem.html#cfn-quicksight-dashboard-tooltipitem-columntooltipitem""", alias="ColumnTooltipItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipItem:
        from troposphere.quicksight import TooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipoptions.html
    Properties:
        - Name: SelectedTooltipType
        - Name: TooltipVisibility
        - Name: FieldBasedTooltip
    
    """
    
    SelectedTooltipType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipoptions.html#cfn-quicksight-dashboard-tooltipoptions-selectedtooltiptype""", alias="SelectedTooltipType")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipoptions.html#cfn-quicksight-dashboard-tooltipoptions-tooltipvisibility""", alias="TooltipVisibility")
    FieldBasedTooltip_: Optional['FieldBasedTooltip'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-tooltipoptions.html#cfn-quicksight-dashboard-tooltipoptions-fieldbasedtooltip""", alias="FieldBasedTooltip")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipOptions:
        from troposphere.quicksight import TooltipOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html
    Properties:
        - Name: AggregationSortConfigurations
        - Name: Column
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: Limit
        - Name: FilterId
    
    """
    
    AggregationSortConfigurations_: List['AggregationSortConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-aggregationsortconfigurations""", alias="AggregationSortConfigurations")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-column""", alias="Column")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-parametername""", alias="ParameterName")
    Limit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-limit""", alias="Limit")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomfilter.html#cfn-quicksight-dashboard-topbottomfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomFilter:
        from troposphere.quicksight import TopBottomFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomMoversComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: Value
        - Name: SortOrder
        - Name: Time
        - Name: MoverSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-category""", alias="Category")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-value""", alias="Value")
    SortOrder_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-sortorder""", alias="SortOrder")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-time""", alias="Time")
    MoverSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-moversize""", alias="MoverSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottommoverscomputation.html#cfn-quicksight-dashboard-topbottommoverscomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomMoversComputation:
        from troposphere.quicksight import TopBottomMoversComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomRankedComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: ResultSize
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-category""", alias="Category")
    ResultSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-resultsize""", alias="ResultSize")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-topbottomrankedcomputation.html#cfn-quicksight-dashboard-topbottomrankedcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomRankedComputation:
        from troposphere.quicksight import TopBottomRankedComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationcomputation.html
    Properties:
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationcomputation.html#cfn-quicksight-dashboard-totalaggregationcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationcomputation.html#cfn-quicksight-dashboard-totalaggregationcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationcomputation.html#cfn-quicksight-dashboard-totalaggregationcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationComputation:
        from troposphere.quicksight import TotalAggregationComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationfunction.html
    Properties:
        - Name: SimpleTotalAggregationFunction
    
    """
    
    SimpleTotalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationfunction.html#cfn-quicksight-dashboard-totalaggregationfunction-simpletotalaggregationfunction""", alias="SimpleTotalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationFunction:
        from troposphere.quicksight import TotalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationoption.html
    Properties:
        - Name: TotalAggregationFunction
        - Name: FieldId
    
    """
    
    TotalAggregationFunction_: 'TotalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationoption.html#cfn-quicksight-dashboard-totalaggregationoption-totalaggregationfunction""", alias="TotalAggregationFunction")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totalaggregationoption.html#cfn-quicksight-dashboard-totalaggregationoption-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationOption:
        from troposphere.quicksight import TotalAggregationOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-totaloptions.html#cfn-quicksight-dashboard-totaloptions-totalsvisibility""", alias="TotalsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalOptions:
        from troposphere.quicksight import TotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapaggregatedfieldwells.html
    Properties:
        - Name: Sizes
        - Name: Colors
        - Name: Groups
    
    """
    
    Sizes_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapaggregatedfieldwells.html#cfn-quicksight-dashboard-treemapaggregatedfieldwells-sizes""", alias="Sizes")
    Colors_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapaggregatedfieldwells.html#cfn-quicksight-dashboard-treemapaggregatedfieldwells-colors""", alias="Colors")
    Groups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapaggregatedfieldwells.html#cfn-quicksight-dashboard-treemapaggregatedfieldwells-groups""", alias="Groups")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapAggregatedFieldWells:
        from troposphere.quicksight import TreeMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: SizeLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: GroupLabelOptions
    
    """
    
    SortConfiguration_: Optional['TreeMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    SizeLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-sizelabeloptions""", alias="SizeLabelOptions")
    FieldWells_: Optional['TreeMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-colorscale""", alias="ColorScale")
    GroupLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapconfiguration.html#cfn-quicksight-dashboard-treemapconfiguration-grouplabeloptions""", alias="GroupLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapConfiguration:
        from troposphere.quicksight import TreeMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapfieldwells.html
    Properties:
        - Name: TreeMapAggregatedFieldWells
    
    """
    
    TreeMapAggregatedFieldWells_: Optional['TreeMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapfieldwells.html#cfn-quicksight-dashboard-treemapfieldwells-treemapaggregatedfieldwells""", alias="TreeMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapFieldWells:
        from troposphere.quicksight import TreeMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapsortconfiguration.html
    Properties:
        - Name: TreeMapSort
        - Name: TreeMapGroupItemsLimitConfiguration
    
    """
    
    TreeMapSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapsortconfiguration.html#cfn-quicksight-dashboard-treemapsortconfiguration-treemapsort""", alias="TreeMapSort")
    TreeMapGroupItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapsortconfiguration.html#cfn-quicksight-dashboard-treemapsortconfiguration-treemapgroupitemslimitconfiguration""", alias="TreeMapGroupItemsLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapSortConfiguration:
        from troposphere.quicksight import TreeMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TreeMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-treemapvisual.html#cfn-quicksight-dashboard-treemapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapVisual:
        from troposphere.quicksight import TreeMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TrendArrowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-trendarrowoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-trendarrowoptions.html#cfn-quicksight-dashboard-trendarrowoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TrendArrowOptions:
        from troposphere.quicksight import TrendArrowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UnaggregatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-unaggregatedfield.html
    Properties:
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-unaggregatedfield.html#cfn-quicksight-dashboard-unaggregatedfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-unaggregatedfield.html#cfn-quicksight-dashboard-unaggregatedfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-unaggregatedfield.html#cfn-quicksight-dashboard-unaggregatedfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UnaggregatedField:
        from troposphere.quicksight import UnaggregatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UniqueValuesComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-uniquevaluescomputation.html
    Properties:
        - Name: Category
        - Name: ComputationId
        - Name: Name
    
    """
    
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-uniquevaluescomputation.html#cfn-quicksight-dashboard-uniquevaluescomputation-category""", alias="Category")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-uniquevaluescomputation.html#cfn-quicksight-dashboard-uniquevaluescomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-uniquevaluescomputation.html#cfn-quicksight-dashboard-uniquevaluescomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UniqueValuesComputation:
        from troposphere.quicksight import UniqueValuesComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ValidationStrategy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-validationstrategy.html
    Properties:
        - Name: Mode
    
    """
    
    Mode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-validationstrategy.html#cfn-quicksight-dashboard-validationstrategy-mode""", alias="Mode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ValidationStrategy:
        from troposphere.quicksight import ValidationStrategy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisibleRangeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visiblerangeoptions.html
    Properties:
        - Name: PercentRange
    
    """
    
    PercentRange_: Optional['PercentVisibleRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visiblerangeoptions.html#cfn-quicksight-dashboard-visiblerangeoptions-percentrange""", alias="PercentRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisibleRangeOptions:
        from troposphere.quicksight import VisibleRangeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Visual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html
    Properties:
        - Name: FunnelChartVisual
        - Name: FilledMapVisual
        - Name: BoxPlotVisual
        - Name: WaterfallVisual
        - Name: CustomContentVisual
        - Name: PieChartVisual
        - Name: KPIVisual
        - Name: HistogramVisual
        - Name: TableVisual
        - Name: PivotTableVisual
        - Name: GeospatialMapVisual
        - Name: BarChartVisual
        - Name: ScatterPlotVisual
        - Name: RadarChartVisual
        - Name: HeatMapVisual
        - Name: TreeMapVisual
        - Name: ComboChartVisual
        - Name: WordCloudVisual
        - Name: InsightVisual
        - Name: SankeyDiagramVisual
        - Name: GaugeChartVisual
        - Name: LineChartVisual
        - Name: EmptyVisual
    
    """
    
    FunnelChartVisual_: Optional['FunnelChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-funnelchartvisual""", alias="FunnelChartVisual")
    FilledMapVisual_: Optional['FilledMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-filledmapvisual""", alias="FilledMapVisual")
    BoxPlotVisual_: Optional['BoxPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-boxplotvisual""", alias="BoxPlotVisual")
    WaterfallVisual_: Optional['WaterfallVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-waterfallvisual""", alias="WaterfallVisual")
    CustomContentVisual_: Optional['CustomContentVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-customcontentvisual""", alias="CustomContentVisual")
    PieChartVisual_: Optional['PieChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-piechartvisual""", alias="PieChartVisual")
    KPIVisual_: Optional['KPIVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-kpivisual""", alias="KPIVisual")
    HistogramVisual_: Optional['HistogramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-histogramvisual""", alias="HistogramVisual")
    TableVisual_: Optional['TableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-tablevisual""", alias="TableVisual")
    PivotTableVisual_: Optional['PivotTableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-pivottablevisual""", alias="PivotTableVisual")
    GeospatialMapVisual_: Optional['GeospatialMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-geospatialmapvisual""", alias="GeospatialMapVisual")
    BarChartVisual_: Optional['BarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-barchartvisual""", alias="BarChartVisual")
    ScatterPlotVisual_: Optional['ScatterPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-scatterplotvisual""", alias="ScatterPlotVisual")
    RadarChartVisual_: Optional['RadarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-radarchartvisual""", alias="RadarChartVisual")
    HeatMapVisual_: Optional['HeatMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-heatmapvisual""", alias="HeatMapVisual")
    TreeMapVisual_: Optional['TreeMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-treemapvisual""", alias="TreeMapVisual")
    ComboChartVisual_: Optional['ComboChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-combochartvisual""", alias="ComboChartVisual")
    WordCloudVisual_: Optional['WordCloudVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-wordcloudvisual""", alias="WordCloudVisual")
    InsightVisual_: Optional['InsightVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-insightvisual""", alias="InsightVisual")
    SankeyDiagramVisual_: Optional['SankeyDiagramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-sankeydiagramvisual""", alias="SankeyDiagramVisual")
    GaugeChartVisual_: Optional['GaugeChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-gaugechartvisual""", alias="GaugeChartVisual")
    LineChartVisual_: Optional['LineChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-linechartvisual""", alias="LineChartVisual")
    EmptyVisual_: Optional['EmptyVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visual.html#cfn-quicksight-dashboard-visual-emptyvisual""", alias="EmptyVisual")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Visual:
        from troposphere.quicksight import Visual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualAxisSortOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualaxissortoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualaxissortoption.html#cfn-quicksight-dashboard-visualaxissortoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualAxisSortOption:
        from troposphere.quicksight import VisualAxisSortOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomAction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html
    Properties:
        - Name: Status
        - Name: Trigger
        - Name: CustomActionId
        - Name: Name
        - Name: ActionOperations
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html#cfn-quicksight-dashboard-visualcustomaction-status""", alias="Status")
    Trigger_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html#cfn-quicksight-dashboard-visualcustomaction-trigger""", alias="Trigger")
    CustomActionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html#cfn-quicksight-dashboard-visualcustomaction-customactionid""", alias="CustomActionId")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html#cfn-quicksight-dashboard-visualcustomaction-name""", alias="Name")
    ActionOperations_: List['VisualCustomActionOperation'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomaction.html#cfn-quicksight-dashboard-visualcustomaction-actionoperations""", alias="ActionOperations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomAction:
        from troposphere.quicksight import VisualCustomAction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomActionOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html
    Properties:
        - Name: NavigationOperation
        - Name: SetParametersOperation
        - Name: FilterOperation
        - Name: URLOperation
    
    """
    
    NavigationOperation_: Optional['CustomActionNavigationOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html#cfn-quicksight-dashboard-visualcustomactionoperation-navigationoperation""", alias="NavigationOperation")
    SetParametersOperation_: Optional['CustomActionSetParametersOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html#cfn-quicksight-dashboard-visualcustomactionoperation-setparametersoperation""", alias="SetParametersOperation")
    FilterOperation_: Optional['CustomActionFilterOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html#cfn-quicksight-dashboard-visualcustomactionoperation-filteroperation""", alias="FilterOperation")
    URLOperation_: Optional['CustomActionURLOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualcustomactionoperation.html#cfn-quicksight-dashboard-visualcustomactionoperation-urloperation""", alias="URLOperation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomActionOperation:
        from troposphere.quicksight import VisualCustomActionOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualMenuOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualmenuoption.html
    Properties:
        - Name: AvailabilityStatus
    
    """
    
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualmenuoption.html#cfn-quicksight-dashboard-visualmenuoption-availabilitystatus""", alias="AvailabilityStatus")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualMenuOption:
        from troposphere.quicksight import VisualMenuOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualPalette(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualpalette.html
    Properties:
        - Name: ChartColor
        - Name: ColorMap
    
    """
    
    ChartColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualpalette.html#cfn-quicksight-dashboard-visualpalette-chartcolor""", alias="ChartColor")
    ColorMap_: Optional[List['DataPathColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualpalette.html#cfn-quicksight-dashboard-visualpalette-colormap""", alias="ColorMap")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualPalette:
        from troposphere.quicksight import VisualPalette as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualSubtitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualsubtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualsubtitlelabeloptions.html#cfn-quicksight-dashboard-visualsubtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['LongFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualsubtitlelabeloptions.html#cfn-quicksight-dashboard-visualsubtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualSubtitleLabelOptions:
        from troposphere.quicksight import VisualSubtitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualTitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualtitlelabeloptions.html#cfn-quicksight-dashboard-visualtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['ShortFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-visualtitlelabeloptions.html#cfn-quicksight-dashboard-visualtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualTitleLabelOptions:
        from troposphere.quicksight import VisualTitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartaggregatedfieldwells.html
    Properties:
        - Name: Categories
        - Name: Breakdowns
        - Name: Values
    
    """
    
    Categories_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartaggregatedfieldwells.html#cfn-quicksight-dashboard-waterfallchartaggregatedfieldwells-categories""", alias="Categories")
    Breakdowns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartaggregatedfieldwells.html#cfn-quicksight-dashboard-waterfallchartaggregatedfieldwells-breakdowns""", alias="Breakdowns")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartaggregatedfieldwells.html#cfn-quicksight-dashboard-waterfallchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartAggregatedFieldWells:
        from troposphere.quicksight import WaterfallChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html
    Properties:
        - Name: CategoryAxisLabelOptions
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: WaterfallChartOptions
        - Name: CategoryAxisDisplayOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    CategoryAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-categoryaxislabeloptions""", alias="CategoryAxisLabelOptions")
    SortConfiguration_: Optional['WaterfallChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-datalabels""", alias="DataLabels")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['WaterfallChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-fieldwells""", alias="FieldWells")
    WaterfallChartOptions_: Optional['WaterfallChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-waterfallchartoptions""", alias="WaterfallChartOptions")
    CategoryAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-categoryaxisdisplayoptions""", alias="CategoryAxisDisplayOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartconfiguration.html#cfn-quicksight-dashboard-waterfallchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartConfiguration:
        from troposphere.quicksight import WaterfallChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartfieldwells.html
    Properties:
        - Name: WaterfallChartAggregatedFieldWells
    
    """
    
    WaterfallChartAggregatedFieldWells_: Optional['WaterfallChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartfieldwells.html#cfn-quicksight-dashboard-waterfallchartfieldwells-waterfallchartaggregatedfieldwells""", alias="WaterfallChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartFieldWells:
        from troposphere.quicksight import WaterfallChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartoptions.html
    Properties:
        - Name: TotalBarLabel
    
    """
    
    TotalBarLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartoptions.html#cfn-quicksight-dashboard-waterfallchartoptions-totalbarlabel""", alias="TotalBarLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartOptions:
        from troposphere.quicksight import WaterfallChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartsortconfiguration.html
    Properties:
        - Name: BreakdownItemsLimit
        - Name: CategorySort
    
    """
    
    BreakdownItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartsortconfiguration.html#cfn-quicksight-dashboard-waterfallchartsortconfiguration-breakdownitemslimit""", alias="BreakdownItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallchartsortconfiguration.html#cfn-quicksight-dashboard-waterfallchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartSortConfiguration:
        from troposphere.quicksight import WaterfallChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WaterfallChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-waterfallvisual.html#cfn-quicksight-dashboard-waterfallvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallVisual:
        from troposphere.quicksight import WaterfallVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfPointScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifpointscenario.html
    Properties:
        - Name: Value
        - Name: Date
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifpointscenario.html#cfn-quicksight-dashboard-whatifpointscenario-value""", alias="Value")
    Date_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifpointscenario.html#cfn-quicksight-dashboard-whatifpointscenario-date""", alias="Date")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfPointScenario:
        from troposphere.quicksight import WhatIfPointScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfRangeScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifrangescenario.html
    Properties:
        - Name: StartDate
        - Name: Value
        - Name: EndDate
    
    """
    
    StartDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifrangescenario.html#cfn-quicksight-dashboard-whatifrangescenario-startdate""", alias="StartDate")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifrangescenario.html#cfn-quicksight-dashboard-whatifrangescenario-value""", alias="Value")
    EndDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-whatifrangescenario.html#cfn-quicksight-dashboard-whatifrangescenario-enddate""", alias="EndDate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfRangeScenario:
        from troposphere.quicksight import WhatIfRangeScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Size
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudaggregatedfieldwells.html#cfn-quicksight-dashboard-wordcloudaggregatedfieldwells-groupby""", alias="GroupBy")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudaggregatedfieldwells.html#cfn-quicksight-dashboard-wordcloudaggregatedfieldwells-size""", alias="Size")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudAggregatedFieldWells:
        from troposphere.quicksight import WordCloudAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: WordCloudOptions
    
    """
    
    SortConfiguration_: Optional['WordCloudSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html#cfn-quicksight-dashboard-wordcloudchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html#cfn-quicksight-dashboard-wordcloudchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['WordCloudFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html#cfn-quicksight-dashboard-wordcloudchartconfiguration-fieldwells""", alias="FieldWells")
    WordCloudOptions_: Optional['WordCloudOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudchartconfiguration.html#cfn-quicksight-dashboard-wordcloudchartconfiguration-wordcloudoptions""", alias="WordCloudOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudChartConfiguration:
        from troposphere.quicksight import WordCloudChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudfieldwells.html
    Properties:
        - Name: WordCloudAggregatedFieldWells
    
    """
    
    WordCloudAggregatedFieldWells_: Optional['WordCloudAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudfieldwells.html#cfn-quicksight-dashboard-wordcloudfieldwells-wordcloudaggregatedfieldwells""", alias="WordCloudAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudFieldWells:
        from troposphere.quicksight import WordCloudFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html
    Properties:
        - Name: WordOrientation
        - Name: WordScaling
        - Name: CloudLayout
        - Name: MaximumStringLength
        - Name: WordCasing
        - Name: WordPadding
    
    """
    
    WordOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-wordorientation""", alias="WordOrientation")
    WordScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-wordscaling""", alias="WordScaling")
    CloudLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-cloudlayout""", alias="CloudLayout")
    MaximumStringLength_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-maximumstringlength""", alias="MaximumStringLength")
    WordCasing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-wordcasing""", alias="WordCasing")
    WordPadding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudoptions.html#cfn-quicksight-dashboard-wordcloudoptions-wordpadding""", alias="WordPadding")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudOptions:
        from troposphere.quicksight import WordCloudOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudsortconfiguration.html#cfn-quicksight-dashboard-wordcloudsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudsortconfiguration.html#cfn-quicksight-dashboard-wordcloudsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudSortConfiguration:
        from troposphere.quicksight import WordCloudSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WordCloudChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dashboard-wordcloudvisual.html#cfn-quicksight-dashboard-wordcloudvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudVisual:
        from troposphere.quicksight import WordCloudVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedColumn(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-calculatedcolumn.html
    Properties:
        - Name: ColumnId
        - Name: ColumnName
        - Name: Expression
    
    """
    
    ColumnId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-calculatedcolumn.html#cfn-quicksight-dataset-calculatedcolumn-columnid""", alias="ColumnId")
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-calculatedcolumn.html#cfn-quicksight-dataset-calculatedcolumn-columnname""", alias="ColumnName")
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-calculatedcolumn.html#cfn-quicksight-dataset-calculatedcolumn-expression""", alias="Expression")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedColumn:
        from troposphere.quicksight import CalculatedColumn as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CastColumnTypeOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html
    Properties:
        - Name: ColumnName
        - Name: Format
        - Name: SubType
        - Name: NewColumnType
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html#cfn-quicksight-dataset-castcolumntypeoperation-columnname""", alias="ColumnName")
    Format_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html#cfn-quicksight-dataset-castcolumntypeoperation-format""", alias="Format")
    SubType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html#cfn-quicksight-dataset-castcolumntypeoperation-subtype""", alias="SubType")
    NewColumnType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-castcolumntypeoperation.html#cfn-quicksight-dataset-castcolumntypeoperation-newcolumntype""", alias="NewColumnType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CastColumnTypeOperation:
        from troposphere.quicksight import CastColumnTypeOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnDescription(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columndescription.html
    Properties:
        - Name: Text
    
    """
    
    Text_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columndescription.html#cfn-quicksight-dataset-columndescription-text""", alias="Text")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnDescription:
        from troposphere.quicksight import ColumnDescription as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnGroup(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columngroup.html
    Properties:
        - Name: GeoSpatialColumnGroup
    
    """
    
    GeoSpatialColumnGroup_: Optional['GeoSpatialColumnGroup'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columngroup.html#cfn-quicksight-dataset-columngroup-geospatialcolumngroup""", alias="GeoSpatialColumnGroup")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnGroup:
        from troposphere.quicksight import ColumnGroup as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnLevelPermissionRule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columnlevelpermissionrule.html
    Properties:
        - Name: ColumnNames
        - Name: Principals
    
    """
    
    ColumnNames_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columnlevelpermissionrule.html#cfn-quicksight-dataset-columnlevelpermissionrule-columnnames""", alias="ColumnNames")
    Principals_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columnlevelpermissionrule.html#cfn-quicksight-dataset-columnlevelpermissionrule-principals""", alias="Principals")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnLevelPermissionRule:
        from troposphere.quicksight import ColumnLevelPermissionRule as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnTag(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columntag.html
    Properties:
        - Name: ColumnGeographicRole
        - Name: ColumnDescription
    
    """
    
    ColumnGeographicRole_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columntag.html#cfn-quicksight-dataset-columntag-columngeographicrole""", alias="ColumnGeographicRole")
    ColumnDescription_: Optional['ColumnDescription'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-columntag.html#cfn-quicksight-dataset-columntag-columndescription""", alias="ColumnDescription")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnTag:
        from troposphere.quicksight import ColumnTag as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CreateColumnsOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-createcolumnsoperation.html
    Properties:
        - Name: Columns
    
    """
    
    Columns_: List['CalculatedColumn'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-createcolumnsoperation.html#cfn-quicksight-dataset-createcolumnsoperation-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CreateColumnsOperation:
        from troposphere.quicksight import CreateColumnsOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomSql(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html
    Properties:
        - Name: DataSourceArn
        - Name: SqlQuery
        - Name: Columns
        - Name: Name
    
    """
    
    DataSourceArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html#cfn-quicksight-dataset-customsql-datasourcearn""", alias="DataSourceArn")
    SqlQuery_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html#cfn-quicksight-dataset-customsql-sqlquery""", alias="SqlQuery")
    Columns_: List['InputColumn'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html#cfn-quicksight-dataset-customsql-columns""", alias="Columns")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-customsql.html#cfn-quicksight-dataset-customsql-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomSql:
        from troposphere.quicksight import CustomSql as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetRefreshProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetrefreshproperties.html
    Properties:
        - Name: RefreshConfiguration
    
    """
    
    RefreshConfiguration_: Optional['RefreshConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetrefreshproperties.html#cfn-quicksight-dataset-datasetrefreshproperties-refreshconfiguration""", alias="RefreshConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetRefreshProperties:
        from troposphere.quicksight import DataSetRefreshProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetUsageConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetusageconfiguration.html
    Properties:
        - Name: DisableUseAsImportedSource
        - Name: DisableUseAsDirectQuerySource
    
    """
    
    DisableUseAsImportedSource_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetusageconfiguration.html#cfn-quicksight-dataset-datasetusageconfiguration-disableuseasimportedsource""", alias="DisableUseAsImportedSource")
    DisableUseAsDirectQuerySource_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetusageconfiguration.html#cfn-quicksight-dataset-datasetusageconfiguration-disableuseasdirectquerysource""", alias="DisableUseAsDirectQuerySource")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetUsageConfiguration:
        from troposphere.quicksight import DataSetUsageConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DatasetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html
    Properties:
        - Name: IntegerDatasetParameter
        - Name: DateTimeDatasetParameter
        - Name: DecimalDatasetParameter
        - Name: StringDatasetParameter
    
    """
    
    IntegerDatasetParameter_: Optional['IntegerDatasetParameter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html#cfn-quicksight-dataset-datasetparameter-integerdatasetparameter""", alias="IntegerDatasetParameter")
    DateTimeDatasetParameter_: Optional['DateTimeDatasetParameter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html#cfn-quicksight-dataset-datasetparameter-datetimedatasetparameter""", alias="DateTimeDatasetParameter")
    DecimalDatasetParameter_: Optional['DecimalDatasetParameter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html#cfn-quicksight-dataset-datasetparameter-decimaldatasetparameter""", alias="DecimalDatasetParameter")
    StringDatasetParameter_: Optional['StringDatasetParameter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datasetparameter.html#cfn-quicksight-dataset-datasetparameter-stringdatasetparameter""", alias="StringDatasetParameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DatasetParameter:
        from troposphere.quicksight import DatasetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeDatasetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html
    Properties:
        - Name: ValueType
        - Name: TimeGranularity
        - Name: DefaultValues
        - Name: Id
        - Name: Name
    
    """
    
    ValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html#cfn-quicksight-dataset-datetimedatasetparameter-valuetype""", alias="ValueType")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html#cfn-quicksight-dataset-datetimedatasetparameter-timegranularity""", alias="TimeGranularity")
    DefaultValues_: Optional['DateTimeDatasetParameterDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html#cfn-quicksight-dataset-datetimedatasetparameter-defaultvalues""", alias="DefaultValues")
    Id_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html#cfn-quicksight-dataset-datetimedatasetparameter-id""", alias="Id")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameter.html#cfn-quicksight-dataset-datetimedatasetparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeDatasetParameter:
        from troposphere.quicksight import DateTimeDatasetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeDatasetParameterDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameterdefaultvalues.html
    Properties:
        - Name: StaticValues
    
    """
    
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-datetimedatasetparameterdefaultvalues.html#cfn-quicksight-dataset-datetimedatasetparameterdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeDatasetParameterDefaultValues:
        from troposphere.quicksight import DateTimeDatasetParameterDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalDatasetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html
    Properties:
        - Name: ValueType
        - Name: DefaultValues
        - Name: Id
        - Name: Name
    
    """
    
    ValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html#cfn-quicksight-dataset-decimaldatasetparameter-valuetype""", alias="ValueType")
    DefaultValues_: Optional['DecimalDatasetParameterDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html#cfn-quicksight-dataset-decimaldatasetparameter-defaultvalues""", alias="DefaultValues")
    Id_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html#cfn-quicksight-dataset-decimaldatasetparameter-id""", alias="Id")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameter.html#cfn-quicksight-dataset-decimaldatasetparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalDatasetParameter:
        from troposphere.quicksight import DecimalDatasetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalDatasetParameterDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameterdefaultvalues.html
    Properties:
        - Name: StaticValues
    
    """
    
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-decimaldatasetparameterdefaultvalues.html#cfn-quicksight-dataset-decimaldatasetparameterdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalDatasetParameterDefaultValues:
        from troposphere.quicksight import DecimalDatasetParameterDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldFolder(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-fieldfolder.html
    Properties:
        - Name: Description
        - Name: Columns
    
    """
    
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-fieldfolder.html#cfn-quicksight-dataset-fieldfolder-description""", alias="Description")
    Columns_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-fieldfolder.html#cfn-quicksight-dataset-fieldfolder-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldFolder:
        from troposphere.quicksight import FieldFolder as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-filteroperation.html
    Properties:
        - Name: ConditionExpression
    
    """
    
    ConditionExpression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-filteroperation.html#cfn-quicksight-dataset-filteroperation-conditionexpression""", alias="ConditionExpression")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperation:
        from troposphere.quicksight import FilterOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeoSpatialColumnGroup(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-geospatialcolumngroup.html
    Properties:
        - Name: Columns
        - Name: CountryCode
        - Name: Name
    
    """
    
    Columns_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-geospatialcolumngroup.html#cfn-quicksight-dataset-geospatialcolumngroup-columns""", alias="Columns")
    CountryCode_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-geospatialcolumngroup.html#cfn-quicksight-dataset-geospatialcolumngroup-countrycode""", alias="CountryCode")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-geospatialcolumngroup.html#cfn-quicksight-dataset-geospatialcolumngroup-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeoSpatialColumnGroup:
        from troposphere.quicksight import GeoSpatialColumnGroup as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IncrementalRefresh(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-incrementalrefresh.html
    Properties:
        - Name: LookbackWindow
    
    """
    
    LookbackWindow_: Optional['LookbackWindow'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-incrementalrefresh.html#cfn-quicksight-dataset-incrementalrefresh-lookbackwindow""", alias="LookbackWindow")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IncrementalRefresh:
        from troposphere.quicksight import IncrementalRefresh as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IngestionWaitPolicy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-ingestionwaitpolicy.html
    Properties:
        - Name: WaitForSpiceIngestion
        - Name: IngestionWaitTimeInHours
    
    """
    
    WaitForSpiceIngestion_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-ingestionwaitpolicy.html#cfn-quicksight-dataset-ingestionwaitpolicy-waitforspiceingestion""", alias="WaitForSpiceIngestion")
    IngestionWaitTimeInHours_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-ingestionwaitpolicy.html#cfn-quicksight-dataset-ingestionwaitpolicy-ingestionwaittimeinhours""", alias="IngestionWaitTimeInHours")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IngestionWaitPolicy:
        from troposphere.quicksight import IngestionWaitPolicy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InputColumn(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-inputcolumn.html
    Properties:
        - Name: Type
        - Name: SubType
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-inputcolumn.html#cfn-quicksight-dataset-inputcolumn-type""", alias="Type")
    SubType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-inputcolumn.html#cfn-quicksight-dataset-inputcolumn-subtype""", alias="SubType")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-inputcolumn.html#cfn-quicksight-dataset-inputcolumn-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InputColumn:
        from troposphere.quicksight import InputColumn as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerDatasetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html
    Properties:
        - Name: ValueType
        - Name: DefaultValues
        - Name: Id
        - Name: Name
    
    """
    
    ValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html#cfn-quicksight-dataset-integerdatasetparameter-valuetype""", alias="ValueType")
    DefaultValues_: Optional['IntegerDatasetParameterDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html#cfn-quicksight-dataset-integerdatasetparameter-defaultvalues""", alias="DefaultValues")
    Id_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html#cfn-quicksight-dataset-integerdatasetparameter-id""", alias="Id")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameter.html#cfn-quicksight-dataset-integerdatasetparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerDatasetParameter:
        from troposphere.quicksight import IntegerDatasetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerDatasetParameterDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameterdefaultvalues.html
    Properties:
        - Name: StaticValues
    
    """
    
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-integerdatasetparameterdefaultvalues.html#cfn-quicksight-dataset-integerdatasetparameterdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerDatasetParameterDefaultValues:
        from troposphere.quicksight import IntegerDatasetParameterDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class JoinInstruction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html
    Properties:
        - Name: OnClause
        - Name: Type
        - Name: LeftJoinKeyProperties
        - Name: LeftOperand
        - Name: RightOperand
        - Name: RightJoinKeyProperties
    
    """
    
    OnClause_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-onclause""", alias="OnClause")
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-type""", alias="Type")
    LeftJoinKeyProperties_: Optional['JoinKeyProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-leftjoinkeyproperties""", alias="LeftJoinKeyProperties")
    LeftOperand_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-leftoperand""", alias="LeftOperand")
    RightOperand_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-rightoperand""", alias="RightOperand")
    RightJoinKeyProperties_: Optional['JoinKeyProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joininstruction.html#cfn-quicksight-dataset-joininstruction-rightjoinkeyproperties""", alias="RightJoinKeyProperties")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.JoinInstruction:
        from troposphere.quicksight import JoinInstruction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class JoinKeyProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joinkeyproperties.html
    Properties:
        - Name: UniqueKey
    
    """
    
    UniqueKey_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-joinkeyproperties.html#cfn-quicksight-dataset-joinkeyproperties-uniquekey""", alias="UniqueKey")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.JoinKeyProperties:
        from troposphere.quicksight import JoinKeyProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LogicalTable(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltable.html
    Properties:
        - Name: Alias
        - Name: DataTransforms
        - Name: Source
    
    """
    
    Alias_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltable.html#cfn-quicksight-dataset-logicaltable-alias""", alias="Alias")
    DataTransforms_: Optional[List['TransformOperation']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltable.html#cfn-quicksight-dataset-logicaltable-datatransforms""", alias="DataTransforms")
    Source_: 'LogicalTableSource' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltable.html#cfn-quicksight-dataset-logicaltable-source""", alias="Source")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LogicalTable:
        from troposphere.quicksight import LogicalTable as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LogicalTableSource(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltablesource.html
    Properties:
        - Name: PhysicalTableId
        - Name: JoinInstruction
        - Name: DataSetArn
    
    """
    
    PhysicalTableId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltablesource.html#cfn-quicksight-dataset-logicaltablesource-physicaltableid""", alias="PhysicalTableId")
    JoinInstruction_: Optional['JoinInstruction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltablesource.html#cfn-quicksight-dataset-logicaltablesource-joininstruction""", alias="JoinInstruction")
    DataSetArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-logicaltablesource.html#cfn-quicksight-dataset-logicaltablesource-datasetarn""", alias="DataSetArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LogicalTableSource:
        from troposphere.quicksight import LogicalTableSource as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LookbackWindow(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-lookbackwindow.html
    Properties:
        - Name: ColumnName
        - Name: SizeUnit
        - Name: Size
    
    """
    
    ColumnName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-lookbackwindow.html#cfn-quicksight-dataset-lookbackwindow-columnname""", alias="ColumnName")
    SizeUnit_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-lookbackwindow.html#cfn-quicksight-dataset-lookbackwindow-sizeunit""", alias="SizeUnit")
    Size_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-lookbackwindow.html#cfn-quicksight-dataset-lookbackwindow-size""", alias="Size")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LookbackWindow:
        from troposphere.quicksight import LookbackWindow as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NewDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html
    Properties:
        - Name: DecimalStaticValues
        - Name: IntegerStaticValues
        - Name: StringStaticValues
        - Name: DateTimeStaticValues
    
    """
    
    DecimalStaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html#cfn-quicksight-dataset-newdefaultvalues-decimalstaticvalues""", alias="DecimalStaticValues")
    IntegerStaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html#cfn-quicksight-dataset-newdefaultvalues-integerstaticvalues""", alias="IntegerStaticValues")
    StringStaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html#cfn-quicksight-dataset-newdefaultvalues-stringstaticvalues""", alias="StringStaticValues")
    DateTimeStaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-newdefaultvalues.html#cfn-quicksight-dataset-newdefaultvalues-datetimestaticvalues""", alias="DateTimeStaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NewDefaultValues:
        from troposphere.quicksight import NewDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class OutputColumn(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html
    Properties:
        - Name: Type
        - Name: SubType
        - Name: Description
        - Name: Name
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html#cfn-quicksight-dataset-outputcolumn-type""", alias="Type")
    SubType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html#cfn-quicksight-dataset-outputcolumn-subtype""", alias="SubType")
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html#cfn-quicksight-dataset-outputcolumn-description""", alias="Description")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-outputcolumn.html#cfn-quicksight-dataset-outputcolumn-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.OutputColumn:
        from troposphere.quicksight import OutputColumn as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class OverrideDatasetParameterOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-overridedatasetparameteroperation.html
    Properties:
        - Name: NewDefaultValues
        - Name: ParameterName
        - Name: NewParameterName
    
    """
    
    NewDefaultValues_: Optional['NewDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-overridedatasetparameteroperation.html#cfn-quicksight-dataset-overridedatasetparameteroperation-newdefaultvalues""", alias="NewDefaultValues")
    ParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-overridedatasetparameteroperation.html#cfn-quicksight-dataset-overridedatasetparameteroperation-parametername""", alias="ParameterName")
    NewParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-overridedatasetparameteroperation.html#cfn-quicksight-dataset-overridedatasetparameteroperation-newparametername""", alias="NewParameterName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.OverrideDatasetParameterOperation:
        from troposphere.quicksight import OverrideDatasetParameterOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PhysicalTable(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-physicaltable.html
    Properties:
        - Name: RelationalTable
        - Name: CustomSql
        - Name: S3Source
    
    """
    
    RelationalTable_: Optional['RelationalTable'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-physicaltable.html#cfn-quicksight-dataset-physicaltable-relationaltable""", alias="RelationalTable")
    CustomSql_: Optional['CustomSql'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-physicaltable.html#cfn-quicksight-dataset-physicaltable-customsql""", alias="CustomSql")
    S3Source_: Optional['S3Source'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-physicaltable.html#cfn-quicksight-dataset-physicaltable-s3source""", alias="S3Source")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PhysicalTable:
        from troposphere.quicksight import PhysicalTable as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ProjectOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-projectoperation.html
    Properties:
        - Name: ProjectedColumns
    
    """
    
    ProjectedColumns_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-projectoperation.html#cfn-quicksight-dataset-projectoperation-projectedcolumns""", alias="ProjectedColumns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ProjectOperation:
        from troposphere.quicksight import ProjectOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RefreshConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-refreshconfiguration.html
    Properties:
        - Name: IncrementalRefresh
    
    """
    
    IncrementalRefresh_: Optional['IncrementalRefresh'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-refreshconfiguration.html#cfn-quicksight-dataset-refreshconfiguration-incrementalrefresh""", alias="IncrementalRefresh")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RefreshConfiguration:
        from troposphere.quicksight import RefreshConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelationalTable(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html
    Properties:
        - Name: DataSourceArn
        - Name: InputColumns
        - Name: Schema
        - Name: Catalog
        - Name: Name
    
    """
    
    DataSourceArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html#cfn-quicksight-dataset-relationaltable-datasourcearn""", alias="DataSourceArn")
    InputColumns_: List['InputColumn'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html#cfn-quicksight-dataset-relationaltable-inputcolumns""", alias="InputColumns")
    Schema_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html#cfn-quicksight-dataset-relationaltable-schema""", alias="Schema")
    Catalog_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html#cfn-quicksight-dataset-relationaltable-catalog""", alias="Catalog")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-relationaltable.html#cfn-quicksight-dataset-relationaltable-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelationalTable:
        from troposphere.quicksight import RelationalTable as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RenameColumnOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-renamecolumnoperation.html
    Properties:
        - Name: NewColumnName
        - Name: ColumnName
    
    """
    
    NewColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-renamecolumnoperation.html#cfn-quicksight-dataset-renamecolumnoperation-newcolumnname""", alias="NewColumnName")
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-renamecolumnoperation.html#cfn-quicksight-dataset-renamecolumnoperation-columnname""", alias="ColumnName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RenameColumnOperation:
        from troposphere.quicksight import RenameColumnOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-resourcepermission.html#cfn-quicksight-dataset-resourcepermission-actions""", alias="Actions")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-resourcepermission.html#cfn-quicksight-dataset-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowLevelPermissionDataSet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html
    Properties:
        - Name: Status
        - Name: FormatVersion
        - Name: Arn
        - Name: Namespace
        - Name: PermissionPolicy
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset-status""", alias="Status")
    FormatVersion_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset-formatversion""", alias="FormatVersion")
    Arn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset-arn""", alias="Arn")
    Namespace_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset-namespace""", alias="Namespace")
    PermissionPolicy_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiondataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset-permissionpolicy""", alias="PermissionPolicy")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowLevelPermissionDataSet:
        from troposphere.quicksight import RowLevelPermissionDataSet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowLevelPermissionTagConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagconfiguration.html
    Properties:
        - Name: Status
        - Name: TagRules
        - Name: TagRuleConfigurations
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagconfiguration.html#cfn-quicksight-dataset-rowlevelpermissiontagconfiguration-status""", alias="Status")
    TagRules_: List['RowLevelPermissionTagRule'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagconfiguration.html#cfn-quicksight-dataset-rowlevelpermissiontagconfiguration-tagrules""", alias="TagRules")
    TagRuleConfigurations_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagconfiguration.html#cfn-quicksight-dataset-rowlevelpermissiontagconfiguration-tagruleconfigurations""", alias="TagRuleConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowLevelPermissionTagConfiguration:
        from troposphere.quicksight import RowLevelPermissionTagConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowLevelPermissionTagRule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html
    Properties:
        - Name: ColumnName
        - Name: TagKey
        - Name: MatchAllValue
        - Name: TagMultiValueDelimiter
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html#cfn-quicksight-dataset-rowlevelpermissiontagrule-columnname""", alias="ColumnName")
    TagKey_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html#cfn-quicksight-dataset-rowlevelpermissiontagrule-tagkey""", alias="TagKey")
    MatchAllValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html#cfn-quicksight-dataset-rowlevelpermissiontagrule-matchallvalue""", alias="MatchAllValue")
    TagMultiValueDelimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-rowlevelpermissiontagrule.html#cfn-quicksight-dataset-rowlevelpermissiontagrule-tagmultivaluedelimiter""", alias="TagMultiValueDelimiter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowLevelPermissionTagRule:
        from troposphere.quicksight import RowLevelPermissionTagRule as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class S3Source(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-s3source.html
    Properties:
        - Name: DataSourceArn
        - Name: InputColumns
        - Name: UploadSettings
    
    """
    
    DataSourceArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-s3source.html#cfn-quicksight-dataset-s3source-datasourcearn""", alias="DataSourceArn")
    InputColumns_: List['InputColumn'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-s3source.html#cfn-quicksight-dataset-s3source-inputcolumns""", alias="InputColumns")
    UploadSettings_: Optional['UploadSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-s3source.html#cfn-quicksight-dataset-s3source-uploadsettings""", alias="UploadSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.S3Source:
        from troposphere.quicksight import S3Source as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringDatasetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html
    Properties:
        - Name: ValueType
        - Name: DefaultValues
        - Name: Id
        - Name: Name
    
    """
    
    ValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html#cfn-quicksight-dataset-stringdatasetparameter-valuetype""", alias="ValueType")
    DefaultValues_: Optional['StringDatasetParameterDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html#cfn-quicksight-dataset-stringdatasetparameter-defaultvalues""", alias="DefaultValues")
    Id_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html#cfn-quicksight-dataset-stringdatasetparameter-id""", alias="Id")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameter.html#cfn-quicksight-dataset-stringdatasetparameter-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringDatasetParameter:
        from troposphere.quicksight import StringDatasetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringDatasetParameterDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameterdefaultvalues.html
    Properties:
        - Name: StaticValues
    
    """
    
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-stringdatasetparameterdefaultvalues.html#cfn-quicksight-dataset-stringdatasetparameterdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringDatasetParameterDefaultValues:
        from troposphere.quicksight import StringDatasetParameterDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TagColumnOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-tagcolumnoperation.html
    Properties:
        - Name: ColumnName
        - Name: Tags
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-tagcolumnoperation.html#cfn-quicksight-dataset-tagcolumnoperation-columnname""", alias="ColumnName")
    Tags_: List['ColumnTag'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-tagcolumnoperation.html#cfn-quicksight-dataset-tagcolumnoperation-tags""", alias="Tags")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TagColumnOperation:
        from troposphere.quicksight import TagColumnOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TransformOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html
    Properties:
        - Name: TagColumnOperation
        - Name: OverrideDatasetParameterOperation
        - Name: FilterOperation
        - Name: CastColumnTypeOperation
        - Name: CreateColumnsOperation
        - Name: RenameColumnOperation
        - Name: ProjectOperation
    
    """
    
    TagColumnOperation_: Optional['TagColumnOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-tagcolumnoperation""", alias="TagColumnOperation")
    OverrideDatasetParameterOperation_: Optional['OverrideDatasetParameterOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-overridedatasetparameteroperation""", alias="OverrideDatasetParameterOperation")
    FilterOperation_: Optional['FilterOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-filteroperation""", alias="FilterOperation")
    CastColumnTypeOperation_: Optional['CastColumnTypeOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-castcolumntypeoperation""", alias="CastColumnTypeOperation")
    CreateColumnsOperation_: Optional['CreateColumnsOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-createcolumnsoperation""", alias="CreateColumnsOperation")
    RenameColumnOperation_: Optional['RenameColumnOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-renamecolumnoperation""", alias="RenameColumnOperation")
    ProjectOperation_: Optional['ProjectOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-transformoperation.html#cfn-quicksight-dataset-transformoperation-projectoperation""", alias="ProjectOperation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TransformOperation:
        from troposphere.quicksight import TransformOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UploadSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html
    Properties:
        - Name: ContainsHeader
        - Name: TextQualifier
        - Name: Format
        - Name: StartFromRow
        - Name: Delimiter
    
    """
    
    ContainsHeader_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html#cfn-quicksight-dataset-uploadsettings-containsheader""", alias="ContainsHeader")
    TextQualifier_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html#cfn-quicksight-dataset-uploadsettings-textqualifier""", alias="TextQualifier")
    Format_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html#cfn-quicksight-dataset-uploadsettings-format""", alias="Format")
    StartFromRow_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html#cfn-quicksight-dataset-uploadsettings-startfromrow""", alias="StartFromRow")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-dataset-uploadsettings.html#cfn-quicksight-dataset-uploadsettings-delimiter""", alias="Delimiter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UploadSettings:
        from troposphere.quicksight import UploadSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AmazonElasticsearchParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonelasticsearchparameters.html
    Properties:
        - Name: Domain
    
    """
    
    Domain_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonelasticsearchparameters.html#cfn-quicksight-datasource-amazonelasticsearchparameters-domain""", alias="Domain")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AmazonElasticsearchParameters:
        from troposphere.quicksight import AmazonElasticsearchParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AmazonOpenSearchParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonopensearchparameters.html
    Properties:
        - Name: Domain
    
    """
    
    Domain_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-amazonopensearchparameters.html#cfn-quicksight-datasource-amazonopensearchparameters-domain""", alias="Domain")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AmazonOpenSearchParameters:
        from troposphere.quicksight import AmazonOpenSearchParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AthenaParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-athenaparameters.html
    Properties:
        - Name: WorkGroup
        - Name: RoleArn
    
    """
    
    WorkGroup_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-athenaparameters.html#cfn-quicksight-datasource-athenaparameters-workgroup""", alias="WorkGroup")
    RoleArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-athenaparameters.html#cfn-quicksight-datasource-athenaparameters-rolearn""", alias="RoleArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AthenaParameters:
        from troposphere.quicksight import AthenaParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AuroraParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-auroraparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-auroraparameters.html#cfn-quicksight-datasource-auroraparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-auroraparameters.html#cfn-quicksight-datasource-auroraparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-auroraparameters.html#cfn-quicksight-datasource-auroraparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AuroraParameters:
        from troposphere.quicksight import AuroraParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AuroraPostgreSqlParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-aurorapostgresqlparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-aurorapostgresqlparameters.html#cfn-quicksight-datasource-aurorapostgresqlparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-aurorapostgresqlparameters.html#cfn-quicksight-datasource-aurorapostgresqlparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-aurorapostgresqlparameters.html#cfn-quicksight-datasource-aurorapostgresqlparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AuroraPostgreSqlParameters:
        from troposphere.quicksight import AuroraPostgreSqlParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CredentialPair(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-credentialpair.html
    Properties:
        - Name: AlternateDataSourceParameters
        - Name: Username
        - Name: Password
    
    """
    
    AlternateDataSourceParameters_: Optional[List['DataSourceParameters']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-credentialpair.html#cfn-quicksight-datasource-credentialpair-alternatedatasourceparameters""", alias="AlternateDataSourceParameters")
    Username_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-credentialpair.html#cfn-quicksight-datasource-credentialpair-username""", alias="Username")
    Password_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-credentialpair.html#cfn-quicksight-datasource-credentialpair-password""", alias="Password")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CredentialPair:
        from troposphere.quicksight import CredentialPair as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSourceCredentials(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourcecredentials.html
    Properties:
        - Name: SecretArn
        - Name: CopySourceArn
        - Name: CredentialPair
    
    """
    
    SecretArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourcecredentials.html#cfn-quicksight-datasource-datasourcecredentials-secretarn""", alias="SecretArn")
    CopySourceArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourcecredentials.html#cfn-quicksight-datasource-datasourcecredentials-copysourcearn""", alias="CopySourceArn")
    CredentialPair_: Optional['CredentialPair'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourcecredentials.html#cfn-quicksight-datasource-datasourcecredentials-credentialpair""", alias="CredentialPair")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSourceCredentials:
        from troposphere.quicksight import DataSourceCredentials as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSourceErrorInfo(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceerrorinfo.html
    Properties:
        - Name: Type
        - Name: Message
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceerrorinfo.html#cfn-quicksight-datasource-datasourceerrorinfo-type""", alias="Type")
    Message_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceerrorinfo.html#cfn-quicksight-datasource-datasourceerrorinfo-message""", alias="Message")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSourceErrorInfo:
        from troposphere.quicksight import DataSourceErrorInfo as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSourceParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html
    Properties:
        - Name: AuroraPostgreSqlParameters
        - Name: TeradataParameters
        - Name: RdsParameters
        - Name: AthenaParameters
        - Name: SparkParameters
        - Name: MariaDbParameters
        - Name: OracleParameters
        - Name: PrestoParameters
        - Name: StarburstParameters
        - Name: RedshiftParameters
        - Name: MySqlParameters
        - Name: SqlServerParameters
        - Name: SnowflakeParameters
        - Name: AmazonElasticsearchParameters
        - Name: AmazonOpenSearchParameters
        - Name: PostgreSqlParameters
        - Name: AuroraParameters
        - Name: S3Parameters
        - Name: TrinoParameters
        - Name: DatabricksParameters
    
    """
    
    AuroraPostgreSqlParameters_: Optional['AuroraPostgreSqlParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-aurorapostgresqlparameters""", alias="AuroraPostgreSqlParameters")
    TeradataParameters_: Optional['TeradataParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-teradataparameters""", alias="TeradataParameters")
    RdsParameters_: Optional['RdsParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-rdsparameters""", alias="RdsParameters")
    AthenaParameters_: Optional['AthenaParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-athenaparameters""", alias="AthenaParameters")
    SparkParameters_: Optional['SparkParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-sparkparameters""", alias="SparkParameters")
    MariaDbParameters_: Optional['MariaDbParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-mariadbparameters""", alias="MariaDbParameters")
    OracleParameters_: Optional['OracleParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-oracleparameters""", alias="OracleParameters")
    PrestoParameters_: Optional['PrestoParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-prestoparameters""", alias="PrestoParameters")
    StarburstParameters_: Optional['StarburstParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-starburstparameters""", alias="StarburstParameters")
    RedshiftParameters_: Optional['RedshiftParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-redshiftparameters""", alias="RedshiftParameters")
    MySqlParameters_: Optional['MySqlParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-mysqlparameters""", alias="MySqlParameters")
    SqlServerParameters_: Optional['SqlServerParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-sqlserverparameters""", alias="SqlServerParameters")
    SnowflakeParameters_: Optional['SnowflakeParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-snowflakeparameters""", alias="SnowflakeParameters")
    AmazonElasticsearchParameters_: Optional['AmazonElasticsearchParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-amazonelasticsearchparameters""", alias="AmazonElasticsearchParameters")
    AmazonOpenSearchParameters_: Optional['AmazonOpenSearchParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-amazonopensearchparameters""", alias="AmazonOpenSearchParameters")
    PostgreSqlParameters_: Optional['PostgreSqlParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-postgresqlparameters""", alias="PostgreSqlParameters")
    AuroraParameters_: Optional['AuroraParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-auroraparameters""", alias="AuroraParameters")
    S3Parameters_: Optional['S3Parameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-s3parameters""", alias="S3Parameters")
    TrinoParameters_: Optional['TrinoParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-trinoparameters""", alias="TrinoParameters")
    DatabricksParameters_: Optional['DatabricksParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-datasourceparameters.html#cfn-quicksight-datasource-datasourceparameters-databricksparameters""", alias="DatabricksParameters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSourceParameters:
        from troposphere.quicksight import DataSourceParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DatabricksParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-databricksparameters.html
    Properties:
        - Name: Port
        - Name: Host
        - Name: SqlEndpointPath
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-databricksparameters.html#cfn-quicksight-datasource-databricksparameters-port""", alias="Port")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-databricksparameters.html#cfn-quicksight-datasource-databricksparameters-host""", alias="Host")
    SqlEndpointPath_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-databricksparameters.html#cfn-quicksight-datasource-databricksparameters-sqlendpointpath""", alias="SqlEndpointPath")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DatabricksParameters:
        from troposphere.quicksight import DatabricksParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ManifestFileLocation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-manifestfilelocation.html
    Properties:
        - Name: Bucket
        - Name: Key
    
    """
    
    Bucket_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-manifestfilelocation.html#cfn-quicksight-datasource-manifestfilelocation-bucket""", alias="Bucket")
    Key_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-manifestfilelocation.html#cfn-quicksight-datasource-manifestfilelocation-key""", alias="Key")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ManifestFileLocation:
        from troposphere.quicksight import ManifestFileLocation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MariaDbParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mariadbparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mariadbparameters.html#cfn-quicksight-datasource-mariadbparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mariadbparameters.html#cfn-quicksight-datasource-mariadbparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mariadbparameters.html#cfn-quicksight-datasource-mariadbparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MariaDbParameters:
        from troposphere.quicksight import MariaDbParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MySqlParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mysqlparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mysqlparameters.html#cfn-quicksight-datasource-mysqlparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mysqlparameters.html#cfn-quicksight-datasource-mysqlparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-mysqlparameters.html#cfn-quicksight-datasource-mysqlparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MySqlParameters:
        from troposphere.quicksight import MySqlParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class OracleParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-oracleparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-oracleparameters.html#cfn-quicksight-datasource-oracleparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-oracleparameters.html#cfn-quicksight-datasource-oracleparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-oracleparameters.html#cfn-quicksight-datasource-oracleparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.OracleParameters:
        from troposphere.quicksight import OracleParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PostgreSqlParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-postgresqlparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-postgresqlparameters.html#cfn-quicksight-datasource-postgresqlparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-postgresqlparameters.html#cfn-quicksight-datasource-postgresqlparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-postgresqlparameters.html#cfn-quicksight-datasource-postgresqlparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PostgreSqlParameters:
        from troposphere.quicksight import PostgreSqlParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PrestoParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-prestoparameters.html
    Properties:
        - Name: Port
        - Name: Host
        - Name: Catalog
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-prestoparameters.html#cfn-quicksight-datasource-prestoparameters-port""", alias="Port")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-prestoparameters.html#cfn-quicksight-datasource-prestoparameters-host""", alias="Host")
    Catalog_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-prestoparameters.html#cfn-quicksight-datasource-prestoparameters-catalog""", alias="Catalog")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PrestoParameters:
        from troposphere.quicksight import PrestoParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RdsParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-rdsparameters.html
    Properties:
        - Name: InstanceId
        - Name: Database
    
    """
    
    InstanceId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-rdsparameters.html#cfn-quicksight-datasource-rdsparameters-instanceid""", alias="InstanceId")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-rdsparameters.html#cfn-quicksight-datasource-rdsparameters-database""", alias="Database")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RdsParameters:
        from troposphere.quicksight import RdsParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RedshiftParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html
    Properties:
        - Name: ClusterId
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    ClusterId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html#cfn-quicksight-datasource-redshiftparameters-clusterid""", alias="ClusterId")
    Port_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html#cfn-quicksight-datasource-redshiftparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html#cfn-quicksight-datasource-redshiftparameters-database""", alias="Database")
    Host_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-redshiftparameters.html#cfn-quicksight-datasource-redshiftparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RedshiftParameters:
        from troposphere.quicksight import RedshiftParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-resourcepermission.html#cfn-quicksight-datasource-resourcepermission-actions""", alias="Actions")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-resourcepermission.html#cfn-quicksight-datasource-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class S3Parameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-s3parameters.html
    Properties:
        - Name: ManifestFileLocation
        - Name: RoleArn
    
    """
    
    ManifestFileLocation_: 'ManifestFileLocation' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-s3parameters.html#cfn-quicksight-datasource-s3parameters-manifestfilelocation""", alias="ManifestFileLocation")
    RoleArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-s3parameters.html#cfn-quicksight-datasource-s3parameters-rolearn""", alias="RoleArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.S3Parameters:
        from troposphere.quicksight import S3Parameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SnowflakeParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-snowflakeparameters.html
    Properties:
        - Name: Warehouse
        - Name: Database
        - Name: Host
    
    """
    
    Warehouse_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-snowflakeparameters.html#cfn-quicksight-datasource-snowflakeparameters-warehouse""", alias="Warehouse")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-snowflakeparameters.html#cfn-quicksight-datasource-snowflakeparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-snowflakeparameters.html#cfn-quicksight-datasource-snowflakeparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SnowflakeParameters:
        from troposphere.quicksight import SnowflakeParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SparkParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sparkparameters.html
    Properties:
        - Name: Port
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sparkparameters.html#cfn-quicksight-datasource-sparkparameters-port""", alias="Port")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sparkparameters.html#cfn-quicksight-datasource-sparkparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SparkParameters:
        from troposphere.quicksight import SparkParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SqlServerParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sqlserverparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sqlserverparameters.html#cfn-quicksight-datasource-sqlserverparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sqlserverparameters.html#cfn-quicksight-datasource-sqlserverparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sqlserverparameters.html#cfn-quicksight-datasource-sqlserverparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SqlServerParameters:
        from troposphere.quicksight import SqlServerParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SslProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sslproperties.html
    Properties:
        - Name: DisableSsl
    
    """
    
    DisableSsl_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-sslproperties.html#cfn-quicksight-datasource-sslproperties-disablessl""", alias="DisableSsl")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SslProperties:
        from troposphere.quicksight import SslProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StarburstParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-starburstparameters.html
    Properties:
        - Name: Port
        - Name: ProductType
        - Name: Host
        - Name: Catalog
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-starburstparameters.html#cfn-quicksight-datasource-starburstparameters-port""", alias="Port")
    ProductType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-starburstparameters.html#cfn-quicksight-datasource-starburstparameters-producttype""", alias="ProductType")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-starburstparameters.html#cfn-quicksight-datasource-starburstparameters-host""", alias="Host")
    Catalog_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-starburstparameters.html#cfn-quicksight-datasource-starburstparameters-catalog""", alias="Catalog")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StarburstParameters:
        from troposphere.quicksight import StarburstParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TeradataParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-teradataparameters.html
    Properties:
        - Name: Port
        - Name: Database
        - Name: Host
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-teradataparameters.html#cfn-quicksight-datasource-teradataparameters-port""", alias="Port")
    Database_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-teradataparameters.html#cfn-quicksight-datasource-teradataparameters-database""", alias="Database")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-teradataparameters.html#cfn-quicksight-datasource-teradataparameters-host""", alias="Host")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TeradataParameters:
        from troposphere.quicksight import TeradataParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TrinoParameters(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-trinoparameters.html
    Properties:
        - Name: Port
        - Name: Host
        - Name: Catalog
    
    """
    
    Port_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-trinoparameters.html#cfn-quicksight-datasource-trinoparameters-port""", alias="Port")
    Host_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-trinoparameters.html#cfn-quicksight-datasource-trinoparameters-host""", alias="Host")
    Catalog_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-trinoparameters.html#cfn-quicksight-datasource-trinoparameters-catalog""", alias="Catalog")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TrinoParameters:
        from troposphere.quicksight import TrinoParameters as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VpcConnectionProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-vpcconnectionproperties.html
    Properties:
        - Name: VpcConnectionArn
    
    """
    
    VpcConnectionArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-datasource-vpcconnectionproperties.html#cfn-quicksight-datasource-vpcconnectionproperties-vpcconnectionarn""", alias="VpcConnectionArn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VpcConnectionProperties:
        from troposphere.quicksight import VpcConnectionProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RefreshOnDay(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshonday.html
    Properties:
        - Name: DayOfWeek
        - Name: DayOfMonth
    
    """
    
    DayOfWeek_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshonday.html#cfn-quicksight-refreshschedule-refreshonday-dayofweek""", alias="DayOfWeek")
    DayOfMonth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshonday.html#cfn-quicksight-refreshschedule-refreshonday-dayofmonth""", alias="DayOfMonth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RefreshOnDay:
        from troposphere.quicksight import RefreshOnDay as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RefreshScheduleMap(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html
    Properties:
        - Name: StartAfterDateTime
        - Name: ScheduleId
        - Name: ScheduleFrequency
        - Name: RefreshType
    
    """
    
    StartAfterDateTime_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html#cfn-quicksight-refreshschedule-refreshschedulemap-startafterdatetime""", alias="StartAfterDateTime")
    ScheduleId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html#cfn-quicksight-refreshschedule-refreshschedulemap-scheduleid""", alias="ScheduleId")
    ScheduleFrequency_: Optional['ScheduleFrequency'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html#cfn-quicksight-refreshschedule-refreshschedulemap-schedulefrequency""", alias="ScheduleFrequency")
    RefreshType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-refreshschedulemap.html#cfn-quicksight-refreshschedule-refreshschedulemap-refreshtype""", alias="RefreshType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RefreshScheduleMap:
        from troposphere.quicksight import RefreshScheduleMap as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScheduleFrequency(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html
    Properties:
        - Name: TimeZone
        - Name: RefreshOnDay
        - Name: TimeOfTheDay
        - Name: Interval
    
    """
    
    TimeZone_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html#cfn-quicksight-refreshschedule-schedulefrequency-timezone""", alias="TimeZone")
    RefreshOnDay_: Optional['RefreshOnDay'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html#cfn-quicksight-refreshschedule-schedulefrequency-refreshonday""", alias="RefreshOnDay")
    TimeOfTheDay_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html#cfn-quicksight-refreshschedule-schedulefrequency-timeoftheday""", alias="TimeOfTheDay")
    Interval_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-refreshschedule-schedulefrequency.html#cfn-quicksight-refreshschedule-schedulefrequency-interval""", alias="Interval")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScheduleFrequency:
        from troposphere.quicksight import ScheduleFrequency as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html
    Properties:
        - Name: AttributeAggregationFunction
        - Name: DateAggregationFunction
        - Name: NumericalAggregationFunction
        - Name: CategoricalAggregationFunction
    
    """
    
    AttributeAggregationFunction_: Optional['AttributeAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html#cfn-quicksight-template-aggregationfunction-attributeaggregationfunction""", alias="AttributeAggregationFunction")
    DateAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html#cfn-quicksight-template-aggregationfunction-dateaggregationfunction""", alias="DateAggregationFunction")
    NumericalAggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html#cfn-quicksight-template-aggregationfunction-numericalaggregationfunction""", alias="NumericalAggregationFunction")
    CategoricalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationfunction.html#cfn-quicksight-template-aggregationfunction-categoricalaggregationfunction""", alias="CategoricalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationFunction:
        from troposphere.quicksight import AggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AggregationSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationsortconfiguration.html
    Properties:
        - Name: AggregationFunction
        - Name: SortDirection
        - Name: Column
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationsortconfiguration.html#cfn-quicksight-template-aggregationsortconfiguration-aggregationfunction""", alias="AggregationFunction")
    SortDirection_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationsortconfiguration.html#cfn-quicksight-template-aggregationsortconfiguration-sortdirection""", alias="SortDirection")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-aggregationsortconfiguration.html#cfn-quicksight-template-aggregationsortconfiguration-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AggregationSortConfiguration:
        from troposphere.quicksight import AggregationSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnalysisDefaults(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-analysisdefaults.html
    Properties:
        - Name: DefaultNewSheetConfiguration
    
    """
    
    DefaultNewSheetConfiguration_: 'DefaultNewSheetConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-analysisdefaults.html#cfn-quicksight-template-analysisdefaults-defaultnewsheetconfiguration""", alias="DefaultNewSheetConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnalysisDefaults:
        from troposphere.quicksight import AnalysisDefaults as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AnchorDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-anchordateconfiguration.html
    Properties:
        - Name: AnchorOption
        - Name: ParameterName
    
    """
    
    AnchorOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-anchordateconfiguration.html#cfn-quicksight-template-anchordateconfiguration-anchoroption""", alias="AnchorOption")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-anchordateconfiguration.html#cfn-quicksight-template-anchordateconfiguration-parametername""", alias="ParameterName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AnchorDateConfiguration:
        from troposphere.quicksight import AnchorDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisconfiguration.html
    Properties:
        - Name: Range
        - Name: ReserveRange
    
    """
    
    Range_: Optional['ArcAxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisconfiguration.html#cfn-quicksight-template-arcaxisconfiguration-range""", alias="Range")
    ReserveRange_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisconfiguration.html#cfn-quicksight-template-arcaxisconfiguration-reserverange""", alias="ReserveRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisConfiguration:
        from troposphere.quicksight import ArcAxisConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcAxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisdisplayrange.html
    Properties:
        - Name: Min
        - Name: Max
    
    """
    
    Min_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisdisplayrange.html#cfn-quicksight-template-arcaxisdisplayrange-min""", alias="Min")
    Max_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcaxisdisplayrange.html#cfn-quicksight-template-arcaxisdisplayrange-max""", alias="Max")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcAxisDisplayRange:
        from troposphere.quicksight import ArcAxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcconfiguration.html
    Properties:
        - Name: ArcAngle
        - Name: ArcThickness
    
    """
    
    ArcAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcconfiguration.html#cfn-quicksight-template-arcconfiguration-arcangle""", alias="ArcAngle")
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcconfiguration.html#cfn-quicksight-template-arcconfiguration-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcConfiguration:
        from troposphere.quicksight import ArcConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ArcOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcoptions.html
    Properties:
        - Name: ArcThickness
    
    """
    
    ArcThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-arcoptions.html#cfn-quicksight-template-arcoptions-arcthickness""", alias="ArcThickness")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ArcOptions:
        from troposphere.quicksight import ArcOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AssetOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-assetoptions.html
    Properties:
        - Name: Timezone
        - Name: WeekStart
    
    """
    
    Timezone_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-assetoptions.html#cfn-quicksight-template-assetoptions-timezone""", alias="Timezone")
    WeekStart_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-assetoptions.html#cfn-quicksight-template-assetoptions-weekstart""", alias="WeekStart")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AssetOptions:
        from troposphere.quicksight import AssetOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AttributeAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-attributeaggregationfunction.html
    Properties:
        - Name: SimpleAttributeAggregation
        - Name: ValueForMultipleValues
    
    """
    
    SimpleAttributeAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-attributeaggregationfunction.html#cfn-quicksight-template-attributeaggregationfunction-simpleattributeaggregation""", alias="SimpleAttributeAggregation")
    ValueForMultipleValues_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-attributeaggregationfunction.html#cfn-quicksight-template-attributeaggregationfunction-valueformultiplevalues""", alias="ValueForMultipleValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AttributeAggregationFunction:
        from troposphere.quicksight import AttributeAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDataOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdataoptions.html
    Properties:
        - Name: DateAxisOptions
        - Name: NumericAxisOptions
    
    """
    
    DateAxisOptions_: Optional['DateAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdataoptions.html#cfn-quicksight-template-axisdataoptions-dateaxisoptions""", alias="DateAxisOptions")
    NumericAxisOptions_: Optional['NumericAxisOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdataoptions.html#cfn-quicksight-template-axisdataoptions-numericaxisoptions""", alias="NumericAxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDataOptions:
        from troposphere.quicksight import AxisDataOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayMinMaxRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayminmaxrange.html
    Properties:
        - Name: Minimum
        - Name: Maximum
    
    """
    
    Minimum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayminmaxrange.html#cfn-quicksight-template-axisdisplayminmaxrange-minimum""", alias="Minimum")
    Maximum_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayminmaxrange.html#cfn-quicksight-template-axisdisplayminmaxrange-maximum""", alias="Maximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayMinMaxRange:
        from troposphere.quicksight import AxisDisplayMinMaxRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html
    Properties:
        - Name: DataOptions
        - Name: TickLabelOptions
        - Name: AxisOffset
        - Name: AxisLineVisibility
        - Name: GridLineVisibility
        - Name: ScrollbarOptions
    
    """
    
    DataOptions_: Optional['AxisDataOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-dataoptions""", alias="DataOptions")
    TickLabelOptions_: Optional['AxisTickLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-ticklabeloptions""", alias="TickLabelOptions")
    AxisOffset_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-axisoffset""", alias="AxisOffset")
    AxisLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-axislinevisibility""", alias="AxisLineVisibility")
    GridLineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-gridlinevisibility""", alias="GridLineVisibility")
    ScrollbarOptions_: Optional['ScrollBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayoptions.html#cfn-quicksight-template-axisdisplayoptions-scrollbaroptions""", alias="ScrollbarOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayOptions:
        from troposphere.quicksight import AxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisDisplayRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayrange.html
    Properties:
        - Name: DataDriven
        - Name: MinMax
    
    """
    
    DataDriven_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayrange.html#cfn-quicksight-template-axisdisplayrange-datadriven""", alias="DataDriven")
    MinMax_: Optional['AxisDisplayMinMaxRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisdisplayrange.html#cfn-quicksight-template-axisdisplayrange-minmax""", alias="MinMax")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisDisplayRange:
        from troposphere.quicksight import AxisDisplayRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: ApplyTo
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabeloptions.html#cfn-quicksight-template-axislabeloptions-customlabel""", alias="CustomLabel")
    ApplyTo_: Optional['AxisLabelReferenceOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabeloptions.html#cfn-quicksight-template-axislabeloptions-applyto""", alias="ApplyTo")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabeloptions.html#cfn-quicksight-template-axislabeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelOptions:
        from troposphere.quicksight import AxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLabelReferenceOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabelreferenceoptions.html
    Properties:
        - Name: Column
        - Name: FieldId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabelreferenceoptions.html#cfn-quicksight-template-axislabelreferenceoptions-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislabelreferenceoptions.html#cfn-quicksight-template-axislabelreferenceoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLabelReferenceOptions:
        from troposphere.quicksight import AxisLabelReferenceOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLinearScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislinearscale.html
    Properties:
        - Name: StepSize
        - Name: StepCount
    
    """
    
    StepSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislinearscale.html#cfn-quicksight-template-axislinearscale-stepsize""", alias="StepSize")
    StepCount_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislinearscale.html#cfn-quicksight-template-axislinearscale-stepcount""", alias="StepCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLinearScale:
        from troposphere.quicksight import AxisLinearScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisLogarithmicScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislogarithmicscale.html
    Properties:
        - Name: Base
    
    """
    
    Base_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axislogarithmicscale.html#cfn-quicksight-template-axislogarithmicscale-base""", alias="Base")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisLogarithmicScale:
        from troposphere.quicksight import AxisLogarithmicScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisscale.html
    Properties:
        - Name: Logarithmic
        - Name: Linear
    
    """
    
    Logarithmic_: Optional['AxisLogarithmicScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisscale.html#cfn-quicksight-template-axisscale-logarithmic""", alias="Logarithmic")
    Linear_: Optional['AxisLinearScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisscale.html#cfn-quicksight-template-axisscale-linear""", alias="Linear")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisScale:
        from troposphere.quicksight import AxisScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class AxisTickLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisticklabeloptions.html
    Properties:
        - Name: RotationAngle
        - Name: LabelOptions
    
    """
    
    RotationAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisticklabeloptions.html#cfn-quicksight-template-axisticklabeloptions-rotationangle""", alias="RotationAngle")
    LabelOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-axisticklabeloptions.html#cfn-quicksight-template-axisticklabeloptions-labeloptions""", alias="LabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.AxisTickLabelOptions:
        from troposphere.quicksight import AxisTickLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html#cfn-quicksight-template-barchartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html#cfn-quicksight-template-barchartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html#cfn-quicksight-template-barchartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartaggregatedfieldwells.html#cfn-quicksight-template-barchartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartAggregatedFieldWells:
        from troposphere.quicksight import BarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: Orientation
        - Name: VisualPalette
        - Name: ValueLabelOptions
        - Name: BarsArrangement
        - Name: CategoryAxis
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: ValueAxis
    
    """
    
    SortConfiguration_: Optional['BarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-orientation""", alias="Orientation")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-visualpalette""", alias="VisualPalette")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-barsarrangement""", alias="BarsArrangement")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-categoryaxis""", alias="CategoryAxis")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['BarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-fieldwells""", alias="FieldWells")
    ValueAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartconfiguration.html#cfn-quicksight-template-barchartconfiguration-valueaxis""", alias="ValueAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartConfiguration:
        from troposphere.quicksight import BarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartfieldwells.html
    Properties:
        - Name: BarChartAggregatedFieldWells
    
    """
    
    BarChartAggregatedFieldWells_: Optional['BarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartfieldwells.html#cfn-quicksight-template-barchartfieldwells-barchartaggregatedfieldwells""", alias="BarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartFieldWells:
        from troposphere.quicksight import BarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartsortconfiguration.html#cfn-quicksight-template-barchartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartSortConfiguration:
        from troposphere.quicksight import BarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-barchartvisual.html#cfn-quicksight-template-barchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BarChartVisual:
        from troposphere.quicksight import BarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinCountOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bincountoptions.html
    Properties:
        - Name: Value
    
    """
    
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bincountoptions.html#cfn-quicksight-template-bincountoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinCountOptions:
        from troposphere.quicksight import BinCountOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BinWidthOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-binwidthoptions.html
    Properties:
        - Name: BinCountLimit
        - Name: Value
    
    """
    
    BinCountLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-binwidthoptions.html#cfn-quicksight-template-binwidthoptions-bincountlimit""", alias="BinCountLimit")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-binwidthoptions.html#cfn-quicksight-template-binwidthoptions-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BinWidthOptions:
        from troposphere.quicksight import BinWidthOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html
    Properties:
        - Name: Content
        - Name: Style
        - Name: PageBreakConfiguration
        - Name: SectionId
    
    """
    
    Content_: 'BodySectionContent' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html#cfn-quicksight-template-bodysectionconfiguration-content""", alias="Content")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html#cfn-quicksight-template-bodysectionconfiguration-style""", alias="Style")
    PageBreakConfiguration_: Optional['SectionPageBreakConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html#cfn-quicksight-template-bodysectionconfiguration-pagebreakconfiguration""", alias="PageBreakConfiguration")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectionconfiguration.html#cfn-quicksight-template-bodysectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionConfiguration:
        from troposphere.quicksight import BodySectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BodySectionContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectioncontent.html
    Properties:
        - Name: Layout
    
    """
    
    Layout_: Optional['SectionLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-bodysectioncontent.html#cfn-quicksight-template-bodysectioncontent-layout""", alias="Layout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BodySectionContent:
        from troposphere.quicksight import BodySectionContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotaggregatedfieldwells.html#cfn-quicksight-template-boxplotaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotaggregatedfieldwells.html#cfn-quicksight-template-boxplotaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotAggregatedFieldWells:
        from troposphere.quicksight import BoxPlotAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: BoxPlotOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['BoxPlotSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-referencelines""", alias="ReferenceLines")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['BoxPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-tooltip""", alias="Tooltip")
    BoxPlotOptions_: Optional['BoxPlotOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-boxplotoptions""", alias="BoxPlotOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotchartconfiguration.html#cfn-quicksight-template-boxplotchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotChartConfiguration:
        from troposphere.quicksight import BoxPlotChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotfieldwells.html
    Properties:
        - Name: BoxPlotAggregatedFieldWells
    
    """
    
    BoxPlotAggregatedFieldWells_: Optional['BoxPlotAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotfieldwells.html#cfn-quicksight-template-boxplotfieldwells-boxplotaggregatedfieldwells""", alias="BoxPlotAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotFieldWells:
        from troposphere.quicksight import BoxPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotoptions.html
    Properties:
        - Name: StyleOptions
        - Name: OutlierVisibility
        - Name: AllDataPointsVisibility
    
    """
    
    StyleOptions_: Optional['BoxPlotStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotoptions.html#cfn-quicksight-template-boxplotoptions-styleoptions""", alias="StyleOptions")
    OutlierVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotoptions.html#cfn-quicksight-template-boxplotoptions-outliervisibility""", alias="OutlierVisibility")
    AllDataPointsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotoptions.html#cfn-quicksight-template-boxplotoptions-alldatapointsvisibility""", alias="AllDataPointsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotOptions:
        from troposphere.quicksight import BoxPlotOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotsortconfiguration.html
    Properties:
        - Name: CategorySort
        - Name: PaginationConfiguration
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotsortconfiguration.html#cfn-quicksight-template-boxplotsortconfiguration-categorysort""", alias="CategorySort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotsortconfiguration.html#cfn-quicksight-template-boxplotsortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotSortConfiguration:
        from troposphere.quicksight import BoxPlotSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotstyleoptions.html
    Properties:
        - Name: FillStyle
    
    """
    
    FillStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotstyleoptions.html#cfn-quicksight-template-boxplotstyleoptions-fillstyle""", alias="FillStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotStyleOptions:
        from troposphere.quicksight import BoxPlotStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BoxPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['BoxPlotChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-boxplotvisual.html#cfn-quicksight-template-boxplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BoxPlotVisual:
        from troposphere.quicksight import BoxPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedfield.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
        - Name: Name
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedfield.html#cfn-quicksight-template-calculatedfield-expression""", alias="Expression")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedfield.html#cfn-quicksight-template-calculatedfield-datasetidentifier""", alias="DataSetIdentifier")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedfield.html#cfn-quicksight-template-calculatedfield-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedField:
        from troposphere.quicksight import CalculatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CalculatedMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedmeasurefield.html
    Properties:
        - Name: Expression
        - Name: FieldId
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedmeasurefield.html#cfn-quicksight-template-calculatedmeasurefield-expression""", alias="Expression")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-calculatedmeasurefield.html#cfn-quicksight-template-calculatedmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CalculatedMeasureField:
        from troposphere.quicksight import CalculatedMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolconfiguration.html
    Properties:
        - Name: SourceControls
    
    """
    
    SourceControls_: Optional[List['CascadingControlSource']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolconfiguration.html#cfn-quicksight-template-cascadingcontrolconfiguration-sourcecontrols""", alias="SourceControls")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlConfiguration:
        from troposphere.quicksight import CascadingControlConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CascadingControlSource(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolsource.html
    Properties:
        - Name: SourceSheetControlId
        - Name: ColumnToMatch
    
    """
    
    SourceSheetControlId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolsource.html#cfn-quicksight-template-cascadingcontrolsource-sourcesheetcontrolid""", alias="SourceSheetControlId")
    ColumnToMatch_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-cascadingcontrolsource.html#cfn-quicksight-template-cascadingcontrolsource-columntomatch""", alias="ColumnToMatch")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CascadingControlSource:
        from troposphere.quicksight import CascadingControlSource as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html#cfn-quicksight-template-categoricaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html#cfn-quicksight-template-categoricaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html#cfn-quicksight-template-categoricaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricaldimensionfield.html#cfn-quicksight-template-categoricaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalDimensionField:
        from troposphere.quicksight import CategoricalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoricalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html#cfn-quicksight-template-categoricalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html#cfn-quicksight-template-categoricalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html#cfn-quicksight-template-categoricalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoricalmeasurefield.html#cfn-quicksight-template-categoricalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoricalMeasureField:
        from troposphere.quicksight import CategoricalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categorydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: CategoryValues
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categorydrilldownfilter.html#cfn-quicksight-template-categorydrilldownfilter-column""", alias="Column")
    CategoryValues_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categorydrilldownfilter.html#cfn-quicksight-template-categorydrilldownfilter-categoryvalues""", alias="CategoryValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryDrillDownFilter:
        from troposphere.quicksight import CategoryDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilter.html
    Properties:
        - Name: Configuration
        - Name: Column
        - Name: FilterId
    
    """
    
    Configuration_: 'CategoryFilterConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilter.html#cfn-quicksight-template-categoryfilter-configuration""", alias="Configuration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilter.html#cfn-quicksight-template-categoryfilter-column""", alias="Column")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilter.html#cfn-quicksight-template-categoryfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilter:
        from troposphere.quicksight import CategoryFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CategoryFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilterconfiguration.html
    Properties:
        - Name: CustomFilterListConfiguration
        - Name: CustomFilterConfiguration
        - Name: FilterListConfiguration
    
    """
    
    CustomFilterListConfiguration_: Optional['CustomFilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilterconfiguration.html#cfn-quicksight-template-categoryfilterconfiguration-customfilterlistconfiguration""", alias="CustomFilterListConfiguration")
    CustomFilterConfiguration_: Optional['CustomFilterConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilterconfiguration.html#cfn-quicksight-template-categoryfilterconfiguration-customfilterconfiguration""", alias="CustomFilterConfiguration")
    FilterListConfiguration_: Optional['FilterListConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-categoryfilterconfiguration.html#cfn-quicksight-template-categoryfilterconfiguration-filterlistconfiguration""", alias="FilterListConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CategoryFilterConfiguration:
        from troposphere.quicksight import CategoryFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ChartAxisLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-chartaxislabeloptions.html
    Properties:
        - Name: Visibility
        - Name: SortIconVisibility
        - Name: AxisLabelOptions
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-chartaxislabeloptions.html#cfn-quicksight-template-chartaxislabeloptions-visibility""", alias="Visibility")
    SortIconVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-chartaxislabeloptions.html#cfn-quicksight-template-chartaxislabeloptions-sorticonvisibility""", alias="SortIconVisibility")
    AxisLabelOptions_: Optional[List['AxisLabelOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-chartaxislabeloptions.html#cfn-quicksight-template-chartaxislabeloptions-axislabeloptions""", alias="AxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ChartAxisLabelOptions:
        from troposphere.quicksight import ChartAxisLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarker.html
    Properties:
        - Name: SimpleClusterMarker
    
    """
    
    SimpleClusterMarker_: Optional['SimpleClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarker.html#cfn-quicksight-template-clustermarker-simpleclustermarker""", alias="SimpleClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarker:
        from troposphere.quicksight import ClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ClusterMarkerConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarkerconfiguration.html
    Properties:
        - Name: ClusterMarker
    
    """
    
    ClusterMarker_: Optional['ClusterMarker'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-clustermarkerconfiguration.html#cfn-quicksight-template-clustermarkerconfiguration-clustermarker""", alias="ClusterMarker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ClusterMarkerConfiguration:
        from troposphere.quicksight import ClusterMarkerConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorscale.html
    Properties:
        - Name: Colors
        - Name: ColorFillType
        - Name: NullValueColor
    
    """
    
    Colors_: List['DataColor'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorscale.html#cfn-quicksight-template-colorscale-colors""", alias="Colors")
    ColorFillType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorscale.html#cfn-quicksight-template-colorscale-colorfilltype""", alias="ColorFillType")
    NullValueColor_: Optional['DataColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorscale.html#cfn-quicksight-template-colorscale-nullvaluecolor""", alias="NullValueColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorScale:
        from troposphere.quicksight import ColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColorsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorsconfiguration.html
    Properties:
        - Name: CustomColors
    
    """
    
    CustomColors_: Optional[List['CustomColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-colorsconfiguration.html#cfn-quicksight-template-colorsconfiguration-customcolors""", alias="CustomColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColorsConfiguration:
        from troposphere.quicksight import ColorsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html
    Properties:
        - Name: Role
        - Name: FormatConfiguration
        - Name: Column
        - Name: ColorsConfiguration
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html#cfn-quicksight-template-columnconfiguration-role""", alias="Role")
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html#cfn-quicksight-template-columnconfiguration-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html#cfn-quicksight-template-columnconfiguration-column""", alias="Column")
    ColorsConfiguration_: Optional['ColorsConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnconfiguration.html#cfn-quicksight-template-columnconfiguration-colorsconfiguration""", alias="ColorsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnConfiguration:
        from troposphere.quicksight import ColumnConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnGroupColumnSchema(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupcolumnschema.html
    Properties:
        - Name: Name
    
    """
    
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupcolumnschema.html#cfn-quicksight-template-columngroupcolumnschema-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnGroupColumnSchema:
        from troposphere.quicksight import ColumnGroupColumnSchema as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnGroupSchema(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupschema.html
    Properties:
        - Name: ColumnGroupColumnSchemaList
        - Name: Name
    
    """
    
    ColumnGroupColumnSchemaList_: Optional[List['ColumnGroupColumnSchema']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupschema.html#cfn-quicksight-template-columngroupschema-columngroupcolumnschemalist""", alias="ColumnGroupColumnSchemaList")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columngroupschema.html#cfn-quicksight-template-columngroupschema-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnGroupSchema:
        from troposphere.quicksight import ColumnGroupSchema as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnhierarchy.html
    Properties:
        - Name: DateTimeHierarchy
        - Name: ExplicitHierarchy
        - Name: PredefinedHierarchy
    
    """
    
    DateTimeHierarchy_: Optional['DateTimeHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnhierarchy.html#cfn-quicksight-template-columnhierarchy-datetimehierarchy""", alias="DateTimeHierarchy")
    ExplicitHierarchy_: Optional['ExplicitHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnhierarchy.html#cfn-quicksight-template-columnhierarchy-explicithierarchy""", alias="ExplicitHierarchy")
    PredefinedHierarchy_: Optional['PredefinedHierarchy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnhierarchy.html#cfn-quicksight-template-columnhierarchy-predefinedhierarchy""", alias="PredefinedHierarchy")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnHierarchy:
        from troposphere.quicksight import ColumnHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnIdentifier(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnidentifier.html
    Properties:
        - Name: ColumnName
        - Name: DataSetIdentifier
    
    """
    
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnidentifier.html#cfn-quicksight-template-columnidentifier-columnname""", alias="ColumnName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnidentifier.html#cfn-quicksight-template-columnidentifier-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnIdentifier:
        from troposphere.quicksight import ColumnIdentifier as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnSchema(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnschema.html
    Properties:
        - Name: DataType
        - Name: GeographicRole
        - Name: Name
    
    """
    
    DataType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnschema.html#cfn-quicksight-template-columnschema-datatype""", alias="DataType")
    GeographicRole_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnschema.html#cfn-quicksight-template-columnschema-geographicrole""", alias="GeographicRole")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnschema.html#cfn-quicksight-template-columnschema-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnSchema:
        from troposphere.quicksight import ColumnSchema as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnsort.html
    Properties:
        - Name: AggregationFunction
        - Name: SortBy
        - Name: Direction
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnsort.html#cfn-quicksight-template-columnsort-aggregationfunction""", alias="AggregationFunction")
    SortBy_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnsort.html#cfn-quicksight-template-columnsort-sortby""", alias="SortBy")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columnsort.html#cfn-quicksight-template-columnsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnSort:
        from troposphere.quicksight import ColumnSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ColumnTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html
    Properties:
        - Name: Aggregation
        - Name: Column
        - Name: Label
        - Name: Visibility
    
    """
    
    Aggregation_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html#cfn-quicksight-template-columntooltipitem-aggregation""", alias="Aggregation")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html#cfn-quicksight-template-columntooltipitem-column""", alias="Column")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html#cfn-quicksight-template-columntooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-columntooltipitem.html#cfn-quicksight-template-columntooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ColumnTooltipItem:
        from troposphere.quicksight import ColumnTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html
    Properties:
        - Name: BarValues
        - Name: Category
        - Name: Colors
        - Name: LineValues
    
    """
    
    BarValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html#cfn-quicksight-template-combochartaggregatedfieldwells-barvalues""", alias="BarValues")
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html#cfn-quicksight-template-combochartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html#cfn-quicksight-template-combochartaggregatedfieldwells-colors""", alias="Colors")
    LineValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartaggregatedfieldwells.html#cfn-quicksight-template-combochartaggregatedfieldwells-linevalues""", alias="LineValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartAggregatedFieldWells:
        from troposphere.quicksight import ComboChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: ColorLabelOptions
        - Name: BarDataLabels
        - Name: CategoryLabelOptions
        - Name: Tooltip
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: BarsArrangement
        - Name: SecondaryYAxisLabelOptions
        - Name: LineDataLabels
        - Name: CategoryAxis
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
    
    """
    
    SortConfiguration_: Optional['ComboChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-referencelines""", alias="ReferenceLines")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    BarDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-bardatalabels""", alias="BarDataLabels")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-tooltip""", alias="Tooltip")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-visualpalette""", alias="VisualPalette")
    BarsArrangement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-barsarrangement""", alias="BarsArrangement")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    LineDataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-linedatalabels""", alias="LineDataLabels")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-categoryaxis""", alias="CategoryAxis")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['ComboChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartconfiguration.html#cfn-quicksight-template-combochartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartConfiguration:
        from troposphere.quicksight import ComboChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartfieldwells.html
    Properties:
        - Name: ComboChartAggregatedFieldWells
    
    """
    
    ComboChartAggregatedFieldWells_: Optional['ComboChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartfieldwells.html#cfn-quicksight-template-combochartfieldwells-combochartaggregatedfieldwells""", alias="ComboChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartFieldWells:
        from troposphere.quicksight import ComboChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html#cfn-quicksight-template-combochartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html#cfn-quicksight-template-combochartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html#cfn-quicksight-template-combochartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartsortconfiguration.html#cfn-quicksight-template-combochartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartSortConfiguration:
        from troposphere.quicksight import ComboChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComboChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ComboChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-combochartvisual.html#cfn-quicksight-template-combochartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComboChartVisual:
        from troposphere.quicksight import ComboChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonconfiguration.html
    Properties:
        - Name: ComparisonMethod
        - Name: ComparisonFormat
    
    """
    
    ComparisonMethod_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonconfiguration.html#cfn-quicksight-template-comparisonconfiguration-comparisonmethod""", alias="ComparisonMethod")
    ComparisonFormat_: Optional['ComparisonFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonconfiguration.html#cfn-quicksight-template-comparisonconfiguration-comparisonformat""", alias="ComparisonFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonConfiguration:
        from troposphere.quicksight import ComparisonConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparisonFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonformatconfiguration.html#cfn-quicksight-template-comparisonformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-comparisonformatconfiguration.html#cfn-quicksight-template-comparisonformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparisonFormatConfiguration:
        from troposphere.quicksight import ComparisonFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Computation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html
    Properties:
        - Name: PeriodToDate
        - Name: GrowthRate
        - Name: TopBottomRanked
        - Name: TotalAggregation
        - Name: Forecast
        - Name: MaximumMinimum
        - Name: PeriodOverPeriod
        - Name: MetricComparison
        - Name: TopBottomMovers
        - Name: UniqueValues
    
    """
    
    PeriodToDate_: Optional['PeriodToDateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-periodtodate""", alias="PeriodToDate")
    GrowthRate_: Optional['GrowthRateComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-growthrate""", alias="GrowthRate")
    TopBottomRanked_: Optional['TopBottomRankedComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-topbottomranked""", alias="TopBottomRanked")
    TotalAggregation_: Optional['TotalAggregationComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-totalaggregation""", alias="TotalAggregation")
    Forecast_: Optional['ForecastComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-forecast""", alias="Forecast")
    MaximumMinimum_: Optional['MaximumMinimumComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-maximumminimum""", alias="MaximumMinimum")
    PeriodOverPeriod_: Optional['PeriodOverPeriodComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-periodoverperiod""", alias="PeriodOverPeriod")
    MetricComparison_: Optional['MetricComparisonComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-metriccomparison""", alias="MetricComparison")
    TopBottomMovers_: Optional['TopBottomMoversComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-topbottommovers""", alias="TopBottomMovers")
    UniqueValues_: Optional['UniqueValuesComputation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-computation.html#cfn-quicksight-template-computation-uniquevalues""", alias="UniqueValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Computation:
        from troposphere.quicksight import Computation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcolor.html
    Properties:
        - Name: Gradient
        - Name: Solid
    
    """
    
    Gradient_: Optional['ConditionalFormattingGradientColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcolor.html#cfn-quicksight-template-conditionalformattingcolor-gradient""", alias="Gradient")
    Solid_: Optional['ConditionalFormattingSolidColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcolor.html#cfn-quicksight-template-conditionalformattingcolor-solid""", alias="Solid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingColor:
        from troposphere.quicksight import ConditionalFormattingColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconCondition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html
    Properties:
        - Name: Expression
        - Name: Color
        - Name: DisplayConfiguration
        - Name: IconOptions
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html#cfn-quicksight-template-conditionalformattingcustomiconcondition-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html#cfn-quicksight-template-conditionalformattingcustomiconcondition-color""", alias="Color")
    DisplayConfiguration_: Optional['ConditionalFormattingIconDisplayConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html#cfn-quicksight-template-conditionalformattingcustomiconcondition-displayconfiguration""", alias="DisplayConfiguration")
    IconOptions_: 'ConditionalFormattingCustomIconOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconcondition.html#cfn-quicksight-template-conditionalformattingcustomiconcondition-iconoptions""", alias="IconOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconCondition:
        from troposphere.quicksight import ConditionalFormattingCustomIconCondition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingCustomIconOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconoptions.html
    Properties:
        - Name: UnicodeIcon
        - Name: Icon
    
    """
    
    UnicodeIcon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconoptions.html#cfn-quicksight-template-conditionalformattingcustomiconoptions-unicodeicon""", alias="UnicodeIcon")
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingcustomiconoptions.html#cfn-quicksight-template-conditionalformattingcustomiconoptions-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingCustomIconOptions:
        from troposphere.quicksight import ConditionalFormattingCustomIconOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingGradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattinggradientcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattinggradientcolor.html#cfn-quicksight-template-conditionalformattinggradientcolor-expression""", alias="Expression")
    Color_: 'GradientColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattinggradientcolor.html#cfn-quicksight-template-conditionalformattinggradientcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingGradientColor:
        from troposphere.quicksight import ConditionalFormattingGradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIcon(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicon.html
    Properties:
        - Name: CustomCondition
        - Name: IconSet
    
    """
    
    CustomCondition_: Optional['ConditionalFormattingCustomIconCondition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicon.html#cfn-quicksight-template-conditionalformattingicon-customcondition""", alias="CustomCondition")
    IconSet_: Optional['ConditionalFormattingIconSet'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicon.html#cfn-quicksight-template-conditionalformattingicon-iconset""", alias="IconSet")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIcon:
        from troposphere.quicksight import ConditionalFormattingIcon as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconDisplayConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicondisplayconfiguration.html
    Properties:
        - Name: IconDisplayOption
    
    """
    
    IconDisplayOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingicondisplayconfiguration.html#cfn-quicksight-template-conditionalformattingicondisplayconfiguration-icondisplayoption""", alias="IconDisplayOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconDisplayConfiguration:
        from troposphere.quicksight import ConditionalFormattingIconDisplayConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingIconSet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingiconset.html
    Properties:
        - Name: Expression
        - Name: IconSetType
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingiconset.html#cfn-quicksight-template-conditionalformattingiconset-expression""", alias="Expression")
    IconSetType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingiconset.html#cfn-quicksight-template-conditionalformattingiconset-iconsettype""", alias="IconSetType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingIconSet:
        from troposphere.quicksight import ConditionalFormattingIconSet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ConditionalFormattingSolidColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingsolidcolor.html
    Properties:
        - Name: Expression
        - Name: Color
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingsolidcolor.html#cfn-quicksight-template-conditionalformattingsolidcolor-expression""", alias="Expression")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-conditionalformattingsolidcolor.html#cfn-quicksight-template-conditionalformattingsolidcolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ConditionalFormattingSolidColor:
        from troposphere.quicksight import ConditionalFormattingSolidColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ContributionAnalysisDefault(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-contributionanalysisdefault.html
    Properties:
        - Name: MeasureFieldId
        - Name: ContributorDimensions
    
    """
    
    MeasureFieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-contributionanalysisdefault.html#cfn-quicksight-template-contributionanalysisdefault-measurefieldid""", alias="MeasureFieldId")
    ContributorDimensions_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-contributionanalysisdefault.html#cfn-quicksight-template-contributionanalysisdefault-contributordimensions""", alias="ContributorDimensions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ContributionAnalysisDefault:
        from troposphere.quicksight import ContributionAnalysisDefault as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CurrencyDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Symbol
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-symbol""", alias="Symbol")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-currencydisplayformatconfiguration.html#cfn-quicksight-template-currencydisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CurrencyDisplayFormatConfiguration:
        from troposphere.quicksight import CurrencyDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionFilterOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionfilteroperation.html
    Properties:
        - Name: SelectedFieldsConfiguration
        - Name: TargetVisualsConfiguration
    
    """
    
    SelectedFieldsConfiguration_: 'FilterOperationSelectedFieldsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionfilteroperation.html#cfn-quicksight-template-customactionfilteroperation-selectedfieldsconfiguration""", alias="SelectedFieldsConfiguration")
    TargetVisualsConfiguration_: 'FilterOperationTargetVisualsConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionfilteroperation.html#cfn-quicksight-template-customactionfilteroperation-targetvisualsconfiguration""", alias="TargetVisualsConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionFilterOperation:
        from troposphere.quicksight import CustomActionFilterOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionNavigationOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionnavigationoperation.html
    Properties:
        - Name: LocalNavigationConfiguration
    
    """
    
    LocalNavigationConfiguration_: Optional['LocalNavigationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionnavigationoperation.html#cfn-quicksight-template-customactionnavigationoperation-localnavigationconfiguration""", alias="LocalNavigationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionNavigationOperation:
        from troposphere.quicksight import CustomActionNavigationOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionSetParametersOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionsetparametersoperation.html
    Properties:
        - Name: ParameterValueConfigurations
    
    """
    
    ParameterValueConfigurations_: List['SetParameterValueConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionsetparametersoperation.html#cfn-quicksight-template-customactionsetparametersoperation-parametervalueconfigurations""", alias="ParameterValueConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionSetParametersOperation:
        from troposphere.quicksight import CustomActionSetParametersOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomActionURLOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionurloperation.html
    Properties:
        - Name: URLTemplate
        - Name: URLTarget
    
    """
    
    URLTemplate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionurloperation.html#cfn-quicksight-template-customactionurloperation-urltemplate""", alias="URLTemplate")
    URLTarget_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customactionurloperation.html#cfn-quicksight-template-customactionurloperation-urltarget""", alias="URLTarget")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomActionURLOperation:
        from troposphere.quicksight import CustomActionURLOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcolor.html
    Properties:
        - Name: Color
        - Name: FieldValue
        - Name: SpecialValue
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcolor.html#cfn-quicksight-template-customcolor-color""", alias="Color")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcolor.html#cfn-quicksight-template-customcolor-fieldvalue""", alias="FieldValue")
    SpecialValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcolor.html#cfn-quicksight-template-customcolor-specialvalue""", alias="SpecialValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomColor:
        from troposphere.quicksight import CustomColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentconfiguration.html
    Properties:
        - Name: ContentUrl
        - Name: ContentType
        - Name: ImageScaling
    
    """
    
    ContentUrl_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentconfiguration.html#cfn-quicksight-template-customcontentconfiguration-contenturl""", alias="ContentUrl")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentconfiguration.html#cfn-quicksight-template-customcontentconfiguration-contenttype""", alias="ContentType")
    ImageScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentconfiguration.html#cfn-quicksight-template-customcontentconfiguration-imagescaling""", alias="ImageScaling")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentConfiguration:
        from troposphere.quicksight import CustomContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomContentVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['CustomContentConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-datasetidentifier""", alias="DataSetIdentifier")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customcontentvisual.html#cfn-quicksight-template-customcontentvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomContentVisual:
        from troposphere.quicksight import CustomContentVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html
    Properties:
        - Name: CategoryValue
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html#cfn-quicksight-template-customfilterconfiguration-categoryvalue""", alias="CategoryValue")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html#cfn-quicksight-template-customfilterconfiguration-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html#cfn-quicksight-template-customfilterconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html#cfn-quicksight-template-customfilterconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterconfiguration.html#cfn-quicksight-template-customfilterconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterConfiguration:
        from troposphere.quicksight import CustomFilterConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomFilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html#cfn-quicksight-template-customfilterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html#cfn-quicksight-template-customfilterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html#cfn-quicksight-template-customfilterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customfilterlistconfiguration.html#cfn-quicksight-template-customfilterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomFilterListConfiguration:
        from troposphere.quicksight import CustomFilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomNarrativeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customnarrativeoptions.html
    Properties:
        - Name: Narrative
    
    """
    
    Narrative_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customnarrativeoptions.html#cfn-quicksight-template-customnarrativeoptions-narrative""", alias="Narrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomNarrativeOptions:
        from troposphere.quicksight import CustomNarrativeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomParameterValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html
    Properties:
        - Name: DecimalValues
        - Name: IntegerValues
        - Name: StringValues
        - Name: DateTimeValues
    
    """
    
    DecimalValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html#cfn-quicksight-template-customparametervalues-decimalvalues""", alias="DecimalValues")
    IntegerValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html#cfn-quicksight-template-customparametervalues-integervalues""", alias="IntegerValues")
    StringValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html#cfn-quicksight-template-customparametervalues-stringvalues""", alias="StringValues")
    DateTimeValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customparametervalues.html#cfn-quicksight-template-customparametervalues-datetimevalues""", alias="DateTimeValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomParameterValues:
        from troposphere.quicksight import CustomParameterValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CustomValuesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customvaluesconfiguration.html
    Properties:
        - Name: IncludeNullValue
        - Name: CustomValues
    
    """
    
    IncludeNullValue_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customvaluesconfiguration.html#cfn-quicksight-template-customvaluesconfiguration-includenullvalue""", alias="IncludeNullValue")
    CustomValues_: 'CustomParameterValues' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-customvaluesconfiguration.html#cfn-quicksight-template-customvaluesconfiguration-customvalues""", alias="CustomValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CustomValuesConfiguration:
        from troposphere.quicksight import CustomValuesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataBarsOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-databarsoptions.html
    Properties:
        - Name: PositiveColor
        - Name: FieldId
        - Name: NegativeColor
    
    """
    
    PositiveColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-databarsoptions.html#cfn-quicksight-template-databarsoptions-positivecolor""", alias="PositiveColor")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-databarsoptions.html#cfn-quicksight-template-databarsoptions-fieldid""", alias="FieldId")
    NegativeColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-databarsoptions.html#cfn-quicksight-template-databarsoptions-negativecolor""", alias="NegativeColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataBarsOptions:
        from troposphere.quicksight import DataBarsOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datacolor.html
    Properties:
        - Name: DataValue
        - Name: Color
    
    """
    
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datacolor.html#cfn-quicksight-template-datacolor-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datacolor.html#cfn-quicksight-template-datacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataColor:
        from troposphere.quicksight import DataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataFieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: FieldValue
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html#cfn-quicksight-template-datafieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html#cfn-quicksight-template-datafieldseriesitem-axisbinding""", alias="AxisBinding")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html#cfn-quicksight-template-datafieldseriesitem-fieldvalue""", alias="FieldValue")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datafieldseriesitem.html#cfn-quicksight-template-datafieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataFieldSeriesItem:
        from troposphere.quicksight import DataFieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html
    Properties:
        - Name: DataLabelTypes
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: LabelContent
        - Name: Visibility
        - Name: TotalsVisibility
        - Name: Overlap
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: LabelFontConfiguration
    
    """
    
    DataLabelTypes_: Optional[List['DataLabelType']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-datalabeltypes""", alias="DataLabelTypes")
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-position""", alias="Position")
    LabelContent_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-labelcontent""", alias="LabelContent")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-visibility""", alias="Visibility")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-totalsvisibility""", alias="TotalsVisibility")
    Overlap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-overlap""", alias="Overlap")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-labelcolor""", alias="LabelColor")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeloptions.html#cfn-quicksight-template-datalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelOptions:
        from troposphere.quicksight import DataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html
    Properties:
        - Name: MaximumLabelType
        - Name: DataPathLabelType
        - Name: RangeEndsLabelType
        - Name: FieldLabelType
        - Name: MinimumLabelType
    
    """
    
    MaximumLabelType_: Optional['MaximumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html#cfn-quicksight-template-datalabeltype-maximumlabeltype""", alias="MaximumLabelType")
    DataPathLabelType_: Optional['DataPathLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html#cfn-quicksight-template-datalabeltype-datapathlabeltype""", alias="DataPathLabelType")
    RangeEndsLabelType_: Optional['RangeEndsLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html#cfn-quicksight-template-datalabeltype-rangeendslabeltype""", alias="RangeEndsLabelType")
    FieldLabelType_: Optional['FieldLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html#cfn-quicksight-template-datalabeltype-fieldlabeltype""", alias="FieldLabelType")
    MinimumLabelType_: Optional['MinimumLabelType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datalabeltype.html#cfn-quicksight-template-datalabeltype-minimumlabeltype""", alias="MinimumLabelType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataLabelType:
        from troposphere.quicksight import DataLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathcolor.html
    Properties:
        - Name: Element
        - Name: Color
        - Name: TimeGranularity
    
    """
    
    Element_: 'DataPathValue' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathcolor.html#cfn-quicksight-template-datapathcolor-element""", alias="Element")
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathcolor.html#cfn-quicksight-template-datapathcolor-color""", alias="Color")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathcolor.html#cfn-quicksight-template-datapathcolor-timegranularity""", alias="TimeGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathColor:
        from troposphere.quicksight import DataPathColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
        - Name: FieldValue
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathlabeltype.html#cfn-quicksight-template-datapathlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathlabeltype.html#cfn-quicksight-template-datapathlabeltype-visibility""", alias="Visibility")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathlabeltype.html#cfn-quicksight-template-datapathlabeltype-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathLabelType:
        from troposphere.quicksight import DataPathLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathsort.html
    Properties:
        - Name: SortPaths
        - Name: Direction
    
    """
    
    SortPaths_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathsort.html#cfn-quicksight-template-datapathsort-sortpaths""", alias="SortPaths")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathsort.html#cfn-quicksight-template-datapathsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathSort:
        from troposphere.quicksight import DataPathSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathtype.html
    Properties:
        - Name: PivotTableDataPathType
    
    """
    
    PivotTableDataPathType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathtype.html#cfn-quicksight-template-datapathtype-pivottabledatapathtype""", alias="PivotTableDataPathType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathType:
        from troposphere.quicksight import DataPathType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataPathValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathvalue.html
    Properties:
        - Name: DataPathType
        - Name: FieldId
        - Name: FieldValue
    
    """
    
    DataPathType_: Optional['DataPathType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathvalue.html#cfn-quicksight-template-datapathvalue-datapathtype""", alias="DataPathType")
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathvalue.html#cfn-quicksight-template-datapathvalue-fieldid""", alias="FieldId")
    FieldValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datapathvalue.html#cfn-quicksight-template-datapathvalue-fieldvalue""", alias="FieldValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataPathValue:
        from troposphere.quicksight import DataPathValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetconfiguration.html
    Properties:
        - Name: Placeholder
        - Name: DataSetSchema
        - Name: ColumnGroupSchemaList
    
    """
    
    Placeholder_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetconfiguration.html#cfn-quicksight-template-datasetconfiguration-placeholder""", alias="Placeholder")
    DataSetSchema_: Optional['DataSetSchema'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetconfiguration.html#cfn-quicksight-template-datasetconfiguration-datasetschema""", alias="DataSetSchema")
    ColumnGroupSchemaList_: Optional[List['ColumnGroupSchema']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetconfiguration.html#cfn-quicksight-template-datasetconfiguration-columngroupschemalist""", alias="ColumnGroupSchemaList")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetConfiguration:
        from troposphere.quicksight import DataSetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetReference(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetreference.html
    Properties:
        - Name: DataSetArn
        - Name: DataSetPlaceholder
    
    """
    
    DataSetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetreference.html#cfn-quicksight-template-datasetreference-datasetarn""", alias="DataSetArn")
    DataSetPlaceholder_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetreference.html#cfn-quicksight-template-datasetreference-datasetplaceholder""", alias="DataSetPlaceholder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetReference:
        from troposphere.quicksight import DataSetReference as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataSetSchema(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetschema.html
    Properties:
        - Name: ColumnSchemaList
    
    """
    
    ColumnSchemaList_: Optional[List['ColumnSchema']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datasetschema.html#cfn-quicksight-template-datasetschema-columnschemalist""", alias="ColumnSchemaList")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataSetSchema:
        from troposphere.quicksight import DataSetSchema as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dateaxisoptions.html
    Properties:
        - Name: MissingDateVisibility
    
    """
    
    MissingDateVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dateaxisoptions.html#cfn-quicksight-template-dateaxisoptions-missingdatevisibility""", alias="MissingDateVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateAxisOptions:
        from troposphere.quicksight import DateAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
        - Name: DateGranularity
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html#cfn-quicksight-template-datedimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html#cfn-quicksight-template-datedimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html#cfn-quicksight-template-datedimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html#cfn-quicksight-template-datedimensionfield-fieldid""", alias="FieldId")
    DateGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datedimensionfield.html#cfn-quicksight-template-datedimensionfield-dategranularity""", alias="DateGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateDimensionField:
        from troposphere.quicksight import DateDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html#cfn-quicksight-template-datemeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html#cfn-quicksight-template-datemeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html#cfn-quicksight-template-datemeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datemeasurefield.html#cfn-quicksight-template-datemeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateMeasureField:
        from troposphere.quicksight import DateMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimedefaultvalues.html
    Properties:
        - Name: RollingDate
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimedefaultvalues.html#cfn-quicksight-template-datetimedefaultvalues-rollingdate""", alias="RollingDate")
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimedefaultvalues.html#cfn-quicksight-template-datetimedefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimedefaultvalues.html#cfn-quicksight-template-datetimedefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeDefaultValues:
        from troposphere.quicksight import DateTimeDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
        - Name: DateTimeFormat
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeformatconfiguration.html#cfn-quicksight-template-datetimeformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeformatconfiguration.html#cfn-quicksight-template-datetimeformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeformatconfiguration.html#cfn-quicksight-template-datetimeformatconfiguration-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeFormatConfiguration:
        from troposphere.quicksight import DateTimeFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimehierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimehierarchy.html#cfn-quicksight-template-datetimehierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimehierarchy.html#cfn-quicksight-template-datetimehierarchy-drilldownfilters""", alias="DrillDownFilters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeHierarchy:
        from troposphere.quicksight import DateTimeHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: TimeGranularity
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html#cfn-quicksight-template-datetimeparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DateTimeDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html#cfn-quicksight-template-datetimeparameterdeclaration-defaultvalues""", alias="DefaultValues")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html#cfn-quicksight-template-datetimeparameterdeclaration-timegranularity""", alias="TimeGranularity")
    ValueWhenUnset_: Optional['DateTimeValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html#cfn-quicksight-template-datetimeparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimeparameterdeclaration.html#cfn-quicksight-template-datetimeparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeParameterDeclaration:
        from troposphere.quicksight import DateTimeParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimePickerControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimepickercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimepickercontroldisplayoptions.html#cfn-quicksight-template-datetimepickercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimepickercontroldisplayoptions.html#cfn-quicksight-template-datetimepickercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimepickercontroldisplayoptions.html#cfn-quicksight-template-datetimepickercontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimePickerControlDisplayOptions:
        from troposphere.quicksight import DateTimePickerControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DateTimeValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimevaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-template-datetimevaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-datetimevaluewhenunsetconfiguration.html#cfn-quicksight-template-datetimevaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DateTimeValueWhenUnsetConfiguration:
        from troposphere.quicksight import DateTimeValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimaldefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimaldefaultvalues.html#cfn-quicksight-template-decimaldefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimaldefaultvalues.html#cfn-quicksight-template-decimaldefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalDefaultValues:
        from troposphere.quicksight import DecimalDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html#cfn-quicksight-template-decimalparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['DecimalDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html#cfn-quicksight-template-decimalparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html#cfn-quicksight-template-decimalparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['DecimalValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html#cfn-quicksight-template-decimalparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalparameterdeclaration.html#cfn-quicksight-template-decimalparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalParameterDeclaration:
        from troposphere.quicksight import DecimalParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalPlacesConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalplacesconfiguration.html
    Properties:
        - Name: DecimalPlaces
    
    """
    
    DecimalPlaces_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalplacesconfiguration.html#cfn-quicksight-template-decimalplacesconfiguration-decimalplaces""", alias="DecimalPlaces")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalPlacesConfiguration:
        from troposphere.quicksight import DecimalPlacesConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DecimalValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-template-decimalvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-decimalvaluewhenunsetconfiguration.html#cfn-quicksight-template-decimalvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DecimalValueWhenUnsetConfiguration:
        from troposphere.quicksight import DecimalValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultFreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultfreeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'FreeFormLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultfreeformlayoutconfiguration.html#cfn-quicksight-template-defaultfreeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultFreeFormLayoutConfiguration:
        from troposphere.quicksight import DefaultFreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultGridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultgridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'GridLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultgridlayoutconfiguration.html#cfn-quicksight-template-defaultgridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultGridLayoutConfiguration:
        from troposphere.quicksight import DefaultGridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultInteractiveLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultinteractivelayoutconfiguration.html
    Properties:
        - Name: FreeForm
        - Name: Grid
    
    """
    
    FreeForm_: Optional['DefaultFreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultinteractivelayoutconfiguration.html#cfn-quicksight-template-defaultinteractivelayoutconfiguration-freeform""", alias="FreeForm")
    Grid_: Optional['DefaultGridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultinteractivelayoutconfiguration.html#cfn-quicksight-template-defaultinteractivelayoutconfiguration-grid""", alias="Grid")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultInteractiveLayoutConfiguration:
        from troposphere.quicksight import DefaultInteractiveLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultNewSheetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultnewsheetconfiguration.html
    Properties:
        - Name: SheetContentType
        - Name: InteractiveLayoutConfiguration
        - Name: PaginatedLayoutConfiguration
    
    """
    
    SheetContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultnewsheetconfiguration.html#cfn-quicksight-template-defaultnewsheetconfiguration-sheetcontenttype""", alias="SheetContentType")
    InteractiveLayoutConfiguration_: Optional['DefaultInteractiveLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultnewsheetconfiguration.html#cfn-quicksight-template-defaultnewsheetconfiguration-interactivelayoutconfiguration""", alias="InteractiveLayoutConfiguration")
    PaginatedLayoutConfiguration_: Optional['DefaultPaginatedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultnewsheetconfiguration.html#cfn-quicksight-template-defaultnewsheetconfiguration-paginatedlayoutconfiguration""", alias="PaginatedLayoutConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultNewSheetConfiguration:
        from troposphere.quicksight import DefaultNewSheetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultPaginatedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultpaginatedlayoutconfiguration.html
    Properties:
        - Name: SectionBased
    
    """
    
    SectionBased_: Optional['DefaultSectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultpaginatedlayoutconfiguration.html#cfn-quicksight-template-defaultpaginatedlayoutconfiguration-sectionbased""", alias="SectionBased")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultPaginatedLayoutConfiguration:
        from troposphere.quicksight import DefaultPaginatedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultSectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultsectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-defaultsectionbasedlayoutconfiguration.html#cfn-quicksight-template-defaultsectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultSectionBasedLayoutConfiguration:
        from troposphere.quicksight import DefaultSectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DestinationParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html
    Properties:
        - Name: CustomValuesConfiguration
        - Name: SourceParameterName
        - Name: SelectAllValueOptions
        - Name: SourceField
        - Name: SourceColumn
    
    """
    
    CustomValuesConfiguration_: Optional['CustomValuesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html#cfn-quicksight-template-destinationparametervalueconfiguration-customvaluesconfiguration""", alias="CustomValuesConfiguration")
    SourceParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html#cfn-quicksight-template-destinationparametervalueconfiguration-sourceparametername""", alias="SourceParameterName")
    SelectAllValueOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html#cfn-quicksight-template-destinationparametervalueconfiguration-selectallvalueoptions""", alias="SelectAllValueOptions")
    SourceField_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html#cfn-quicksight-template-destinationparametervalueconfiguration-sourcefield""", alias="SourceField")
    SourceColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-destinationparametervalueconfiguration.html#cfn-quicksight-template-destinationparametervalueconfiguration-sourcecolumn""", alias="SourceColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DestinationParameterValueConfiguration:
        from troposphere.quicksight import DestinationParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dimensionfield.html
    Properties:
        - Name: DateDimensionField
        - Name: NumericalDimensionField
        - Name: CategoricalDimensionField
    
    """
    
    DateDimensionField_: Optional['DateDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dimensionfield.html#cfn-quicksight-template-dimensionfield-datedimensionfield""", alias="DateDimensionField")
    NumericalDimensionField_: Optional['NumericalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dimensionfield.html#cfn-quicksight-template-dimensionfield-numericaldimensionfield""", alias="NumericalDimensionField")
    CategoricalDimensionField_: Optional['CategoricalDimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dimensionfield.html#cfn-quicksight-template-dimensionfield-categoricaldimensionfield""", alias="CategoricalDimensionField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DimensionField:
        from troposphere.quicksight import DimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutCenterOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutcenteroptions.html
    Properties:
        - Name: LabelVisibility
    
    """
    
    LabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutcenteroptions.html#cfn-quicksight-template-donutcenteroptions-labelvisibility""", alias="LabelVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutCenterOptions:
        from troposphere.quicksight import DonutCenterOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DonutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutoptions.html
    Properties:
        - Name: DonutCenterOptions
        - Name: ArcOptions
    
    """
    
    DonutCenterOptions_: Optional['DonutCenterOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutoptions.html#cfn-quicksight-template-donutoptions-donutcenteroptions""", alias="DonutCenterOptions")
    ArcOptions_: Optional['ArcOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-donutoptions.html#cfn-quicksight-template-donutoptions-arcoptions""", alias="ArcOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DonutOptions:
        from troposphere.quicksight import DonutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-drilldownfilter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: TimeRangeFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-drilldownfilter.html#cfn-quicksight-template-drilldownfilter-numericequalityfilter""", alias="NumericEqualityFilter")
    TimeRangeFilter_: Optional['TimeRangeDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-drilldownfilter.html#cfn-quicksight-template-drilldownfilter-timerangefilter""", alias="TimeRangeFilter")
    CategoryFilter_: Optional['CategoryDrillDownFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-drilldownfilter.html#cfn-quicksight-template-drilldownfilter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DrillDownFilter:
        from troposphere.quicksight import DrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DropDownControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dropdowncontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dropdowncontroldisplayoptions.html#cfn-quicksight-template-dropdowncontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dropdowncontroldisplayoptions.html#cfn-quicksight-template-dropdowncontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dropdowncontroldisplayoptions.html#cfn-quicksight-template-dropdowncontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DropDownControlDisplayOptions:
        from troposphere.quicksight import DropDownControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DynamicDefaultValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dynamicdefaultvalue.html
    Properties:
        - Name: GroupNameColumn
        - Name: DefaultValueColumn
        - Name: UserNameColumn
    
    """
    
    GroupNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dynamicdefaultvalue.html#cfn-quicksight-template-dynamicdefaultvalue-groupnamecolumn""", alias="GroupNameColumn")
    DefaultValueColumn_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dynamicdefaultvalue.html#cfn-quicksight-template-dynamicdefaultvalue-defaultvaluecolumn""", alias="DefaultValueColumn")
    UserNameColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-dynamicdefaultvalue.html#cfn-quicksight-template-dynamicdefaultvalue-usernamecolumn""", alias="UserNameColumn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DynamicDefaultValue:
        from troposphere.quicksight import DynamicDefaultValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class EmptyVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-emptyvisual.html
    Properties:
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
    
    """
    
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-emptyvisual.html#cfn-quicksight-template-emptyvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-emptyvisual.html#cfn-quicksight-template-emptyvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-emptyvisual.html#cfn-quicksight-template-emptyvisual-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.EmptyVisual:
        from troposphere.quicksight import EmptyVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Entity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-entity.html
    Properties:
        - Name: Path
    
    """
    
    Path_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-entity.html#cfn-quicksight-template-entity-path""", alias="Path")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Entity:
        from troposphere.quicksight import Entity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExcludePeriodConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-excludeperiodconfiguration.html
    Properties:
        - Name: Status
        - Name: Amount
        - Name: Granularity
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-excludeperiodconfiguration.html#cfn-quicksight-template-excludeperiodconfiguration-status""", alias="Status")
    Amount_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-excludeperiodconfiguration.html#cfn-quicksight-template-excludeperiodconfiguration-amount""", alias="Amount")
    Granularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-excludeperiodconfiguration.html#cfn-quicksight-template-excludeperiodconfiguration-granularity""", alias="Granularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExcludePeriodConfiguration:
        from troposphere.quicksight import ExcludePeriodConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ExplicitHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-explicithierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-explicithierarchy.html#cfn-quicksight-template-explicithierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-explicithierarchy.html#cfn-quicksight-template-explicithierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-explicithierarchy.html#cfn-quicksight-template-explicithierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ExplicitHierarchy:
        from troposphere.quicksight import ExplicitHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldBasedTooltip(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldbasedtooltip.html
    Properties:
        - Name: TooltipFields
        - Name: AggregationVisibility
        - Name: TooltipTitleType
    
    """
    
    TooltipFields_: Optional[List['TooltipItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldbasedtooltip.html#cfn-quicksight-template-fieldbasedtooltip-tooltipfields""", alias="TooltipFields")
    AggregationVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldbasedtooltip.html#cfn-quicksight-template-fieldbasedtooltip-aggregationvisibility""", alias="AggregationVisibility")
    TooltipTitleType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldbasedtooltip.html#cfn-quicksight-template-fieldbasedtooltip-tooltiptitletype""", alias="TooltipTitleType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldBasedTooltip:
        from troposphere.quicksight import FieldBasedTooltip as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldlabeltype.html
    Properties:
        - Name: FieldId
        - Name: Visibility
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldlabeltype.html#cfn-quicksight-template-fieldlabeltype-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldlabeltype.html#cfn-quicksight-template-fieldlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldLabelType:
        from troposphere.quicksight import FieldLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldseriesitem.html
    Properties:
        - Name: FieldId
        - Name: AxisBinding
        - Name: Settings
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldseriesitem.html#cfn-quicksight-template-fieldseriesitem-fieldid""", alias="FieldId")
    AxisBinding_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldseriesitem.html#cfn-quicksight-template-fieldseriesitem-axisbinding""", alias="AxisBinding")
    Settings_: Optional['LineChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldseriesitem.html#cfn-quicksight-template-fieldseriesitem-settings""", alias="Settings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSeriesItem:
        from troposphere.quicksight import FieldSeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSort(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsort.html
    Properties:
        - Name: FieldId
        - Name: Direction
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsort.html#cfn-quicksight-template-fieldsort-fieldid""", alias="FieldId")
    Direction_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsort.html#cfn-quicksight-template-fieldsort-direction""", alias="Direction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSort:
        from troposphere.quicksight import FieldSort as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsortoptions.html
    Properties:
        - Name: FieldSort
        - Name: ColumnSort
    
    """
    
    FieldSort_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsortoptions.html#cfn-quicksight-template-fieldsortoptions-fieldsort""", alias="FieldSort")
    ColumnSort_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldsortoptions.html#cfn-quicksight-template-fieldsortoptions-columnsort""", alias="ColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldSortOptions:
        from troposphere.quicksight import FieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FieldTooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldtooltipitem.html
    Properties:
        - Name: FieldId
        - Name: Label
        - Name: Visibility
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldtooltipitem.html#cfn-quicksight-template-fieldtooltipitem-fieldid""", alias="FieldId")
    Label_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldtooltipitem.html#cfn-quicksight-template-fieldtooltipitem-label""", alias="Label")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fieldtooltipitem.html#cfn-quicksight-template-fieldtooltipitem-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FieldTooltipItem:
        from troposphere.quicksight import FieldTooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Geospatial
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapaggregatedfieldwells.html#cfn-quicksight-template-filledmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapaggregatedfieldwells.html#cfn-quicksight-template-filledmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapAggregatedFieldWells:
        from troposphere.quicksight import FilledMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: List['FilledMapConditionalFormattingOption'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformatting.html#cfn-quicksight-template-filledmapconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormatting:
        from troposphere.quicksight import FilledMapConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformattingoption.html
    Properties:
        - Name: Shape
    
    """
    
    Shape_: 'FilledMapShapeConditionalFormatting' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconditionalformattingoption.html#cfn-quicksight-template-filledmapconditionalformattingoption-shape""", alias="Shape")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConditionalFormattingOption:
        from troposphere.quicksight import FilledMapConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
    
    """
    
    SortConfiguration_: Optional['FilledMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['FilledMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapconfiguration.html#cfn-quicksight-template-filledmapconfiguration-windowoptions""", alias="WindowOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapConfiguration:
        from troposphere.quicksight import FilledMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapfieldwells.html
    Properties:
        - Name: FilledMapAggregatedFieldWells
    
    """
    
    FilledMapAggregatedFieldWells_: Optional['FilledMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapfieldwells.html#cfn-quicksight-template-filledmapfieldwells-filledmapaggregatedfieldwells""", alias="FilledMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapFieldWells:
        from troposphere.quicksight import FilledMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapShapeConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapshapeconditionalformatting.html
    Properties:
        - Name: Format
        - Name: FieldId
    
    """
    
    Format_: Optional['ShapeConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapshapeconditionalformatting.html#cfn-quicksight-template-filledmapshapeconditionalformatting-format""", alias="Format")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapshapeconditionalformatting.html#cfn-quicksight-template-filledmapshapeconditionalformatting-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapShapeConditionalFormatting:
        from troposphere.quicksight import FilledMapShapeConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapsortconfiguration.html
    Properties:
        - Name: CategorySort
    
    """
    
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapsortconfiguration.html#cfn-quicksight-template-filledmapsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapSortConfiguration:
        from troposphere.quicksight import FilledMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilledMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['FilledMapConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FilledMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filledmapvisual.html#cfn-quicksight-template-filledmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilledMapVisual:
        from troposphere.quicksight import FilledMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Filter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html
    Properties:
        - Name: NumericEqualityFilter
        - Name: NumericRangeFilter
        - Name: TimeRangeFilter
        - Name: RelativeDatesFilter
        - Name: TopBottomFilter
        - Name: TimeEqualityFilter
        - Name: CategoryFilter
    
    """
    
    NumericEqualityFilter_: Optional['NumericEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-numericequalityfilter""", alias="NumericEqualityFilter")
    NumericRangeFilter_: Optional['NumericRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-numericrangefilter""", alias="NumericRangeFilter")
    TimeRangeFilter_: Optional['TimeRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-timerangefilter""", alias="TimeRangeFilter")
    RelativeDatesFilter_: Optional['RelativeDatesFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-relativedatesfilter""", alias="RelativeDatesFilter")
    TopBottomFilter_: Optional['TopBottomFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-topbottomfilter""", alias="TopBottomFilter")
    TimeEqualityFilter_: Optional['TimeEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-timeequalityfilter""", alias="TimeEqualityFilter")
    CategoryFilter_: Optional['CategoryFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filter.html#cfn-quicksight-template-filter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Filter:
        from troposphere.quicksight import Filter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
        - Name: RelativeDateTime
    
    """
    
    Slider_: Optional['FilterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-slider""", alias="Slider")
    TextArea_: Optional['FilterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['FilterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['FilterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-textfield""", alias="TextField")
    List_: Optional['FilterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-list""", alias="List")
    DateTimePicker_: Optional['FilterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-datetimepicker""", alias="DateTimePicker")
    RelativeDateTime_: Optional['FilterRelativeDateTimeControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtercontrol.html#cfn-quicksight-template-filtercontrol-relativedatetime""", alias="RelativeDateTime")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterControl:
        from troposphere.quicksight import FilterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html#cfn-quicksight-template-filterdatetimepickercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html#cfn-quicksight-template-filterdatetimepickercontrol-type""", alias="Type")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html#cfn-quicksight-template-filterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html#cfn-quicksight-template-filterdatetimepickercontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdatetimepickercontrol.html#cfn-quicksight-template-filterdatetimepickercontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDateTimePickerControl:
        from troposphere.quicksight import FilterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterdropdowncontrol.html#cfn-quicksight-template-filterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterDropDownControl:
        from troposphere.quicksight import FilterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterGroup(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html
    Properties:
        - Name: Status
        - Name: Filters
        - Name: CrossDataset
        - Name: ScopeConfiguration
        - Name: FilterGroupId
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html#cfn-quicksight-template-filtergroup-status""", alias="Status")
    Filters_: List['Filter'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html#cfn-quicksight-template-filtergroup-filters""", alias="Filters")
    CrossDataset_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html#cfn-quicksight-template-filtergroup-crossdataset""", alias="CrossDataset")
    ScopeConfiguration_: 'FilterScopeConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html#cfn-quicksight-template-filtergroup-scopeconfiguration""", alias="ScopeConfiguration")
    FilterGroupId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtergroup.html#cfn-quicksight-template-filtergroup-filtergroupid""", alias="FilterGroupId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterGroup:
        from troposphere.quicksight import FilterGroup as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html
    Properties:
        - Name: CategoryValues
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
    
    """
    
    CategoryValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html#cfn-quicksight-template-filterlistconfiguration-categoryvalues""", alias="CategoryValues")
    NullOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html#cfn-quicksight-template-filterlistconfiguration-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html#cfn-quicksight-template-filterlistconfiguration-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistconfiguration.html#cfn-quicksight-template-filterlistconfiguration-selectalloptions""", alias="SelectAllOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListConfiguration:
        from troposphere.quicksight import FilterListConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SourceFilterId
        - Name: SelectableValues
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-displayoptions""", alias="DisplayOptions")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-sourcefilterid""", alias="SourceFilterId")
    SelectableValues_: Optional['FilterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterlistcontrol.html#cfn-quicksight-template-filterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterListControl:
        from troposphere.quicksight import FilterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationSelectedFieldsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationselectedfieldsconfiguration.html
    Properties:
        - Name: SelectedColumns
        - Name: SelectedFields
        - Name: SelectedFieldOptions
    
    """
    
    SelectedColumns_: Optional[List['ColumnIdentifier']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-template-filteroperationselectedfieldsconfiguration-selectedcolumns""", alias="SelectedColumns")
    SelectedFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-template-filteroperationselectedfieldsconfiguration-selectedfields""", alias="SelectedFields")
    SelectedFieldOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationselectedfieldsconfiguration.html#cfn-quicksight-template-filteroperationselectedfieldsconfiguration-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationSelectedFieldsConfiguration:
        from troposphere.quicksight import FilterOperationSelectedFieldsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterOperationTargetVisualsConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationtargetvisualsconfiguration.html
    Properties:
        - Name: SameSheetTargetVisualConfiguration
    
    """
    
    SameSheetTargetVisualConfiguration_: Optional['SameSheetTargetVisualConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filteroperationtargetvisualsconfiguration.html#cfn-quicksight-template-filteroperationtargetvisualsconfiguration-samesheettargetvisualconfiguration""", alias="SameSheetTargetVisualConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterOperationTargetVisualsConfiguration:
        from troposphere.quicksight import FilterOperationTargetVisualsConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterRelativeDateTimeControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html#cfn-quicksight-template-filterrelativedatetimecontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['RelativeDateTimeControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html#cfn-quicksight-template-filterrelativedatetimecontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html#cfn-quicksight-template-filterrelativedatetimecontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterrelativedatetimecontrol.html#cfn-quicksight-template-filterrelativedatetimecontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterRelativeDateTimeControl:
        from troposphere.quicksight import FilterRelativeDateTimeControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterscopeconfiguration.html
    Properties:
        - Name: AllSheets
        - Name: SelectedSheets
    
    """
    
    AllSheets_: Optional[Dict] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterscopeconfiguration.html#cfn-quicksight-template-filterscopeconfiguration-allsheets""", alias="AllSheets")
    SelectedSheets_: Optional['SelectedSheetsFilterScopeConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterscopeconfiguration.html#cfn-quicksight-template-filterscopeconfiguration-selectedsheets""", alias="SelectedSheets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterScopeConfiguration:
        from troposphere.quicksight import FilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterselectablevalues.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterselectablevalues.html#cfn-quicksight-template-filterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSelectableValues:
        from troposphere.quicksight import FilterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Type
        - Name: StepSize
        - Name: DisplayOptions
        - Name: Title
        - Name: MaximumValue
        - Name: SourceFilterId
        - Name: MinimumValue
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-filtercontrolid""", alias="FilterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-type""", alias="Type")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-maximumvalue""", alias="MaximumValue")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-sourcefilterid""", alias="SourceFilterId")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filterslidercontrol.html#cfn-quicksight-template-filterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterSliderControl:
        from troposphere.quicksight import FilterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html
    Properties:
        - Name: FilterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html#cfn-quicksight-template-filtertextareacontrol-filtercontrolid""", alias="FilterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html#cfn-quicksight-template-filtertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html#cfn-quicksight-template-filtertextareacontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html#cfn-quicksight-template-filtertextareacontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextareacontrol.html#cfn-quicksight-template-filtertextareacontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextAreaControl:
        from troposphere.quicksight import FilterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FilterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html
    Properties:
        - Name: FilterControlId
        - Name: DisplayOptions
        - Name: Title
        - Name: SourceFilterId
    
    """
    
    FilterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html#cfn-quicksight-template-filtertextfieldcontrol-filtercontrolid""", alias="FilterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html#cfn-quicksight-template-filtertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html#cfn-quicksight-template-filtertextfieldcontrol-title""", alias="Title")
    SourceFilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-filtertextfieldcontrol.html#cfn-quicksight-template-filtertextfieldcontrol-sourcefilterid""", alias="SourceFilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FilterTextFieldControl:
        from troposphere.quicksight import FilterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html
    Properties:
        - Name: FontStyle
        - Name: FontSize
        - Name: FontDecoration
        - Name: FontColor
        - Name: FontWeight
    
    """
    
    FontStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html#cfn-quicksight-template-fontconfiguration-fontstyle""", alias="FontStyle")
    FontSize_: Optional['FontSize'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html#cfn-quicksight-template-fontconfiguration-fontsize""", alias="FontSize")
    FontDecoration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html#cfn-quicksight-template-fontconfiguration-fontdecoration""", alias="FontDecoration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html#cfn-quicksight-template-fontconfiguration-fontcolor""", alias="FontColor")
    FontWeight_: Optional['FontWeight'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontconfiguration.html#cfn-quicksight-template-fontconfiguration-fontweight""", alias="FontWeight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontConfiguration:
        from troposphere.quicksight import FontConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontSize(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontsize.html
    Properties:
        - Name: Relative
    
    """
    
    Relative_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontsize.html#cfn-quicksight-template-fontsize-relative""", alias="Relative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontSize:
        from troposphere.quicksight import FontSize as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FontWeight(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontweight.html
    Properties:
        - Name: Name
    
    """
    
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-fontweight.html#cfn-quicksight-template-fontweight-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FontWeight:
        from troposphere.quicksight import FontWeight as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: CustomSeasonalityValue
        - Name: Value
        - Name: Time
        - Name: UpperBoundary
        - Name: ComputationId
        - Name: Name
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-seasonality""", alias="Seasonality")
    CustomSeasonalityValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-customseasonalityvalue""", alias="CustomSeasonalityValue")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-time""", alias="Time")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-upperboundary""", alias="UpperBoundary")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-name""", alias="Name")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastcomputation.html#cfn-quicksight-template-forecastcomputation-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastComputation:
        from troposphere.quicksight import ForecastComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastconfiguration.html
    Properties:
        - Name: ForecastProperties
        - Name: Scenario
    
    """
    
    ForecastProperties_: Optional['TimeBasedForecastProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastconfiguration.html#cfn-quicksight-template-forecastconfiguration-forecastproperties""", alias="ForecastProperties")
    Scenario_: Optional['ForecastScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastconfiguration.html#cfn-quicksight-template-forecastconfiguration-scenario""", alias="Scenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastConfiguration:
        from troposphere.quicksight import ForecastConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ForecastScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastscenario.html
    Properties:
        - Name: WhatIfRangeScenario
        - Name: WhatIfPointScenario
    
    """
    
    WhatIfRangeScenario_: Optional['WhatIfRangeScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastscenario.html#cfn-quicksight-template-forecastscenario-whatifrangescenario""", alias="WhatIfRangeScenario")
    WhatIfPointScenario_: Optional['WhatIfPointScenario'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-forecastscenario.html#cfn-quicksight-template-forecastscenario-whatifpointscenario""", alias="WhatIfPointScenario")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ForecastScenario:
        from troposphere.quicksight import ForecastScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-formatconfiguration.html
    Properties:
        - Name: NumberFormatConfiguration
        - Name: DateTimeFormatConfiguration
        - Name: StringFormatConfiguration
    
    """
    
    NumberFormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-formatconfiguration.html#cfn-quicksight-template-formatconfiguration-numberformatconfiguration""", alias="NumberFormatConfiguration")
    DateTimeFormatConfiguration_: Optional['DateTimeFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-formatconfiguration.html#cfn-quicksight-template-formatconfiguration-datetimeformatconfiguration""", alias="DateTimeFormatConfiguration")
    StringFormatConfiguration_: Optional['StringFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-formatconfiguration.html#cfn-quicksight-template-formatconfiguration-stringformatconfiguration""", alias="StringFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FormatConfiguration:
        from troposphere.quicksight import FormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['FreeFormLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutcanvassizeoptions.html#cfn-quicksight-template-freeformlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['FreeFormLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutconfiguration.html#cfn-quicksight-template-freeformlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutconfiguration.html#cfn-quicksight-template-freeformlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutConfiguration:
        from troposphere.quicksight import FreeFormLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: BorderStyle
        - Name: Height
        - Name: Visibility
        - Name: RenderingRules
        - Name: YAxisLocation
        - Name: LoadingAnimation
        - Name: Width
        - Name: BackgroundStyle
        - Name: ElementId
        - Name: XAxisLocation
        - Name: SelectedBorderStyle
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-elementtype""", alias="ElementType")
    BorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-borderstyle""", alias="BorderStyle")
    Height_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-height""", alias="Height")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-visibility""", alias="Visibility")
    RenderingRules_: Optional[List['SheetElementRenderingRule']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-renderingrules""", alias="RenderingRules")
    YAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-yaxislocation""", alias="YAxisLocation")
    LoadingAnimation_: Optional['LoadingAnimation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-loadinganimation""", alias="LoadingAnimation")
    Width_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-width""", alias="Width")
    BackgroundStyle_: Optional['FreeFormLayoutElementBackgroundStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-backgroundstyle""", alias="BackgroundStyle")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-elementid""", alias="ElementId")
    XAxisLocation_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-xaxislocation""", alias="XAxisLocation")
    SelectedBorderStyle_: Optional['FreeFormLayoutElementBorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelement.html#cfn-quicksight-template-freeformlayoutelement-selectedborderstyle""", alias="SelectedBorderStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElement:
        from troposphere.quicksight import FreeFormLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBackgroundStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementbackgroundstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-template-freeformlayoutelementbackgroundstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementbackgroundstyle.html#cfn-quicksight-template-freeformlayoutelementbackgroundstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBackgroundStyle:
        from troposphere.quicksight import FreeFormLayoutElementBackgroundStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutElementBorderStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementborderstyle.html
    Properties:
        - Name: Color
        - Name: Visibility
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementborderstyle.html#cfn-quicksight-template-freeformlayoutelementborderstyle-color""", alias="Color")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutelementborderstyle.html#cfn-quicksight-template-freeformlayoutelementborderstyle-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutElementBorderStyle:
        from troposphere.quicksight import FreeFormLayoutElementBorderStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
    
    """
    
    OptimizedViewPortWidth_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformlayoutscreencanvassizeoptions.html#cfn-quicksight-template-freeformlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import FreeFormLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FreeFormSectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformsectionlayoutconfiguration.html
    Properties:
        - Name: Elements
    
    """
    
    Elements_: List['FreeFormLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-freeformsectionlayoutconfiguration.html#cfn-quicksight-template-freeformsectionlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FreeFormSectionLayoutConfiguration:
        from troposphere.quicksight import FreeFormSectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartaggregatedfieldwells.html#cfn-quicksight-template-funnelchartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartaggregatedfieldwells.html#cfn-quicksight-template-funnelchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartAggregatedFieldWells:
        from troposphere.quicksight import FunnelChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabelOptions
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['FunnelChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabelOptions_: Optional['FunnelChartDataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-datalabeloptions""", alias="DataLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['FunnelChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-tooltip""", alias="Tooltip")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartconfiguration.html#cfn-quicksight-template-funnelchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartConfiguration:
        from troposphere.quicksight import FunnelChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartDataLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html
    Properties:
        - Name: MeasureLabelVisibility
        - Name: Position
        - Name: Visibility
        - Name: CategoryLabelVisibility
        - Name: LabelColor
        - Name: MeasureDataLabelStyle
        - Name: LabelFontConfiguration
    
    """
    
    MeasureLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-measurelabelvisibility""", alias="MeasureLabelVisibility")
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-position""", alias="Position")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-visibility""", alias="Visibility")
    CategoryLabelVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-categorylabelvisibility""", alias="CategoryLabelVisibility")
    LabelColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-labelcolor""", alias="LabelColor")
    MeasureDataLabelStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-measuredatalabelstyle""", alias="MeasureDataLabelStyle")
    LabelFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartdatalabeloptions.html#cfn-quicksight-template-funnelchartdatalabeloptions-labelfontconfiguration""", alias="LabelFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartDataLabelOptions:
        from troposphere.quicksight import FunnelChartDataLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartfieldwells.html
    Properties:
        - Name: FunnelChartAggregatedFieldWells
    
    """
    
    FunnelChartAggregatedFieldWells_: Optional['FunnelChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartfieldwells.html#cfn-quicksight-template-funnelchartfieldwells-funnelchartaggregatedfieldwells""", alias="FunnelChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartFieldWells:
        from troposphere.quicksight import FunnelChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartsortconfiguration.html#cfn-quicksight-template-funnelchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartsortconfiguration.html#cfn-quicksight-template-funnelchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartSortConfiguration:
        from troposphere.quicksight import FunnelChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class FunnelChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['FunnelChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-funnelchartvisual.html#cfn-quicksight-template-funnelchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.FunnelChartVisual:
        from troposphere.quicksight import FunnelChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartArcConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartarcconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartarcconditionalformatting.html#cfn-quicksight-template-gaugechartarcconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartArcConditionalFormatting:
        from troposphere.quicksight import GaugeChartArcConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['GaugeChartConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformatting.html#cfn-quicksight-template-gaugechartconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormatting:
        from troposphere.quicksight import GaugeChartConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformattingoption.html
    Properties:
        - Name: Arc
        - Name: PrimaryValue
    
    """
    
    Arc_: Optional['GaugeChartArcConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformattingoption.html#cfn-quicksight-template-gaugechartconditionalformattingoption-arc""", alias="Arc")
    PrimaryValue_: Optional['GaugeChartPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconditionalformattingoption.html#cfn-quicksight-template-gaugechartconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConditionalFormattingOption:
        from troposphere.quicksight import GaugeChartConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html
    Properties:
        - Name: DataLabels
        - Name: FieldWells
        - Name: TooltipOptions
        - Name: GaugeChartOptions
        - Name: VisualPalette
    
    """
    
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html#cfn-quicksight-template-gaugechartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['GaugeChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html#cfn-quicksight-template-gaugechartconfiguration-fieldwells""", alias="FieldWells")
    TooltipOptions_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html#cfn-quicksight-template-gaugechartconfiguration-tooltipoptions""", alias="TooltipOptions")
    GaugeChartOptions_: Optional['GaugeChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html#cfn-quicksight-template-gaugechartconfiguration-gaugechartoptions""", alias="GaugeChartOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartconfiguration.html#cfn-quicksight-template-gaugechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartConfiguration:
        from troposphere.quicksight import GaugeChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartfieldwells.html
    Properties:
        - Name: TargetValues
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartfieldwells.html#cfn-quicksight-template-gaugechartfieldwells-targetvalues""", alias="TargetValues")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartfieldwells.html#cfn-quicksight-template-gaugechartfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartFieldWells:
        from troposphere.quicksight import GaugeChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html
    Properties:
        - Name: Arc
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ArcAxis
        - Name: PrimaryValueFontConfiguration
    
    """
    
    Arc_: Optional['ArcConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html#cfn-quicksight-template-gaugechartoptions-arc""", alias="Arc")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html#cfn-quicksight-template-gaugechartoptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html#cfn-quicksight-template-gaugechartoptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ArcAxis_: Optional['ArcAxisConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html#cfn-quicksight-template-gaugechartoptions-arcaxis""", alias="ArcAxis")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartoptions.html#cfn-quicksight-template-gaugechartoptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartOptions:
        from troposphere.quicksight import GaugeChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-template-gaugechartprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartprimaryvalueconditionalformatting.html#cfn-quicksight-template-gaugechartprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartPrimaryValueConditionalFormatting:
        from troposphere.quicksight import GaugeChartPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GaugeChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['GaugeChartConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GaugeChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gaugechartvisual.html#cfn-quicksight-template-gaugechartvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GaugeChartVisual:
        from troposphere.quicksight import GaugeChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialCoordinateBounds(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html
    Properties:
        - Name: West
        - Name: South
        - Name: North
        - Name: East
    
    """
    
    West_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html#cfn-quicksight-template-geospatialcoordinatebounds-west""", alias="West")
    South_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html#cfn-quicksight-template-geospatialcoordinatebounds-south""", alias="South")
    North_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html#cfn-quicksight-template-geospatialcoordinatebounds-north""", alias="North")
    East_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialcoordinatebounds.html#cfn-quicksight-template-geospatialcoordinatebounds-east""", alias="East")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialCoordinateBounds:
        from troposphere.quicksight import GeospatialCoordinateBounds as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapColorScale(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapcolorscale.html
    Properties:
        - Name: Colors
    
    """
    
    Colors_: Optional[List['GeospatialHeatmapDataColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapcolorscale.html#cfn-quicksight-template-geospatialheatmapcolorscale-colors""", alias="Colors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapColorScale:
        from troposphere.quicksight import GeospatialHeatmapColorScale as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapconfiguration.html
    Properties:
        - Name: HeatmapColor
    
    """
    
    HeatmapColor_: Optional['GeospatialHeatmapColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapconfiguration.html#cfn-quicksight-template-geospatialheatmapconfiguration-heatmapcolor""", alias="HeatmapColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapConfiguration:
        from troposphere.quicksight import GeospatialHeatmapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialHeatmapDataColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapdatacolor.html
    Properties:
        - Name: Color
    
    """
    
    Color_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialheatmapdatacolor.html#cfn-quicksight-template-geospatialheatmapdatacolor-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialHeatmapDataColor:
        from troposphere.quicksight import GeospatialHeatmapDataColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapaggregatedfieldwells.html
    Properties:
        - Name: Colors
        - Name: Values
        - Name: Geospatial
    
    """
    
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapaggregatedfieldwells.html#cfn-quicksight-template-geospatialmapaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapaggregatedfieldwells.html#cfn-quicksight-template-geospatialmapaggregatedfieldwells-values""", alias="Values")
    Geospatial_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapaggregatedfieldwells.html#cfn-quicksight-template-geospatialmapaggregatedfieldwells-geospatial""", alias="Geospatial")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapAggregatedFieldWells:
        from troposphere.quicksight import GeospatialMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html
    Properties:
        - Name: Legend
        - Name: MapStyleOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: WindowOptions
        - Name: PointStyleOptions
        - Name: VisualPalette
    
    """
    
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-legend""", alias="Legend")
    MapStyleOptions_: Optional['GeospatialMapStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-mapstyleoptions""", alias="MapStyleOptions")
    FieldWells_: Optional['GeospatialMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-tooltip""", alias="Tooltip")
    WindowOptions_: Optional['GeospatialWindowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-windowoptions""", alias="WindowOptions")
    PointStyleOptions_: Optional['GeospatialPointStyleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-pointstyleoptions""", alias="PointStyleOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapconfiguration.html#cfn-quicksight-template-geospatialmapconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapConfiguration:
        from troposphere.quicksight import GeospatialMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapfieldwells.html
    Properties:
        - Name: GeospatialMapAggregatedFieldWells
    
    """
    
    GeospatialMapAggregatedFieldWells_: Optional['GeospatialMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapfieldwells.html#cfn-quicksight-template-geospatialmapfieldwells-geospatialmapaggregatedfieldwells""", alias="GeospatialMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapFieldWells:
        from troposphere.quicksight import GeospatialMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapstyleoptions.html
    Properties:
        - Name: BaseMapStyle
    
    """
    
    BaseMapStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapstyleoptions.html#cfn-quicksight-template-geospatialmapstyleoptions-basemapstyle""", alias="BaseMapStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapStyleOptions:
        from troposphere.quicksight import GeospatialMapStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['GeospatialMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialmapvisual.html#cfn-quicksight-template-geospatialmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialMapVisual:
        from troposphere.quicksight import GeospatialMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialPointStyleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialpointstyleoptions.html
    Properties:
        - Name: SelectedPointStyle
        - Name: ClusterMarkerConfiguration
        - Name: HeatmapConfiguration
    
    """
    
    SelectedPointStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialpointstyleoptions.html#cfn-quicksight-template-geospatialpointstyleoptions-selectedpointstyle""", alias="SelectedPointStyle")
    ClusterMarkerConfiguration_: Optional['ClusterMarkerConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialpointstyleoptions.html#cfn-quicksight-template-geospatialpointstyleoptions-clustermarkerconfiguration""", alias="ClusterMarkerConfiguration")
    HeatmapConfiguration_: Optional['GeospatialHeatmapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialpointstyleoptions.html#cfn-quicksight-template-geospatialpointstyleoptions-heatmapconfiguration""", alias="HeatmapConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialPointStyleOptions:
        from troposphere.quicksight import GeospatialPointStyleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GeospatialWindowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialwindowoptions.html
    Properties:
        - Name: Bounds
        - Name: MapZoomMode
    
    """
    
    Bounds_: Optional['GeospatialCoordinateBounds'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialwindowoptions.html#cfn-quicksight-template-geospatialwindowoptions-bounds""", alias="Bounds")
    MapZoomMode_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-geospatialwindowoptions.html#cfn-quicksight-template-geospatialwindowoptions-mapzoommode""", alias="MapZoomMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GeospatialWindowOptions:
        from troposphere.quicksight import GeospatialWindowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GlobalTableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-globaltableborderoptions.html
    Properties:
        - Name: UniformBorder
        - Name: SideSpecificBorder
    
    """
    
    UniformBorder_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-globaltableborderoptions.html#cfn-quicksight-template-globaltableborderoptions-uniformborder""", alias="UniformBorder")
    SideSpecificBorder_: Optional['TableSideBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-globaltableborderoptions.html#cfn-quicksight-template-globaltableborderoptions-sidespecificborder""", alias="SideSpecificBorder")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GlobalTableBorderOptions:
        from troposphere.quicksight import GlobalTableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientColor(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientcolor.html
    Properties:
        - Name: Stops
    
    """
    
    Stops_: Optional[List['GradientStop']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientcolor.html#cfn-quicksight-template-gradientcolor-stops""", alias="Stops")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientColor:
        from troposphere.quicksight import GradientColor as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GradientStop(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientstop.html
    Properties:
        - Name: GradientOffset
        - Name: DataValue
        - Name: Color
    
    """
    
    GradientOffset_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientstop.html#cfn-quicksight-template-gradientstop-gradientoffset""", alias="GradientOffset")
    DataValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientstop.html#cfn-quicksight-template-gradientstop-datavalue""", alias="DataValue")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gradientstop.html#cfn-quicksight-template-gradientstop-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GradientStop:
        from troposphere.quicksight import GradientStop as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutcanvassizeoptions.html
    Properties:
        - Name: ScreenCanvasSizeOptions
    
    """
    
    ScreenCanvasSizeOptions_: Optional['GridLayoutScreenCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutcanvassizeoptions.html#cfn-quicksight-template-gridlayoutcanvassizeoptions-screencanvassizeoptions""", alias="ScreenCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: Elements
    
    """
    
    CanvasSizeOptions_: Optional['GridLayoutCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutconfiguration.html#cfn-quicksight-template-gridlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    Elements_: List['GridLayoutElement'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutconfiguration.html#cfn-quicksight-template-gridlayoutconfiguration-elements""", alias="Elements")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutConfiguration:
        from troposphere.quicksight import GridLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutElement(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html
    Properties:
        - Name: ElementType
        - Name: ColumnSpan
        - Name: ColumnIndex
        - Name: RowIndex
        - Name: RowSpan
        - Name: ElementId
    
    """
    
    ElementType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-elementtype""", alias="ElementType")
    ColumnSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-columnspan""", alias="ColumnSpan")
    ColumnIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-columnindex""", alias="ColumnIndex")
    RowIndex_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-rowindex""", alias="RowIndex")
    RowSpan_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-rowspan""", alias="RowSpan")
    ElementId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutelement.html#cfn-quicksight-template-gridlayoutelement-elementid""", alias="ElementId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutElement:
        from troposphere.quicksight import GridLayoutElement as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GridLayoutScreenCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutscreencanvassizeoptions.html
    Properties:
        - Name: OptimizedViewPortWidth
        - Name: ResizeOption
    
    """
    
    OptimizedViewPortWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-template-gridlayoutscreencanvassizeoptions-optimizedviewportwidth""", alias="OptimizedViewPortWidth")
    ResizeOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-gridlayoutscreencanvassizeoptions.html#cfn-quicksight-template-gridlayoutscreencanvassizeoptions-resizeoption""", alias="ResizeOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GridLayoutScreenCanvasSizeOptions:
        from troposphere.quicksight import GridLayoutScreenCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GrowthRateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: PeriodSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html#cfn-quicksight-template-growthratecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html#cfn-quicksight-template-growthratecomputation-time""", alias="Time")
    PeriodSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html#cfn-quicksight-template-growthratecomputation-periodsize""", alias="PeriodSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html#cfn-quicksight-template-growthratecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-growthratecomputation.html#cfn-quicksight-template-growthratecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GrowthRateComputation:
        from troposphere.quicksight import GrowthRateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeaderFooterSectionConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-headerfootersectionconfiguration.html
    Properties:
        - Name: Layout
        - Name: Style
        - Name: SectionId
    
    """
    
    Layout_: 'SectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-headerfootersectionconfiguration.html#cfn-quicksight-template-headerfootersectionconfiguration-layout""", alias="Layout")
    Style_: Optional['SectionStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-headerfootersectionconfiguration.html#cfn-quicksight-template-headerfootersectionconfiguration-style""", alias="Style")
    SectionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-headerfootersectionconfiguration.html#cfn-quicksight-template-headerfootersectionconfiguration-sectionid""", alias="SectionId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeaderFooterSectionConfiguration:
        from troposphere.quicksight import HeaderFooterSectionConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapaggregatedfieldwells.html#cfn-quicksight-template-heatmapaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapaggregatedfieldwells.html#cfn-quicksight-template-heatmapaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapaggregatedfieldwells.html#cfn-quicksight-template-heatmapaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapAggregatedFieldWells:
        from troposphere.quicksight import HeatMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: ColumnLabelOptions
        - Name: Legend
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: RowLabelOptions
    
    """
    
    SortConfiguration_: Optional['HeatMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-sortconfiguration""", alias="SortConfiguration")
    ColumnLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-columnlabeloptions""", alias="ColumnLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['HeatMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-colorscale""", alias="ColorScale")
    RowLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapconfiguration.html#cfn-quicksight-template-heatmapconfiguration-rowlabeloptions""", alias="RowLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapConfiguration:
        from troposphere.quicksight import HeatMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapfieldwells.html
    Properties:
        - Name: HeatMapAggregatedFieldWells
    
    """
    
    HeatMapAggregatedFieldWells_: Optional['HeatMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapfieldwells.html#cfn-quicksight-template-heatmapfieldwells-heatmapaggregatedfieldwells""", alias="HeatMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapFieldWells:
        from troposphere.quicksight import HeatMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html
    Properties:
        - Name: HeatMapRowSort
        - Name: HeatMapRowItemsLimitConfiguration
        - Name: HeatMapColumnItemsLimitConfiguration
        - Name: HeatMapColumnSort
    
    """
    
    HeatMapRowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html#cfn-quicksight-template-heatmapsortconfiguration-heatmaprowsort""", alias="HeatMapRowSort")
    HeatMapRowItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html#cfn-quicksight-template-heatmapsortconfiguration-heatmaprowitemslimitconfiguration""", alias="HeatMapRowItemsLimitConfiguration")
    HeatMapColumnItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html#cfn-quicksight-template-heatmapsortconfiguration-heatmapcolumnitemslimitconfiguration""", alias="HeatMapColumnItemsLimitConfiguration")
    HeatMapColumnSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapsortconfiguration.html#cfn-quicksight-template-heatmapsortconfiguration-heatmapcolumnsort""", alias="HeatMapColumnSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapSortConfiguration:
        from troposphere.quicksight import HeatMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HeatMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HeatMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-heatmapvisual.html#cfn-quicksight-template-heatmapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HeatMapVisual:
        from troposphere.quicksight import HeatMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramaggregatedfieldwells.html#cfn-quicksight-template-histogramaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramAggregatedFieldWells:
        from troposphere.quicksight import HistogramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramBinOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html
    Properties:
        - Name: BinWidth
        - Name: StartValue
        - Name: SelectedBinType
        - Name: BinCount
    
    """
    
    BinWidth_: Optional['BinWidthOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html#cfn-quicksight-template-histogrambinoptions-binwidth""", alias="BinWidth")
    StartValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html#cfn-quicksight-template-histogrambinoptions-startvalue""", alias="StartValue")
    SelectedBinType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html#cfn-quicksight-template-histogrambinoptions-selectedbintype""", alias="SelectedBinType")
    BinCount_: Optional['BinCountOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogrambinoptions.html#cfn-quicksight-template-histogrambinoptions-bincount""", alias="BinCount")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramBinOptions:
        from troposphere.quicksight import HistogramBinOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html
    Properties:
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: BinOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-datalabels""", alias="DataLabels")
    BinOptions_: Optional['HistogramBinOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-binoptions""", alias="BinOptions")
    FieldWells_: Optional['HistogramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramconfiguration.html#cfn-quicksight-template-histogramconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramConfiguration:
        from troposphere.quicksight import HistogramConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramfieldwells.html
    Properties:
        - Name: HistogramAggregatedFieldWells
    
    """
    
    HistogramAggregatedFieldWells_: Optional['HistogramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramfieldwells.html#cfn-quicksight-template-histogramfieldwells-histogramaggregatedfieldwells""", alias="HistogramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramFieldWells:
        from troposphere.quicksight import HistogramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class HistogramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html#cfn-quicksight-template-histogramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html#cfn-quicksight-template-histogramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['HistogramConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html#cfn-quicksight-template-histogramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html#cfn-quicksight-template-histogramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-histogramvisual.html#cfn-quicksight-template-histogramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.HistogramVisual:
        from troposphere.quicksight import HistogramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightconfiguration.html
    Properties:
        - Name: Computations
        - Name: CustomNarrative
    
    """
    
    Computations_: Optional[List['Computation']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightconfiguration.html#cfn-quicksight-template-insightconfiguration-computations""", alias="Computations")
    CustomNarrative_: Optional['CustomNarrativeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightconfiguration.html#cfn-quicksight-template-insightconfiguration-customnarrative""", alias="CustomNarrative")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightConfiguration:
        from troposphere.quicksight import InsightConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class InsightVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: Actions
        - Name: DataSetIdentifier
        - Name: InsightConfiguration
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-visualid""", alias="VisualId")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-actions""", alias="Actions")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-datasetidentifier""", alias="DataSetIdentifier")
    InsightConfiguration_: Optional['InsightConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-insightconfiguration""", alias="InsightConfiguration")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-insightvisual.html#cfn-quicksight-template-insightvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.InsightVisual:
        from troposphere.quicksight import InsightVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerdefaultvalues.html#cfn-quicksight-template-integerdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[float]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerdefaultvalues.html#cfn-quicksight-template-integerdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerDefaultValues:
        from troposphere.quicksight import IntegerDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html#cfn-quicksight-template-integerparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['IntegerDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html#cfn-quicksight-template-integerparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html#cfn-quicksight-template-integerparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['IntegerValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html#cfn-quicksight-template-integerparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integerparameterdeclaration.html#cfn-quicksight-template-integerparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerParameterDeclaration:
        from troposphere.quicksight import IntegerParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class IntegerValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integervaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integervaluewhenunsetconfiguration.html#cfn-quicksight-template-integervaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-integervaluewhenunsetconfiguration.html#cfn-quicksight-template-integervaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.IntegerValueWhenUnsetConfiguration:
        from troposphere.quicksight import IntegerValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ItemsLimitConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-itemslimitconfiguration.html
    Properties:
        - Name: ItemsLimit
        - Name: OtherCategories
    
    """
    
    ItemsLimit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-itemslimitconfiguration.html#cfn-quicksight-template-itemslimitconfiguration-itemslimit""", alias="ItemsLimit")
    OtherCategories_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-itemslimitconfiguration.html#cfn-quicksight-template-itemslimitconfiguration-othercategories""", alias="OtherCategories")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ItemsLimitConfiguration:
        from troposphere.quicksight import ItemsLimitConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIActualValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiactualvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiactualvalueconditionalformatting.html#cfn-quicksight-template-kpiactualvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiactualvalueconditionalformatting.html#cfn-quicksight-template-kpiactualvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIActualValueConditionalFormatting:
        from troposphere.quicksight import KPIActualValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIComparisonValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpicomparisonvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-template-kpicomparisonvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpicomparisonvalueconditionalformatting.html#cfn-quicksight-template-kpicomparisonvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIComparisonValueConditionalFormatting:
        from troposphere.quicksight import KPIComparisonValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['KPIConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformatting.html#cfn-quicksight-template-kpiconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormatting:
        from troposphere.quicksight import KPIConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html
    Properties:
        - Name: PrimaryValue
        - Name: ActualValue
        - Name: ComparisonValue
        - Name: ProgressBar
    
    """
    
    PrimaryValue_: Optional['KPIPrimaryValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html#cfn-quicksight-template-kpiconditionalformattingoption-primaryvalue""", alias="PrimaryValue")
    ActualValue_: Optional['KPIActualValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html#cfn-quicksight-template-kpiconditionalformattingoption-actualvalue""", alias="ActualValue")
    ComparisonValue_: Optional['KPIComparisonValueConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html#cfn-quicksight-template-kpiconditionalformattingoption-comparisonvalue""", alias="ComparisonValue")
    ProgressBar_: Optional['KPIProgressBarConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconditionalformattingoption.html#cfn-quicksight-template-kpiconditionalformattingoption-progressbar""", alias="ProgressBar")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConditionalFormattingOption:
        from troposphere.quicksight import KPIConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: KPIOptions
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['KPISortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconfiguration.html#cfn-quicksight-template-kpiconfiguration-sortconfiguration""", alias="SortConfiguration")
    KPIOptions_: Optional['KPIOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconfiguration.html#cfn-quicksight-template-kpiconfiguration-kpioptions""", alias="KPIOptions")
    FieldWells_: Optional['KPIFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiconfiguration.html#cfn-quicksight-template-kpiconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIConfiguration:
        from troposphere.quicksight import KPIConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpifieldwells.html
    Properties:
        - Name: TargetValues
        - Name: TrendGroups
        - Name: Values
    
    """
    
    TargetValues_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpifieldwells.html#cfn-quicksight-template-kpifieldwells-targetvalues""", alias="TargetValues")
    TrendGroups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpifieldwells.html#cfn-quicksight-template-kpifieldwells-trendgroups""", alias="TrendGroups")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpifieldwells.html#cfn-quicksight-template-kpifieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIFieldWells:
        from troposphere.quicksight import KPIFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html
    Properties:
        - Name: SecondaryValueFontConfiguration
        - Name: VisualLayoutOptions
        - Name: TrendArrows
        - Name: SecondaryValue
        - Name: Comparison
        - Name: PrimaryValueDisplayType
        - Name: ProgressBar
        - Name: PrimaryValueFontConfiguration
        - Name: Sparkline
    
    """
    
    SecondaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-secondaryvaluefontconfiguration""", alias="SecondaryValueFontConfiguration")
    VisualLayoutOptions_: Optional['KPIVisualLayoutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-visuallayoutoptions""", alias="VisualLayoutOptions")
    TrendArrows_: Optional['TrendArrowOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-trendarrows""", alias="TrendArrows")
    SecondaryValue_: Optional['SecondaryValueOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-secondaryvalue""", alias="SecondaryValue")
    Comparison_: Optional['ComparisonConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-comparison""", alias="Comparison")
    PrimaryValueDisplayType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-primaryvaluedisplaytype""", alias="PrimaryValueDisplayType")
    ProgressBar_: Optional['ProgressBarOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-progressbar""", alias="ProgressBar")
    PrimaryValueFontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-primaryvaluefontconfiguration""", alias="PrimaryValueFontConfiguration")
    Sparkline_: Optional['KPISparklineOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpioptions.html#cfn-quicksight-template-kpioptions-sparkline""", alias="Sparkline")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIOptions:
        from troposphere.quicksight import KPIOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIPrimaryValueConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprimaryvalueconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: Icon
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-template-kpiprimaryvalueconditionalformatting-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprimaryvalueconditionalformatting.html#cfn-quicksight-template-kpiprimaryvalueconditionalformatting-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIPrimaryValueConditionalFormatting:
        from troposphere.quicksight import KPIPrimaryValueConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIProgressBarConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprogressbarconditionalformatting.html
    Properties:
        - Name: ForegroundColor
    
    """
    
    ForegroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpiprogressbarconditionalformatting.html#cfn-quicksight-template-kpiprogressbarconditionalformatting-foregroundcolor""", alias="ForegroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIProgressBarConditionalFormatting:
        from troposphere.quicksight import KPIProgressBarConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisortconfiguration.html
    Properties:
        - Name: TrendGroupSort
    
    """
    
    TrendGroupSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisortconfiguration.html#cfn-quicksight-template-kpisortconfiguration-trendgroupsort""", alias="TrendGroupSort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISortConfiguration:
        from troposphere.quicksight import KPISortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPISparklineOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisparklineoptions.html
    Properties:
        - Name: Type
        - Name: Color
        - Name: TooltipVisibility
        - Name: Visibility
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisparklineoptions.html#cfn-quicksight-template-kpisparklineoptions-type""", alias="Type")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisparklineoptions.html#cfn-quicksight-template-kpisparklineoptions-color""", alias="Color")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisparklineoptions.html#cfn-quicksight-template-kpisparklineoptions-tooltipvisibility""", alias="TooltipVisibility")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpisparklineoptions.html#cfn-quicksight-template-kpisparklineoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPISparklineOptions:
        from troposphere.quicksight import KPISparklineOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['KPIConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['KPIConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisual.html#cfn-quicksight-template-kpivisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisual:
        from troposphere.quicksight import KPIVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualLayoutOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisuallayoutoptions.html
    Properties:
        - Name: StandardLayout
    
    """
    
    StandardLayout_: Optional['KPIVisualStandardLayout'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisuallayoutoptions.html#cfn-quicksight-template-kpivisuallayoutoptions-standardlayout""", alias="StandardLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualLayoutOptions:
        from troposphere.quicksight import KPIVisualLayoutOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class KPIVisualStandardLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisualstandardlayout.html
    Properties:
        - Name: Type
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-kpivisualstandardlayout.html#cfn-quicksight-template-kpivisualstandardlayout-type""", alias="Type")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.KPIVisualStandardLayout:
        from troposphere.quicksight import KPIVisualStandardLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-labeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
        - Name: FontConfiguration
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-labeloptions.html#cfn-quicksight-template-labeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-labeloptions.html#cfn-quicksight-template-labeloptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-labeloptions.html#cfn-quicksight-template-labeloptions-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LabelOptions:
        from troposphere.quicksight import LabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Layout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'LayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layout.html#cfn-quicksight-template-layout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Layout:
        from troposphere.quicksight import Layout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layoutconfiguration.html
    Properties:
        - Name: GridLayout
        - Name: FreeFormLayout
        - Name: SectionBasedLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layoutconfiguration.html#cfn-quicksight-template-layoutconfiguration-gridlayout""", alias="GridLayout")
    FreeFormLayout_: Optional['FreeFormLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layoutconfiguration.html#cfn-quicksight-template-layoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    SectionBasedLayout_: Optional['SectionBasedLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-layoutconfiguration.html#cfn-quicksight-template-layoutconfiguration-sectionbasedlayout""", alias="SectionBasedLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LayoutConfiguration:
        from troposphere.quicksight import LayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LegendOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html
    Properties:
        - Name: Position
        - Name: Title
        - Name: Visibility
        - Name: Height
        - Name: Width
    
    """
    
    Position_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html#cfn-quicksight-template-legendoptions-position""", alias="Position")
    Title_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html#cfn-quicksight-template-legendoptions-title""", alias="Title")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html#cfn-quicksight-template-legendoptions-visibility""", alias="Visibility")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html#cfn-quicksight-template-legendoptions-height""", alias="Height")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-legendoptions.html#cfn-quicksight-template-legendoptions-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LegendOptions:
        from troposphere.quicksight import LegendOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Colors
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html#cfn-quicksight-template-linechartaggregatedfieldwells-category""", alias="Category")
    Colors_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html#cfn-quicksight-template-linechartaggregatedfieldwells-colors""", alias="Colors")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html#cfn-quicksight-template-linechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartaggregatedfieldwells.html#cfn-quicksight-template-linechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartAggregatedFieldWells:
        from troposphere.quicksight import LineChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: ReferenceLines
        - Name: DataLabels
        - Name: Tooltip
        - Name: SmallMultiplesOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
        - Name: DefaultSeriesSettings
        - Name: SecondaryYAxisLabelOptions
        - Name: ForecastConfigurations
        - Name: Series
        - Name: Type
        - Name: PrimaryYAxisLabelOptions
        - Name: ContributionAnalysisDefaults
        - Name: FieldWells
        - Name: SecondaryYAxisDisplayOptions
        - Name: XAxisLabelOptions
    
    """
    
    SortConfiguration_: Optional['LineChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-legend""", alias="Legend")
    ReferenceLines_: Optional[List['ReferenceLine']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-referencelines""", alias="ReferenceLines")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-datalabels""", alias="DataLabels")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-tooltip""", alias="Tooltip")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    PrimaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    DefaultSeriesSettings_: Optional['LineChartDefaultSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-defaultseriessettings""", alias="DefaultSeriesSettings")
    SecondaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-secondaryyaxislabeloptions""", alias="SecondaryYAxisLabelOptions")
    ForecastConfigurations_: Optional[List['ForecastConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-forecastconfigurations""", alias="ForecastConfigurations")
    Series_: Optional[List['SeriesItem']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-series""", alias="Series")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-type""", alias="Type")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    FieldWells_: Optional['LineChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-fieldwells""", alias="FieldWells")
    SecondaryYAxisDisplayOptions_: Optional['LineSeriesAxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-secondaryyaxisdisplayoptions""", alias="SecondaryYAxisDisplayOptions")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartconfiguration.html#cfn-quicksight-template-linechartconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartConfiguration:
        from troposphere.quicksight import LineChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartDefaultSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartdefaultseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: AxisBinding
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartdefaultseriessettings.html#cfn-quicksight-template-linechartdefaultseriessettings-linestylesettings""", alias="LineStyleSettings")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartdefaultseriessettings.html#cfn-quicksight-template-linechartdefaultseriessettings-axisbinding""", alias="AxisBinding")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartdefaultseriessettings.html#cfn-quicksight-template-linechartdefaultseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartDefaultSeriesSettings:
        from troposphere.quicksight import LineChartDefaultSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartfieldwells.html
    Properties:
        - Name: LineChartAggregatedFieldWells
    
    """
    
    LineChartAggregatedFieldWells_: Optional['LineChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartfieldwells.html#cfn-quicksight-template-linechartfieldwells-linechartaggregatedfieldwells""", alias="LineChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartFieldWells:
        from troposphere.quicksight import LineChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartLineStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html
    Properties:
        - Name: LineInterpolation
        - Name: LineStyle
        - Name: LineVisibility
        - Name: LineWidth
    
    """
    
    LineInterpolation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html#cfn-quicksight-template-linechartlinestylesettings-lineinterpolation""", alias="LineInterpolation")
    LineStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html#cfn-quicksight-template-linechartlinestylesettings-linestyle""", alias="LineStyle")
    LineVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html#cfn-quicksight-template-linechartlinestylesettings-linevisibility""", alias="LineVisibility")
    LineWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartlinestylesettings.html#cfn-quicksight-template-linechartlinestylesettings-linewidth""", alias="LineWidth")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartLineStyleSettings:
        from troposphere.quicksight import LineChartLineStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartMarkerStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html
    Properties:
        - Name: MarkerShape
        - Name: MarkerSize
        - Name: MarkerVisibility
        - Name: MarkerColor
    
    """
    
    MarkerShape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html#cfn-quicksight-template-linechartmarkerstylesettings-markershape""", alias="MarkerShape")
    MarkerSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html#cfn-quicksight-template-linechartmarkerstylesettings-markersize""", alias="MarkerSize")
    MarkerVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html#cfn-quicksight-template-linechartmarkerstylesettings-markervisibility""", alias="MarkerVisibility")
    MarkerColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartmarkerstylesettings.html#cfn-quicksight-template-linechartmarkerstylesettings-markercolor""", alias="MarkerColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartMarkerStyleSettings:
        from troposphere.quicksight import LineChartMarkerStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartseriessettings.html
    Properties:
        - Name: LineStyleSettings
        - Name: MarkerStyleSettings
    
    """
    
    LineStyleSettings_: Optional['LineChartLineStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartseriessettings.html#cfn-quicksight-template-linechartseriessettings-linestylesettings""", alias="LineStyleSettings")
    MarkerStyleSettings_: Optional['LineChartMarkerStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartseriessettings.html#cfn-quicksight-template-linechartseriessettings-markerstylesettings""", alias="MarkerStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSeriesSettings:
        from troposphere.quicksight import LineChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimitConfiguration
        - Name: ColorItemsLimitConfiguration
        - Name: SmallMultiplesSort
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    CategoryItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html#cfn-quicksight-template-linechartsortconfiguration-categoryitemslimitconfiguration""", alias="CategoryItemsLimitConfiguration")
    ColorItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html#cfn-quicksight-template-linechartsortconfiguration-coloritemslimitconfiguration""", alias="ColorItemsLimitConfiguration")
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html#cfn-quicksight-template-linechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html#cfn-quicksight-template-linechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartsortconfiguration.html#cfn-quicksight-template-linechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartSortConfiguration:
        from troposphere.quicksight import LineChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['LineChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-linechartvisual.html#cfn-quicksight-template-linechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineChartVisual:
        from troposphere.quicksight import LineChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LineSeriesAxisDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-lineseriesaxisdisplayoptions.html
    Properties:
        - Name: MissingDataConfigurations
        - Name: AxisOptions
    
    """
    
    MissingDataConfigurations_: Optional[List['MissingDataConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-lineseriesaxisdisplayoptions.html#cfn-quicksight-template-lineseriesaxisdisplayoptions-missingdataconfigurations""", alias="MissingDataConfigurations")
    AxisOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-lineseriesaxisdisplayoptions.html#cfn-quicksight-template-lineseriesaxisdisplayoptions-axisoptions""", alias="AxisOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LineSeriesAxisDisplayOptions:
        from troposphere.quicksight import LineSeriesAxisDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: SearchOptions
        - Name: SelectAllOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html#cfn-quicksight-template-listcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    SearchOptions_: Optional['ListControlSearchOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html#cfn-quicksight-template-listcontroldisplayoptions-searchoptions""", alias="SearchOptions")
    SelectAllOptions_: Optional['ListControlSelectAllOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html#cfn-quicksight-template-listcontroldisplayoptions-selectalloptions""", alias="SelectAllOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontroldisplayoptions.html#cfn-quicksight-template-listcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlDisplayOptions:
        from troposphere.quicksight import ListControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSearchOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolsearchoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolsearchoptions.html#cfn-quicksight-template-listcontrolsearchoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSearchOptions:
        from troposphere.quicksight import ListControlSearchOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ListControlSelectAllOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolselectalloptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-listcontrolselectalloptions.html#cfn-quicksight-template-listcontrolselectalloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ListControlSelectAllOptions:
        from troposphere.quicksight import ListControlSelectAllOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LoadingAnimation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-loadinganimation.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-loadinganimation.html#cfn-quicksight-template-loadinganimation-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LoadingAnimation:
        from troposphere.quicksight import LoadingAnimation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LocalNavigationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-localnavigationconfiguration.html
    Properties:
        - Name: TargetSheetId
    
    """
    
    TargetSheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-localnavigationconfiguration.html#cfn-quicksight-template-localnavigationconfiguration-targetsheetid""", alias="TargetSheetId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LocalNavigationConfiguration:
        from troposphere.quicksight import LocalNavigationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class LongFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-longformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-longformattext.html#cfn-quicksight-template-longformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-longformattext.html#cfn-quicksight-template-longformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.LongFormatText:
        from troposphere.quicksight import LongFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MappedDataSetParameter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-mappeddatasetparameter.html
    Properties:
        - Name: DataSetParameterName
        - Name: DataSetIdentifier
    
    """
    
    DataSetParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-mappeddatasetparameter.html#cfn-quicksight-template-mappeddatasetparameter-datasetparametername""", alias="DataSetParameterName")
    DataSetIdentifier_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-mappeddatasetparameter.html#cfn-quicksight-template-mappeddatasetparameter-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MappedDataSetParameter:
        from troposphere.quicksight import MappedDataSetParameter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumlabeltype.html#cfn-quicksight-template-maximumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumLabelType:
        from troposphere.quicksight import MaximumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MaximumMinimumComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html
    Properties:
        - Name: Type
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html#cfn-quicksight-template-maximumminimumcomputation-type""", alias="Type")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html#cfn-quicksight-template-maximumminimumcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html#cfn-quicksight-template-maximumminimumcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html#cfn-quicksight-template-maximumminimumcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-maximumminimumcomputation.html#cfn-quicksight-template-maximumminimumcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MaximumMinimumComputation:
        from troposphere.quicksight import MaximumMinimumComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html
    Properties:
        - Name: DateMeasureField
        - Name: NumericalMeasureField
        - Name: CategoricalMeasureField
        - Name: CalculatedMeasureField
    
    """
    
    DateMeasureField_: Optional['DateMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html#cfn-quicksight-template-measurefield-datemeasurefield""", alias="DateMeasureField")
    NumericalMeasureField_: Optional['NumericalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html#cfn-quicksight-template-measurefield-numericalmeasurefield""", alias="NumericalMeasureField")
    CategoricalMeasureField_: Optional['CategoricalMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html#cfn-quicksight-template-measurefield-categoricalmeasurefield""", alias="CategoricalMeasureField")
    CalculatedMeasureField_: Optional['CalculatedMeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-measurefield.html#cfn-quicksight-template-measurefield-calculatedmeasurefield""", alias="CalculatedMeasureField")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MeasureField:
        from troposphere.quicksight import MeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MetricComparisonComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html
    Properties:
        - Name: TargetValue
        - Name: Time
        - Name: ComputationId
        - Name: FromValue
        - Name: Name
    
    """
    
    TargetValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html#cfn-quicksight-template-metriccomparisoncomputation-targetvalue""", alias="TargetValue")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html#cfn-quicksight-template-metriccomparisoncomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html#cfn-quicksight-template-metriccomparisoncomputation-computationid""", alias="ComputationId")
    FromValue_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html#cfn-quicksight-template-metriccomparisoncomputation-fromvalue""", alias="FromValue")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-metriccomparisoncomputation.html#cfn-quicksight-template-metriccomparisoncomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MetricComparisonComputation:
        from troposphere.quicksight import MetricComparisonComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MinimumLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-minimumlabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-minimumlabeltype.html#cfn-quicksight-template-minimumlabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MinimumLabelType:
        from troposphere.quicksight import MinimumLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MissingDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-missingdataconfiguration.html
    Properties:
        - Name: TreatmentOption
    
    """
    
    TreatmentOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-missingdataconfiguration.html#cfn-quicksight-template-missingdataconfiguration-treatmentoption""", alias="TreatmentOption")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MissingDataConfiguration:
        from troposphere.quicksight import MissingDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NegativeValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-negativevalueconfiguration.html
    Properties:
        - Name: DisplayMode
    
    """
    
    DisplayMode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-negativevalueconfiguration.html#cfn-quicksight-template-negativevalueconfiguration-displaymode""", alias="DisplayMode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NegativeValueConfiguration:
        from troposphere.quicksight import NegativeValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NullValueFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-nullvalueformatconfiguration.html
    Properties:
        - Name: NullString
    
    """
    
    NullString_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-nullvalueformatconfiguration.html#cfn-quicksight-template-nullvalueformatconfiguration-nullstring""", alias="NullString")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NullValueFormatConfiguration:
        from troposphere.quicksight import NullValueFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NumberScale
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NumberScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-numberscale""", alias="NumberScale")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberdisplayformatconfiguration.html#cfn-quicksight-template-numberdisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberDisplayFormatConfiguration:
        from troposphere.quicksight import NumberDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumberFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberformatconfiguration.html
    Properties:
        - Name: FormatConfiguration
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numberformatconfiguration.html#cfn-quicksight-template-numberformatconfiguration-formatconfiguration""", alias="FormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumberFormatConfiguration:
        from troposphere.quicksight import NumberFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericAxisOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaxisoptions.html
    Properties:
        - Name: Scale
        - Name: Range
    
    """
    
    Scale_: Optional['AxisScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaxisoptions.html#cfn-quicksight-template-numericaxisoptions-scale""", alias="Scale")
    Range_: Optional['AxisDisplayRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaxisoptions.html#cfn-quicksight-template-numericaxisoptions-range""", alias="Range")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericAxisOptions:
        from troposphere.quicksight import NumericAxisOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalitydrilldownfilter.html
    Properties:
        - Name: Column
        - Name: Value
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalitydrilldownfilter.html#cfn-quicksight-template-numericequalitydrilldownfilter-column""", alias="Column")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalitydrilldownfilter.html#cfn-quicksight-template-numericequalitydrilldownfilter-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityDrillDownFilter:
        from troposphere.quicksight import NumericEqualityDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: Value
        - Name: ParameterName
        - Name: NullOption
        - Name: MatchOperator
        - Name: SelectAllOptions
        - Name: FilterId
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-column""", alias="Column")
    Value_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-value""", alias="Value")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-nulloption""", alias="NullOption")
    MatchOperator_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-matchoperator""", alias="MatchOperator")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericequalityfilter.html#cfn-quicksight-template-numericequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericEqualityFilter:
        from troposphere.quicksight import NumericEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericformatconfiguration.html
    Properties:
        - Name: NumberDisplayFormatConfiguration
        - Name: CurrencyDisplayFormatConfiguration
        - Name: PercentageDisplayFormatConfiguration
    
    """
    
    NumberDisplayFormatConfiguration_: Optional['NumberDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericformatconfiguration.html#cfn-quicksight-template-numericformatconfiguration-numberdisplayformatconfiguration""", alias="NumberDisplayFormatConfiguration")
    CurrencyDisplayFormatConfiguration_: Optional['CurrencyDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericformatconfiguration.html#cfn-quicksight-template-numericformatconfiguration-currencydisplayformatconfiguration""", alias="CurrencyDisplayFormatConfiguration")
    PercentageDisplayFormatConfiguration_: Optional['PercentageDisplayFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericformatconfiguration.html#cfn-quicksight-template-numericformatconfiguration-percentagedisplayformatconfiguration""", alias="PercentageDisplayFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericFormatConfiguration:
        from troposphere.quicksight import NumericFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html
    Properties:
        - Name: AggregationFunction
        - Name: Column
        - Name: IncludeMaximum
        - Name: RangeMinimum
        - Name: NullOption
        - Name: SelectAllOptions
        - Name: FilterId
        - Name: RangeMaximum
        - Name: IncludeMinimum
    
    """
    
    AggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-aggregationfunction""", alias="AggregationFunction")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-column""", alias="Column")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-includemaximum""", alias="IncludeMaximum")
    RangeMinimum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-rangeminimum""", alias="RangeMinimum")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-nulloption""", alias="NullOption")
    SelectAllOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-selectalloptions""", alias="SelectAllOptions")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-filterid""", alias="FilterId")
    RangeMaximum_: Optional['NumericRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-rangemaximum""", alias="RangeMaximum")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefilter.html#cfn-quicksight-template-numericrangefilter-includeminimum""", alias="IncludeMinimum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilter:
        from troposphere.quicksight import NumericRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefiltervalue.html
    Properties:
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    StaticValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefiltervalue.html#cfn-quicksight-template-numericrangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericrangefiltervalue.html#cfn-quicksight-template-numericrangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericRangeFilterValue:
        from troposphere.quicksight import NumericRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericSeparatorConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericseparatorconfiguration.html
    Properties:
        - Name: DecimalSeparator
        - Name: ThousandsSeparator
    
    """
    
    DecimalSeparator_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericseparatorconfiguration.html#cfn-quicksight-template-numericseparatorconfiguration-decimalseparator""", alias="DecimalSeparator")
    ThousandsSeparator_: Optional['ThousandSeparatorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericseparatorconfiguration.html#cfn-quicksight-template-numericseparatorconfiguration-thousandsseparator""", alias="ThousandsSeparator")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericSeparatorConfiguration:
        from troposphere.quicksight import NumericSeparatorConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalaggregationfunction.html
    Properties:
        - Name: PercentileAggregation
        - Name: SimpleNumericalAggregation
    
    """
    
    PercentileAggregation_: Optional['PercentileAggregation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalaggregationfunction.html#cfn-quicksight-template-numericalaggregationfunction-percentileaggregation""", alias="PercentileAggregation")
    SimpleNumericalAggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalaggregationfunction.html#cfn-quicksight-template-numericalaggregationfunction-simplenumericalaggregation""", alias="SimpleNumericalAggregation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalAggregationFunction:
        from troposphere.quicksight import NumericalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalDimensionField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html
    Properties:
        - Name: HierarchyId
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    HierarchyId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html#cfn-quicksight-template-numericaldimensionfield-hierarchyid""", alias="HierarchyId")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html#cfn-quicksight-template-numericaldimensionfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html#cfn-quicksight-template-numericaldimensionfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericaldimensionfield.html#cfn-quicksight-template-numericaldimensionfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalDimensionField:
        from troposphere.quicksight import NumericalDimensionField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NumericalMeasureField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html
    Properties:
        - Name: AggregationFunction
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    AggregationFunction_: Optional['NumericalAggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html#cfn-quicksight-template-numericalmeasurefield-aggregationfunction""", alias="AggregationFunction")
    FormatConfiguration_: Optional['NumberFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html#cfn-quicksight-template-numericalmeasurefield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html#cfn-quicksight-template-numericalmeasurefield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-numericalmeasurefield.html#cfn-quicksight-template-numericalmeasurefield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NumericalMeasureField:
        from troposphere.quicksight import NumericalMeasureField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PaginationConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paginationconfiguration.html
    Properties:
        - Name: PageSize
        - Name: PageNumber
    
    """
    
    PageSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paginationconfiguration.html#cfn-quicksight-template-paginationconfiguration-pagesize""", alias="PageSize")
    PageNumber_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paginationconfiguration.html#cfn-quicksight-template-paginationconfiguration-pagenumber""", alias="PageNumber")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PaginationConfiguration:
        from troposphere.quicksight import PaginationConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html
    Properties:
        - Name: BorderThickness
        - Name: BorderStyle
        - Name: GutterSpacing
        - Name: BackgroundVisibility
        - Name: BorderVisibility
        - Name: BorderColor
        - Name: Title
        - Name: GutterVisibility
        - Name: BackgroundColor
    
    """
    
    BorderThickness_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-borderthickness""", alias="BorderThickness")
    BorderStyle_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-borderstyle""", alias="BorderStyle")
    GutterSpacing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-gutterspacing""", alias="GutterSpacing")
    BackgroundVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-backgroundvisibility""", alias="BackgroundVisibility")
    BorderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-bordervisibility""", alias="BorderVisibility")
    BorderColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-bordercolor""", alias="BorderColor")
    Title_: Optional['PanelTitleOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-title""", alias="Title")
    GutterVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-guttervisibility""", alias="GutterVisibility")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-panelconfiguration.html#cfn-quicksight-template-panelconfiguration-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelConfiguration:
        from troposphere.quicksight import PanelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PanelTitleOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paneltitleoptions.html
    Properties:
        - Name: Visibility
        - Name: FontConfiguration
        - Name: HorizontalTextAlignment
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paneltitleoptions.html#cfn-quicksight-template-paneltitleoptions-visibility""", alias="Visibility")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paneltitleoptions.html#cfn-quicksight-template-paneltitleoptions-fontconfiguration""", alias="FontConfiguration")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-paneltitleoptions.html#cfn-quicksight-template-paneltitleoptions-horizontaltextalignment""", alias="HorizontalTextAlignment")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PanelTitleOptions:
        from troposphere.quicksight import PanelTitleOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html
    Properties:
        - Name: Slider
        - Name: TextArea
        - Name: Dropdown
        - Name: TextField
        - Name: List
        - Name: DateTimePicker
    
    """
    
    Slider_: Optional['ParameterSliderControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-slider""", alias="Slider")
    TextArea_: Optional['ParameterTextAreaControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-textarea""", alias="TextArea")
    Dropdown_: Optional['ParameterDropDownControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-dropdown""", alias="Dropdown")
    TextField_: Optional['ParameterTextFieldControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-textfield""", alias="TextField")
    List_: Optional['ParameterListControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-list""", alias="List")
    DateTimePicker_: Optional['ParameterDateTimePickerControl'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametercontrol.html#cfn-quicksight-template-parametercontrol-datetimepicker""", alias="DateTimePicker")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterControl:
        from troposphere.quicksight import ParameterControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDateTimePickerControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html#cfn-quicksight-template-parameterdatetimepickercontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['DateTimePickerControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html#cfn-quicksight-template-parameterdatetimepickercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html#cfn-quicksight-template-parameterdatetimepickercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdatetimepickercontrol.html#cfn-quicksight-template-parameterdatetimepickercontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDateTimePickerControl:
        from troposphere.quicksight import ParameterDateTimePickerControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html
    Properties:
        - Name: StringParameterDeclaration
        - Name: DateTimeParameterDeclaration
        - Name: DecimalParameterDeclaration
        - Name: IntegerParameterDeclaration
    
    """
    
    StringParameterDeclaration_: Optional['StringParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html#cfn-quicksight-template-parameterdeclaration-stringparameterdeclaration""", alias="StringParameterDeclaration")
    DateTimeParameterDeclaration_: Optional['DateTimeParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html#cfn-quicksight-template-parameterdeclaration-datetimeparameterdeclaration""", alias="DateTimeParameterDeclaration")
    DecimalParameterDeclaration_: Optional['DecimalParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html#cfn-quicksight-template-parameterdeclaration-decimalparameterdeclaration""", alias="DecimalParameterDeclaration")
    IntegerParameterDeclaration_: Optional['IntegerParameterDeclaration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdeclaration.html#cfn-quicksight-template-parameterdeclaration-integerparameterdeclaration""", alias="IntegerParameterDeclaration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDeclaration:
        from troposphere.quicksight import ParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterDropDownControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-type""", alias="Type")
    DisplayOptions_: Optional['DropDownControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterdropdowncontrol.html#cfn-quicksight-template-parameterdropdowncontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterDropDownControl:
        from troposphere.quicksight import ParameterDropDownControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterListControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Type
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: CascadingControlConfiguration
        - Name: Title
        - Name: SelectableValues
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-parametercontrolid""", alias="ParameterControlId")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-type""", alias="Type")
    DisplayOptions_: Optional['ListControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-sourceparametername""", alias="SourceParameterName")
    CascadingControlConfiguration_: Optional['CascadingControlConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-cascadingcontrolconfiguration""", alias="CascadingControlConfiguration")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-title""", alias="Title")
    SelectableValues_: Optional['ParameterSelectableValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterlistcontrol.html#cfn-quicksight-template-parameterlistcontrol-selectablevalues""", alias="SelectableValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterListControl:
        from troposphere.quicksight import ParameterListControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSelectableValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterselectablevalues.html
    Properties:
        - Name: LinkToDataSetColumn
        - Name: Values
    
    """
    
    LinkToDataSetColumn_: Optional['ColumnIdentifier'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterselectablevalues.html#cfn-quicksight-template-parameterselectablevalues-linktodatasetcolumn""", alias="LinkToDataSetColumn")
    Values_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterselectablevalues.html#cfn-quicksight-template-parameterselectablevalues-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSelectableValues:
        from troposphere.quicksight import ParameterSelectableValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterSliderControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: StepSize
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
        - Name: MaximumValue
        - Name: MinimumValue
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-parametercontrolid""", alias="ParameterControlId")
    StepSize_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-stepsize""", alias="StepSize")
    DisplayOptions_: Optional['SliderControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-title""", alias="Title")
    MaximumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-maximumvalue""", alias="MaximumValue")
    MinimumValue_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parameterslidercontrol.html#cfn-quicksight-template-parameterslidercontrol-minimumvalue""", alias="MinimumValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterSliderControl:
        from troposphere.quicksight import ParameterSliderControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextAreaControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: Delimiter
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html#cfn-quicksight-template-parametertextareacontrol-parametercontrolid""", alias="ParameterControlId")
    Delimiter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html#cfn-quicksight-template-parametertextareacontrol-delimiter""", alias="Delimiter")
    DisplayOptions_: Optional['TextAreaControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html#cfn-quicksight-template-parametertextareacontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html#cfn-quicksight-template-parametertextareacontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextareacontrol.html#cfn-quicksight-template-parametertextareacontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextAreaControl:
        from troposphere.quicksight import ParameterTextAreaControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ParameterTextFieldControl(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html
    Properties:
        - Name: ParameterControlId
        - Name: DisplayOptions
        - Name: SourceParameterName
        - Name: Title
    
    """
    
    ParameterControlId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html#cfn-quicksight-template-parametertextfieldcontrol-parametercontrolid""", alias="ParameterControlId")
    DisplayOptions_: Optional['TextFieldControlDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html#cfn-quicksight-template-parametertextfieldcontrol-displayoptions""", alias="DisplayOptions")
    SourceParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html#cfn-quicksight-template-parametertextfieldcontrol-sourceparametername""", alias="SourceParameterName")
    Title_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-parametertextfieldcontrol.html#cfn-quicksight-template-parametertextfieldcontrol-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ParameterTextFieldControl:
        from troposphere.quicksight import ParameterTextFieldControl as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentVisibleRange(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentvisiblerange.html
    Properties:
        - Name: From
        - Name: To
    
    """
    
    From_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentvisiblerange.html#cfn-quicksight-template-percentvisiblerange-from""", alias="From")
    To_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentvisiblerange.html#cfn-quicksight-template-percentvisiblerange-to""", alias="To")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentVisibleRange:
        from troposphere.quicksight import PercentVisibleRange as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentageDisplayFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html
    Properties:
        - Name: NegativeValueConfiguration
        - Name: DecimalPlacesConfiguration
        - Name: NullValueFormatConfiguration
        - Name: Suffix
        - Name: SeparatorConfiguration
        - Name: Prefix
    
    """
    
    NegativeValueConfiguration_: Optional['NegativeValueConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-negativevalueconfiguration""", alias="NegativeValueConfiguration")
    DecimalPlacesConfiguration_: Optional['DecimalPlacesConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-decimalplacesconfiguration""", alias="DecimalPlacesConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-suffix""", alias="Suffix")
    SeparatorConfiguration_: Optional['NumericSeparatorConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-separatorconfiguration""", alias="SeparatorConfiguration")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentagedisplayformatconfiguration.html#cfn-quicksight-template-percentagedisplayformatconfiguration-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentageDisplayFormatConfiguration:
        from troposphere.quicksight import PercentageDisplayFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PercentileAggregation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentileaggregation.html
    Properties:
        - Name: PercentileValue
    
    """
    
    PercentileValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-percentileaggregation.html#cfn-quicksight-template-percentileaggregation-percentilevalue""", alias="PercentileValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PercentileAggregation:
        from troposphere.quicksight import PercentileAggregation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodOverPeriodComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html
    Properties:
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html#cfn-quicksight-template-periodoverperiodcomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html#cfn-quicksight-template-periodoverperiodcomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html#cfn-quicksight-template-periodoverperiodcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodoverperiodcomputation.html#cfn-quicksight-template-periodoverperiodcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodOverPeriodComputation:
        from troposphere.quicksight import PeriodOverPeriodComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PeriodToDateComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html
    Properties:
        - Name: PeriodTimeGranularity
        - Name: Value
        - Name: Time
        - Name: ComputationId
        - Name: Name
    
    """
    
    PeriodTimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html#cfn-quicksight-template-periodtodatecomputation-periodtimegranularity""", alias="PeriodTimeGranularity")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html#cfn-quicksight-template-periodtodatecomputation-value""", alias="Value")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html#cfn-quicksight-template-periodtodatecomputation-time""", alias="Time")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html#cfn-quicksight-template-periodtodatecomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-periodtodatecomputation.html#cfn-quicksight-template-periodtodatecomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PeriodToDateComputation:
        from troposphere.quicksight import PeriodToDateComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Values
        - Name: SmallMultiples
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartaggregatedfieldwells.html#cfn-quicksight-template-piechartaggregatedfieldwells-category""", alias="Category")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartaggregatedfieldwells.html#cfn-quicksight-template-piechartaggregatedfieldwells-values""", alias="Values")
    SmallMultiples_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartaggregatedfieldwells.html#cfn-quicksight-template-piechartaggregatedfieldwells-smallmultiples""", alias="SmallMultiples")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartAggregatedFieldWells:
        from troposphere.quicksight import PieChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ContributionAnalysisDefaults
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: DonutOptions
        - Name: SmallMultiplesOptions
        - Name: ValueLabelOptions
        - Name: VisualPalette
    
    """
    
    SortConfiguration_: Optional['PieChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-datalabels""", alias="DataLabels")
    ContributionAnalysisDefaults_: Optional[List['ContributionAnalysisDefault']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-contributionanalysisdefaults""", alias="ContributionAnalysisDefaults")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['PieChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-tooltip""", alias="Tooltip")
    DonutOptions_: Optional['DonutOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-donutoptions""", alias="DonutOptions")
    SmallMultiplesOptions_: Optional['SmallMultiplesOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-smallmultiplesoptions""", alias="SmallMultiplesOptions")
    ValueLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-valuelabeloptions""", alias="ValueLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartconfiguration.html#cfn-quicksight-template-piechartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartConfiguration:
        from troposphere.quicksight import PieChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartfieldwells.html
    Properties:
        - Name: PieChartAggregatedFieldWells
    
    """
    
    PieChartAggregatedFieldWells_: Optional['PieChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartfieldwells.html#cfn-quicksight-template-piechartfieldwells-piechartaggregatedfieldwells""", alias="PieChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartFieldWells:
        from troposphere.quicksight import PieChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html
    Properties:
        - Name: SmallMultiplesSort
        - Name: CategoryItemsLimit
        - Name: CategorySort
        - Name: SmallMultiplesLimitConfiguration
    
    """
    
    SmallMultiplesSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html#cfn-quicksight-template-piechartsortconfiguration-smallmultiplessort""", alias="SmallMultiplesSort")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html#cfn-quicksight-template-piechartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html#cfn-quicksight-template-piechartsortconfiguration-categorysort""", alias="CategorySort")
    SmallMultiplesLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartsortconfiguration.html#cfn-quicksight-template-piechartsortconfiguration-smallmultipleslimitconfiguration""", alias="SmallMultiplesLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartSortConfiguration:
        from troposphere.quicksight import PieChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PieChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PieChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-piechartvisual.html#cfn-quicksight-template-piechartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PieChartVisual:
        from troposphere.quicksight import PieChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotFieldSortOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivotfieldsortoptions.html
    Properties:
        - Name: SortBy
        - Name: FieldId
    
    """
    
    SortBy_: 'PivotTableSortBy' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivotfieldsortoptions.html#cfn-quicksight-template-pivotfieldsortoptions-sortby""", alias="SortBy")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivotfieldsortoptions.html#cfn-quicksight-template-pivotfieldsortoptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotFieldSortOptions:
        from troposphere.quicksight import PivotFieldSortOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableaggregatedfieldwells.html
    Properties:
        - Name: Values
        - Name: Columns
        - Name: Rows
    
    """
    
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableaggregatedfieldwells.html#cfn-quicksight-template-pivottableaggregatedfieldwells-values""", alias="Values")
    Columns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableaggregatedfieldwells.html#cfn-quicksight-template-pivottableaggregatedfieldwells-columns""", alias="Columns")
    Rows_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableaggregatedfieldwells.html#cfn-quicksight-template-pivottableaggregatedfieldwells-rows""", alias="Rows")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableAggregatedFieldWells:
        from troposphere.quicksight import PivotTableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html
    Properties:
        - Name: Scope
        - Name: Scopes
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    Scope_: Optional['PivotTableConditionalFormattingScope'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html#cfn-quicksight-template-pivottablecellconditionalformatting-scope""", alias="Scope")
    Scopes_: Optional[List['PivotTableConditionalFormattingScope']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html#cfn-quicksight-template-pivottablecellconditionalformatting-scopes""", alias="Scopes")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html#cfn-quicksight-template-pivottablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablecellconditionalformatting.html#cfn-quicksight-template-pivottablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableCellConditionalFormatting:
        from troposphere.quicksight import PivotTableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['PivotTableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformatting.html#cfn-quicksight-template-pivottableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormatting:
        from troposphere.quicksight import PivotTableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingoption.html
    Properties:
        - Name: Cell
    
    """
    
    Cell_: Optional['PivotTableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingoption.html#cfn-quicksight-template-pivottableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingOption:
        from troposphere.quicksight import PivotTableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConditionalFormattingScope(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingscope.html
    Properties:
        - Name: Role
    
    """
    
    Role_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconditionalformattingscope.html#cfn-quicksight-template-pivottableconditionalformattingscope-role""", alias="Role")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConditionalFormattingScope:
        from troposphere.quicksight import PivotTableConditionalFormattingScope as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['PivotTableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['PivotTablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['PivotTableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-tableoptions""", alias="TableOptions")
    FieldWells_: Optional['PivotTableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['PivotTableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['PivotTableTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableconfiguration.html#cfn-quicksight-template-pivottableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableConfiguration:
        from troposphere.quicksight import PivotTableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableDataPathOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabledatapathoption.html
    Properties:
        - Name: DataPathList
        - Name: Width
    
    """
    
    DataPathList_: List['DataPathValue'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabledatapathoption.html#cfn-quicksight-template-pivottabledatapathoption-datapathlist""", alias="DataPathList")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabledatapathoption.html#cfn-quicksight-template-pivottabledatapathoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableDataPathOption:
        from troposphere.quicksight import PivotTableDataPathOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestateoption.html
    Properties:
        - Name: Target
        - Name: State
    
    """
    
    Target_: 'PivotTableFieldCollapseStateTarget' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestateoption.html#cfn-quicksight-template-pivottablefieldcollapsestateoption-target""", alias="Target")
    State_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestateoption.html#cfn-quicksight-template-pivottablefieldcollapsestateoption-state""", alias="State")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateOption:
        from troposphere.quicksight import PivotTableFieldCollapseStateOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldCollapseStateTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestatetarget.html
    Properties:
        - Name: FieldId
        - Name: FieldDataPathValues
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestatetarget.html#cfn-quicksight-template-pivottablefieldcollapsestatetarget-fieldid""", alias="FieldId")
    FieldDataPathValues_: Optional[List['DataPathValue']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldcollapsestatetarget.html#cfn-quicksight-template-pivottablefieldcollapsestatetarget-fielddatapathvalues""", alias="FieldDataPathValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldCollapseStateTarget:
        from troposphere.quicksight import PivotTableFieldCollapseStateTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: FieldId
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoption.html#cfn-quicksight-template-pivottablefieldoption-customlabel""", alias="CustomLabel")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoption.html#cfn-quicksight-template-pivottablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoption.html#cfn-quicksight-template-pivottablefieldoption-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOption:
        from troposphere.quicksight import PivotTableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoptions.html
    Properties:
        - Name: CollapseStateOptions
        - Name: DataPathOptions
        - Name: SelectedFieldOptions
    
    """
    
    CollapseStateOptions_: Optional[List['PivotTableFieldCollapseStateOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoptions.html#cfn-quicksight-template-pivottablefieldoptions-collapsestateoptions""", alias="CollapseStateOptions")
    DataPathOptions_: Optional[List['PivotTableDataPathOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoptions.html#cfn-quicksight-template-pivottablefieldoptions-datapathoptions""", alias="DataPathOptions")
    SelectedFieldOptions_: Optional[List['PivotTableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldoptions.html#cfn-quicksight-template-pivottablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldOptions:
        from troposphere.quicksight import PivotTableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldSubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldsubtotaloptions.html
    Properties:
        - Name: FieldId
    
    """
    
    FieldId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldsubtotaloptions.html#cfn-quicksight-template-pivottablefieldsubtotaloptions-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldSubtotalOptions:
        from troposphere.quicksight import PivotTableFieldSubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldwells.html
    Properties:
        - Name: PivotTableAggregatedFieldWells
    
    """
    
    PivotTableAggregatedFieldWells_: Optional['PivotTableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablefieldwells.html#cfn-quicksight-template-pivottablefieldwells-pivottableaggregatedfieldwells""", alias="PivotTableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableFieldWells:
        from troposphere.quicksight import PivotTableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html
    Properties:
        - Name: RowFieldNamesStyle
        - Name: RowHeaderStyle
        - Name: CollapsedRowDimensionsVisibility
        - Name: RowsLayout
        - Name: MetricPlacement
        - Name: DefaultCellWidth
        - Name: ColumnNamesVisibility
        - Name: RowsLabelOptions
        - Name: SingleMetricVisibility
        - Name: ColumnHeaderStyle
        - Name: ToggleButtonsVisibility
        - Name: CellStyle
        - Name: RowAlternateColorOptions
    
    """
    
    RowFieldNamesStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-rowfieldnamesstyle""", alias="RowFieldNamesStyle")
    RowHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-rowheaderstyle""", alias="RowHeaderStyle")
    CollapsedRowDimensionsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-collapsedrowdimensionsvisibility""", alias="CollapsedRowDimensionsVisibility")
    RowsLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-rowslayout""", alias="RowsLayout")
    MetricPlacement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-metricplacement""", alias="MetricPlacement")
    DefaultCellWidth_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-defaultcellwidth""", alias="DefaultCellWidth")
    ColumnNamesVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-columnnamesvisibility""", alias="ColumnNamesVisibility")
    RowsLabelOptions_: Optional['PivotTableRowsLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-rowslabeloptions""", alias="RowsLabelOptions")
    SingleMetricVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-singlemetricvisibility""", alias="SingleMetricVisibility")
    ColumnHeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-columnheaderstyle""", alias="ColumnHeaderStyle")
    ToggleButtonsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-togglebuttonsvisibility""", alias="ToggleButtonsVisibility")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-cellstyle""", alias="CellStyle")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottableoptions.html#cfn-quicksight-template-pivottableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableOptions:
        from troposphere.quicksight import PivotTableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablepaginatedreportoptions.html#cfn-quicksight-template-pivottablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablepaginatedreportoptions.html#cfn-quicksight-template-pivottablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTablePaginatedReportOptions:
        from troposphere.quicksight import PivotTablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableRowsLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablerowslabeloptions.html
    Properties:
        - Name: CustomLabel
        - Name: Visibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablerowslabeloptions.html#cfn-quicksight-template-pivottablerowslabeloptions-customlabel""", alias="CustomLabel")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablerowslabeloptions.html#cfn-quicksight-template-pivottablerowslabeloptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableRowsLabelOptions:
        from troposphere.quicksight import PivotTableRowsLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortBy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortby.html
    Properties:
        - Name: Field
        - Name: DataPath
        - Name: Column
    
    """
    
    Field_: Optional['FieldSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortby.html#cfn-quicksight-template-pivottablesortby-field""", alias="Field")
    DataPath_: Optional['DataPathSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortby.html#cfn-quicksight-template-pivottablesortby-datapath""", alias="DataPath")
    Column_: Optional['ColumnSort'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortby.html#cfn-quicksight-template-pivottablesortby-column""", alias="Column")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortBy:
        from troposphere.quicksight import PivotTableSortBy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortconfiguration.html
    Properties:
        - Name: FieldSortOptions
    
    """
    
    FieldSortOptions_: Optional[List['PivotFieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablesortconfiguration.html#cfn-quicksight-template-pivottablesortconfiguration-fieldsortoptions""", alias="FieldSortOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableSortConfiguration:
        from troposphere.quicksight import PivotTableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html
    Properties:
        - Name: ColumnSubtotalOptions
        - Name: RowSubtotalOptions
        - Name: RowTotalOptions
        - Name: ColumnTotalOptions
    
    """
    
    ColumnSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html#cfn-quicksight-template-pivottabletotaloptions-columnsubtotaloptions""", alias="ColumnSubtotalOptions")
    RowSubtotalOptions_: Optional['SubtotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html#cfn-quicksight-template-pivottabletotaloptions-rowsubtotaloptions""", alias="RowSubtotalOptions")
    RowTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html#cfn-quicksight-template-pivottabletotaloptions-rowtotaloptions""", alias="RowTotalOptions")
    ColumnTotalOptions_: Optional['PivotTotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottabletotaloptions.html#cfn-quicksight-template-pivottabletotaloptions-columntotaloptions""", alias="ColumnTotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableTotalOptions:
        from troposphere.quicksight import PivotTableTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['PivotTableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['PivotTableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottablevisual.html#cfn-quicksight-template-pivottablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTableVisual:
        from troposphere.quicksight import PivotTableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PivotTotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ValueCellStyle
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: MetricHeaderCellStyle
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-valuecellstyle""", alias="ValueCellStyle")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-totalsvisibility""", alias="TotalsVisibility")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-pivottotaloptions.html#cfn-quicksight-template-pivottotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PivotTotalOptions:
        from troposphere.quicksight import PivotTotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class PredefinedHierarchy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-predefinedhierarchy.html
    Properties:
        - Name: HierarchyId
        - Name: DrillDownFilters
        - Name: Columns
    
    """
    
    HierarchyId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-predefinedhierarchy.html#cfn-quicksight-template-predefinedhierarchy-hierarchyid""", alias="HierarchyId")
    DrillDownFilters_: Optional[List['DrillDownFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-predefinedhierarchy.html#cfn-quicksight-template-predefinedhierarchy-drilldownfilters""", alias="DrillDownFilters")
    Columns_: List['ColumnIdentifier'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-predefinedhierarchy.html#cfn-quicksight-template-predefinedhierarchy-columns""", alias="Columns")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.PredefinedHierarchy:
        from troposphere.quicksight import PredefinedHierarchy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ProgressBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-progressbaroptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-progressbaroptions.html#cfn-quicksight-template-progressbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ProgressBarOptions:
        from troposphere.quicksight import ProgressBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Color
        - Name: Values
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartaggregatedfieldwells.html#cfn-quicksight-template-radarchartaggregatedfieldwells-category""", alias="Category")
    Color_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartaggregatedfieldwells.html#cfn-quicksight-template-radarchartaggregatedfieldwells-color""", alias="Color")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartaggregatedfieldwells.html#cfn-quicksight-template-radarchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAggregatedFieldWells:
        from troposphere.quicksight import RadarChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartAreaStyleSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartareastylesettings.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartareastylesettings.html#cfn-quicksight-template-radarchartareastylesettings-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartAreaStyleSettings:
        from troposphere.quicksight import RadarChartAreaStyleSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: Shape
        - Name: BaseSeriesSettings
        - Name: ColorLabelOptions
        - Name: CategoryLabelOptions
        - Name: AxesRangeScale
        - Name: VisualPalette
        - Name: AlternateBandColorsVisibility
        - Name: StartAngle
        - Name: CategoryAxis
        - Name: FieldWells
        - Name: ColorAxis
        - Name: AlternateBandOddColor
        - Name: AlternateBandEvenColor
    
    """
    
    SortConfiguration_: Optional['RadarChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-legend""", alias="Legend")
    Shape_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-shape""", alias="Shape")
    BaseSeriesSettings_: Optional['RadarChartSeriesSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-baseseriessettings""", alias="BaseSeriesSettings")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    AxesRangeScale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-axesrangescale""", alias="AxesRangeScale")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-visualpalette""", alias="VisualPalette")
    AlternateBandColorsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-alternatebandcolorsvisibility""", alias="AlternateBandColorsVisibility")
    StartAngle_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-startangle""", alias="StartAngle")
    CategoryAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-categoryaxis""", alias="CategoryAxis")
    FieldWells_: Optional['RadarChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-fieldwells""", alias="FieldWells")
    ColorAxis_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-coloraxis""", alias="ColorAxis")
    AlternateBandOddColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-alternatebandoddcolor""", alias="AlternateBandOddColor")
    AlternateBandEvenColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartconfiguration.html#cfn-quicksight-template-radarchartconfiguration-alternatebandevencolor""", alias="AlternateBandEvenColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartConfiguration:
        from troposphere.quicksight import RadarChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartfieldwells.html
    Properties:
        - Name: RadarChartAggregatedFieldWells
    
    """
    
    RadarChartAggregatedFieldWells_: Optional['RadarChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartfieldwells.html#cfn-quicksight-template-radarchartfieldwells-radarchartaggregatedfieldwells""", alias="RadarChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartFieldWells:
        from troposphere.quicksight import RadarChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSeriesSettings(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartseriessettings.html
    Properties:
        - Name: AreaStyleSettings
    
    """
    
    AreaStyleSettings_: Optional['RadarChartAreaStyleSettings'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartseriessettings.html#cfn-quicksight-template-radarchartseriessettings-areastylesettings""", alias="AreaStyleSettings")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSeriesSettings:
        from troposphere.quicksight import RadarChartSeriesSettings as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html
    Properties:
        - Name: ColorSort
        - Name: ColorItemsLimit
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    ColorSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html#cfn-quicksight-template-radarchartsortconfiguration-colorsort""", alias="ColorSort")
    ColorItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html#cfn-quicksight-template-radarchartsortconfiguration-coloritemslimit""", alias="ColorItemsLimit")
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html#cfn-quicksight-template-radarchartsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartsortconfiguration.html#cfn-quicksight-template-radarchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartSortConfiguration:
        from troposphere.quicksight import RadarChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RadarChartVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['RadarChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-radarchartvisual.html#cfn-quicksight-template-radarchartvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RadarChartVisual:
        from troposphere.quicksight import RadarChartVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RangeEndsLabelType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rangeendslabeltype.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rangeendslabeltype.html#cfn-quicksight-template-rangeendslabeltype-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RangeEndsLabelType:
        from troposphere.quicksight import RangeEndsLabelType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLine(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html
    Properties:
        - Name: Status
        - Name: DataConfiguration
        - Name: LabelConfiguration
        - Name: StyleConfiguration
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html#cfn-quicksight-template-referenceline-status""", alias="Status")
    DataConfiguration_: 'ReferenceLineDataConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html#cfn-quicksight-template-referenceline-dataconfiguration""", alias="DataConfiguration")
    LabelConfiguration_: Optional['ReferenceLineLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html#cfn-quicksight-template-referenceline-labelconfiguration""", alias="LabelConfiguration")
    StyleConfiguration_: Optional['ReferenceLineStyleConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referenceline.html#cfn-quicksight-template-referenceline-styleconfiguration""", alias="StyleConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLine:
        from troposphere.quicksight import ReferenceLine as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineCustomLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinecustomlabelconfiguration.html
    Properties:
        - Name: CustomLabel
    
    """
    
    CustomLabel_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinecustomlabelconfiguration.html#cfn-quicksight-template-referencelinecustomlabelconfiguration-customlabel""", alias="CustomLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineCustomLabelConfiguration:
        from troposphere.quicksight import ReferenceLineCustomLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html
    Properties:
        - Name: DynamicConfiguration
        - Name: AxisBinding
        - Name: SeriesType
        - Name: StaticConfiguration
    
    """
    
    DynamicConfiguration_: Optional['ReferenceLineDynamicDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html#cfn-quicksight-template-referencelinedataconfiguration-dynamicconfiguration""", alias="DynamicConfiguration")
    AxisBinding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html#cfn-quicksight-template-referencelinedataconfiguration-axisbinding""", alias="AxisBinding")
    SeriesType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html#cfn-quicksight-template-referencelinedataconfiguration-seriestype""", alias="SeriesType")
    StaticConfiguration_: Optional['ReferenceLineStaticDataConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedataconfiguration.html#cfn-quicksight-template-referencelinedataconfiguration-staticconfiguration""", alias="StaticConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDataConfiguration:
        from troposphere.quicksight import ReferenceLineDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineDynamicDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedynamicdataconfiguration.html
    Properties:
        - Name: Column
        - Name: MeasureAggregationFunction
        - Name: Calculation
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedynamicdataconfiguration.html#cfn-quicksight-template-referencelinedynamicdataconfiguration-column""", alias="Column")
    MeasureAggregationFunction_: Optional['AggregationFunction'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedynamicdataconfiguration.html#cfn-quicksight-template-referencelinedynamicdataconfiguration-measureaggregationfunction""", alias="MeasureAggregationFunction")
    Calculation_: 'NumericalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinedynamicdataconfiguration.html#cfn-quicksight-template-referencelinedynamicdataconfiguration-calculation""", alias="Calculation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineDynamicDataConfiguration:
        from troposphere.quicksight import ReferenceLineDynamicDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html
    Properties:
        - Name: HorizontalPosition
        - Name: ValueLabelConfiguration
        - Name: CustomLabelConfiguration
        - Name: FontColor
        - Name: FontConfiguration
        - Name: VerticalPosition
    
    """
    
    HorizontalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-horizontalposition""", alias="HorizontalPosition")
    ValueLabelConfiguration_: Optional['ReferenceLineValueLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-valuelabelconfiguration""", alias="ValueLabelConfiguration")
    CustomLabelConfiguration_: Optional['ReferenceLineCustomLabelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-customlabelconfiguration""", alias="CustomLabelConfiguration")
    FontColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-fontcolor""", alias="FontColor")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-fontconfiguration""", alias="FontConfiguration")
    VerticalPosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinelabelconfiguration.html#cfn-quicksight-template-referencelinelabelconfiguration-verticalposition""", alias="VerticalPosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineLabelConfiguration:
        from troposphere.quicksight import ReferenceLineLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStaticDataConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestaticdataconfiguration.html
    Properties:
        - Name: Value
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestaticdataconfiguration.html#cfn-quicksight-template-referencelinestaticdataconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStaticDataConfiguration:
        from troposphere.quicksight import ReferenceLineStaticDataConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineStyleConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestyleconfiguration.html
    Properties:
        - Name: Pattern
        - Name: Color
    
    """
    
    Pattern_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestyleconfiguration.html#cfn-quicksight-template-referencelinestyleconfiguration-pattern""", alias="Pattern")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinestyleconfiguration.html#cfn-quicksight-template-referencelinestyleconfiguration-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineStyleConfiguration:
        from troposphere.quicksight import ReferenceLineStyleConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ReferenceLineValueLabelConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinevaluelabelconfiguration.html
    Properties:
        - Name: FormatConfiguration
        - Name: RelativePosition
    
    """
    
    FormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinevaluelabelconfiguration.html#cfn-quicksight-template-referencelinevaluelabelconfiguration-formatconfiguration""", alias="FormatConfiguration")
    RelativePosition_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-referencelinevaluelabelconfiguration.html#cfn-quicksight-template-referencelinevaluelabelconfiguration-relativeposition""", alias="RelativePosition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ReferenceLineValueLabelConfiguration:
        from troposphere.quicksight import ReferenceLineValueLabelConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDateTimeControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatetimecontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
        - Name: DateTimeFormat
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatetimecontroldisplayoptions.html#cfn-quicksight-template-relativedatetimecontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatetimecontroldisplayoptions.html#cfn-quicksight-template-relativedatetimecontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    DateTimeFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatetimecontroldisplayoptions.html#cfn-quicksight-template-relativedatetimecontroldisplayoptions-datetimeformat""", alias="DateTimeFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDateTimeControlDisplayOptions:
        from troposphere.quicksight import RelativeDateTimeControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RelativeDatesFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html
    Properties:
        - Name: RelativeDateValue
        - Name: Column
        - Name: RelativeDateType
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: NullOption
        - Name: FilterId
        - Name: AnchorDateConfiguration
        - Name: MinimumGranularity
        - Name: ExcludePeriodConfiguration
    
    """
    
    RelativeDateValue_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-relativedatevalue""", alias="RelativeDateValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-column""", alias="Column")
    RelativeDateType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-relativedatetype""", alias="RelativeDateType")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-parametername""", alias="ParameterName")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-filterid""", alias="FilterId")
    AnchorDateConfiguration_: 'AnchorDateConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-anchordateconfiguration""", alias="AnchorDateConfiguration")
    MinimumGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-minimumgranularity""", alias="MinimumGranularity")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-relativedatesfilter.html#cfn-quicksight-template-relativedatesfilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RelativeDatesFilter:
        from troposphere.quicksight import RelativeDatesFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Resource
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-resourcepermission.html#cfn-quicksight-template-resourcepermission-actions""", alias="Actions")
    Resource_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-resourcepermission.html#cfn-quicksight-template-resourcepermission-resource""", alias="Resource")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-resourcepermission.html#cfn-quicksight-template-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RollingDateConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rollingdateconfiguration.html
    Properties:
        - Name: Expression
        - Name: DataSetIdentifier
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rollingdateconfiguration.html#cfn-quicksight-template-rollingdateconfiguration-expression""", alias="Expression")
    DataSetIdentifier_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rollingdateconfiguration.html#cfn-quicksight-template-rollingdateconfiguration-datasetidentifier""", alias="DataSetIdentifier")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RollingDateConfiguration:
        from troposphere.quicksight import RollingDateConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RowAlternateColorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rowalternatecoloroptions.html
    Properties:
        - Name: Status
        - Name: UsePrimaryBackgroundColor
        - Name: RowAlternateColors
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rowalternatecoloroptions.html#cfn-quicksight-template-rowalternatecoloroptions-status""", alias="Status")
    UsePrimaryBackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rowalternatecoloroptions.html#cfn-quicksight-template-rowalternatecoloroptions-useprimarybackgroundcolor""", alias="UsePrimaryBackgroundColor")
    RowAlternateColors_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-rowalternatecoloroptions.html#cfn-quicksight-template-rowalternatecoloroptions-rowalternatecolors""", alias="RowAlternateColors")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RowAlternateColorOptions:
        from troposphere.quicksight import RowAlternateColorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SameSheetTargetVisualConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-samesheettargetvisualconfiguration.html
    Properties:
        - Name: TargetVisualOptions
        - Name: TargetVisuals
    
    """
    
    TargetVisualOptions_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-samesheettargetvisualconfiguration.html#cfn-quicksight-template-samesheettargetvisualconfiguration-targetvisualoptions""", alias="TargetVisualOptions")
    TargetVisuals_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-samesheettargetvisualconfiguration.html#cfn-quicksight-template-samesheettargetvisualconfiguration-targetvisuals""", alias="TargetVisuals")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SameSheetTargetVisualConfiguration:
        from troposphere.quicksight import SameSheetTargetVisualConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramaggregatedfieldwells.html
    Properties:
        - Name: Destination
        - Name: Source
        - Name: Weight
    
    """
    
    Destination_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-template-sankeydiagramaggregatedfieldwells-destination""", alias="Destination")
    Source_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-template-sankeydiagramaggregatedfieldwells-source""", alias="Source")
    Weight_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramaggregatedfieldwells.html#cfn-quicksight-template-sankeydiagramaggregatedfieldwells-weight""", alias="Weight")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramAggregatedFieldWells:
        from troposphere.quicksight import SankeyDiagramAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: DataLabels
        - Name: FieldWells
    
    """
    
    SortConfiguration_: Optional['SankeyDiagramSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramchartconfiguration.html#cfn-quicksight-template-sankeydiagramchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramchartconfiguration.html#cfn-quicksight-template-sankeydiagramchartconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['SankeyDiagramFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramchartconfiguration.html#cfn-quicksight-template-sankeydiagramchartconfiguration-fieldwells""", alias="FieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramChartConfiguration:
        from troposphere.quicksight import SankeyDiagramChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramfieldwells.html
    Properties:
        - Name: SankeyDiagramAggregatedFieldWells
    
    """
    
    SankeyDiagramAggregatedFieldWells_: Optional['SankeyDiagramAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramfieldwells.html#cfn-quicksight-template-sankeydiagramfieldwells-sankeydiagramaggregatedfieldwells""", alias="SankeyDiagramAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramFieldWells:
        from troposphere.quicksight import SankeyDiagramFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramsortconfiguration.html
    Properties:
        - Name: WeightSort
        - Name: SourceItemsLimit
        - Name: DestinationItemsLimit
    
    """
    
    WeightSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramsortconfiguration.html#cfn-quicksight-template-sankeydiagramsortconfiguration-weightsort""", alias="WeightSort")
    SourceItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramsortconfiguration.html#cfn-quicksight-template-sankeydiagramsortconfiguration-sourceitemslimit""", alias="SourceItemsLimit")
    DestinationItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramsortconfiguration.html#cfn-quicksight-template-sankeydiagramsortconfiguration-destinationitemslimit""", alias="DestinationItemsLimit")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramSortConfiguration:
        from troposphere.quicksight import SankeyDiagramSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SankeyDiagramVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html#cfn-quicksight-template-sankeydiagramvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html#cfn-quicksight-template-sankeydiagramvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['SankeyDiagramChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html#cfn-quicksight-template-sankeydiagramvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html#cfn-quicksight-template-sankeydiagramvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sankeydiagramvisual.html#cfn-quicksight-template-sankeydiagramvisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SankeyDiagramVisual:
        from troposphere.quicksight import SankeyDiagramVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotCategoricallyAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-template-scatterplotcategoricallyaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-template-scatterplotcategoricallyaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-template-scatterplotcategoricallyaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-template-scatterplotcategoricallyaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotcategoricallyaggregatedfieldwells.html#cfn-quicksight-template-scatterplotcategoricallyaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotCategoricallyAggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotCategoricallyAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html
    Properties:
        - Name: YAxisLabelOptions
        - Name: Legend
        - Name: YAxisDisplayOptions
        - Name: DataLabels
        - Name: FieldWells
        - Name: Tooltip
        - Name: XAxisLabelOptions
        - Name: VisualPalette
        - Name: XAxisDisplayOptions
    
    """
    
    YAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-yaxislabeloptions""", alias="YAxisLabelOptions")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-legend""", alias="Legend")
    YAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-yaxisdisplayoptions""", alias="YAxisDisplayOptions")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-datalabels""", alias="DataLabels")
    FieldWells_: Optional['ScatterPlotFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-tooltip""", alias="Tooltip")
    XAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-xaxislabeloptions""", alias="XAxisLabelOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-visualpalette""", alias="VisualPalette")
    XAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotconfiguration.html#cfn-quicksight-template-scatterplotconfiguration-xaxisdisplayoptions""", alias="XAxisDisplayOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotConfiguration:
        from troposphere.quicksight import ScatterPlotConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotfieldwells.html
    Properties:
        - Name: ScatterPlotUnaggregatedFieldWells
        - Name: ScatterPlotCategoricallyAggregatedFieldWells
    
    """
    
    ScatterPlotUnaggregatedFieldWells_: Optional['ScatterPlotUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotfieldwells.html#cfn-quicksight-template-scatterplotfieldwells-scatterplotunaggregatedfieldwells""", alias="ScatterPlotUnaggregatedFieldWells")
    ScatterPlotCategoricallyAggregatedFieldWells_: Optional['ScatterPlotCategoricallyAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotfieldwells.html#cfn-quicksight-template-scatterplotfieldwells-scatterplotcategoricallyaggregatedfieldwells""", alias="ScatterPlotCategoricallyAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotFieldWells:
        from troposphere.quicksight import ScatterPlotFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html
    Properties:
        - Name: Category
        - Name: Size
        - Name: Label
        - Name: XAxis
        - Name: YAxis
    
    """
    
    Category_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html#cfn-quicksight-template-scatterplotunaggregatedfieldwells-category""", alias="Category")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html#cfn-quicksight-template-scatterplotunaggregatedfieldwells-size""", alias="Size")
    Label_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html#cfn-quicksight-template-scatterplotunaggregatedfieldwells-label""", alias="Label")
    XAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html#cfn-quicksight-template-scatterplotunaggregatedfieldwells-xaxis""", alias="XAxis")
    YAxis_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotunaggregatedfieldwells.html#cfn-quicksight-template-scatterplotunaggregatedfieldwells-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotUnaggregatedFieldWells:
        from troposphere.quicksight import ScatterPlotUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScatterPlotVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['ScatterPlotConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scatterplotvisual.html#cfn-quicksight-template-scatterplotvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScatterPlotVisual:
        from troposphere.quicksight import ScatterPlotVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ScrollBarOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scrollbaroptions.html
    Properties:
        - Name: VisibleRange
        - Name: Visibility
    
    """
    
    VisibleRange_: Optional['VisibleRangeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scrollbaroptions.html#cfn-quicksight-template-scrollbaroptions-visiblerange""", alias="VisibleRange")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-scrollbaroptions.html#cfn-quicksight-template-scrollbaroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ScrollBarOptions:
        from troposphere.quicksight import ScrollBarOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SecondaryValueOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-secondaryvalueoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-secondaryvalueoptions.html#cfn-quicksight-template-secondaryvalueoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SecondaryValueOptions:
        from troposphere.quicksight import SecondaryValueOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionAfterPageBreak(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionafterpagebreak.html
    Properties:
        - Name: Status
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionafterpagebreak.html#cfn-quicksight-template-sectionafterpagebreak-status""", alias="Status")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionAfterPageBreak:
        from troposphere.quicksight import SectionAfterPageBreak as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutcanvassizeoptions.html
    Properties:
        - Name: PaperCanvasSizeOptions
    
    """
    
    PaperCanvasSizeOptions_: Optional['SectionBasedLayoutPaperCanvasSizeOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutcanvassizeoptions.html#cfn-quicksight-template-sectionbasedlayoutcanvassizeoptions-papercanvassizeoptions""", alias="PaperCanvasSizeOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html
    Properties:
        - Name: CanvasSizeOptions
        - Name: FooterSections
        - Name: BodySections
        - Name: HeaderSections
    
    """
    
    CanvasSizeOptions_: 'SectionBasedLayoutCanvasSizeOptions' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html#cfn-quicksight-template-sectionbasedlayoutconfiguration-canvassizeoptions""", alias="CanvasSizeOptions")
    FooterSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html#cfn-quicksight-template-sectionbasedlayoutconfiguration-footersections""", alias="FooterSections")
    BodySections_: List['BodySectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html#cfn-quicksight-template-sectionbasedlayoutconfiguration-bodysections""", alias="BodySections")
    HeaderSections_: List['HeaderFooterSectionConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutconfiguration.html#cfn-quicksight-template-sectionbasedlayoutconfiguration-headersections""", alias="HeaderSections")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutConfiguration:
        from troposphere.quicksight import SectionBasedLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionBasedLayoutPaperCanvasSizeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutpapercanvassizeoptions.html
    Properties:
        - Name: PaperMargin
        - Name: PaperSize
        - Name: PaperOrientation
    
    """
    
    PaperMargin_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-template-sectionbasedlayoutpapercanvassizeoptions-papermargin""", alias="PaperMargin")
    PaperSize_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-template-sectionbasedlayoutpapercanvassizeoptions-papersize""", alias="PaperSize")
    PaperOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionbasedlayoutpapercanvassizeoptions.html#cfn-quicksight-template-sectionbasedlayoutpapercanvassizeoptions-paperorientation""", alias="PaperOrientation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionBasedLayoutPaperCanvasSizeOptions:
        from troposphere.quicksight import SectionBasedLayoutPaperCanvasSizeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionlayoutconfiguration.html
    Properties:
        - Name: FreeFormLayout
    
    """
    
    FreeFormLayout_: 'FreeFormSectionLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionlayoutconfiguration.html#cfn-quicksight-template-sectionlayoutconfiguration-freeformlayout""", alias="FreeFormLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionLayoutConfiguration:
        from troposphere.quicksight import SectionLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionPageBreakConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionpagebreakconfiguration.html
    Properties:
        - Name: After
    
    """
    
    After_: Optional['SectionAfterPageBreak'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionpagebreakconfiguration.html#cfn-quicksight-template-sectionpagebreakconfiguration-after""", alias="After")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionPageBreakConfiguration:
        from troposphere.quicksight import SectionPageBreakConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SectionStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionstyle.html
    Properties:
        - Name: Padding
        - Name: Height
    
    """
    
    Padding_: Optional['Spacing'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionstyle.html#cfn-quicksight-template-sectionstyle-padding""", alias="Padding")
    Height_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sectionstyle.html#cfn-quicksight-template-sectionstyle-height""", alias="Height")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SectionStyle:
        from troposphere.quicksight import SectionStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SelectedSheetsFilterScopeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-selectedsheetsfilterscopeconfiguration.html
    Properties:
        - Name: SheetVisualScopingConfigurations
    
    """
    
    SheetVisualScopingConfigurations_: Optional[List['SheetVisualScopingConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-selectedsheetsfilterscopeconfiguration.html#cfn-quicksight-template-selectedsheetsfilterscopeconfiguration-sheetvisualscopingconfigurations""", alias="SheetVisualScopingConfigurations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SelectedSheetsFilterScopeConfiguration:
        from troposphere.quicksight import SelectedSheetsFilterScopeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SeriesItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-seriesitem.html
    Properties:
        - Name: FieldSeriesItem
        - Name: DataFieldSeriesItem
    
    """
    
    FieldSeriesItem_: Optional['FieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-seriesitem.html#cfn-quicksight-template-seriesitem-fieldseriesitem""", alias="FieldSeriesItem")
    DataFieldSeriesItem_: Optional['DataFieldSeriesItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-seriesitem.html#cfn-quicksight-template-seriesitem-datafieldseriesitem""", alias="DataFieldSeriesItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SeriesItem:
        from troposphere.quicksight import SeriesItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SetParameterValueConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-setparametervalueconfiguration.html
    Properties:
        - Name: DestinationParameterName
        - Name: Value
    
    """
    
    DestinationParameterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-setparametervalueconfiguration.html#cfn-quicksight-template-setparametervalueconfiguration-destinationparametername""", alias="DestinationParameterName")
    Value_: 'DestinationParameterValueConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-setparametervalueconfiguration.html#cfn-quicksight-template-setparametervalueconfiguration-value""", alias="Value")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SetParameterValueConfiguration:
        from troposphere.quicksight import SetParameterValueConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShapeConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shapeconditionalformat.html
    Properties:
        - Name: BackgroundColor
    
    """
    
    BackgroundColor_: 'ConditionalFormattingColor' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shapeconditionalformat.html#cfn-quicksight-template-shapeconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShapeConditionalFormat:
        from troposphere.quicksight import ShapeConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Sheet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheet.html
    Properties:
        - Name: SheetId
        - Name: Name
    
    """
    
    SheetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheet.html#cfn-quicksight-template-sheet-sheetid""", alias="SheetId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheet.html#cfn-quicksight-template-sheet-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Sheet:
        from troposphere.quicksight import Sheet as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlInfoIconLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrolinfoiconlabeloptions.html
    Properties:
        - Name: Visibility
        - Name: InfoIconText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-template-sheetcontrolinfoiconlabeloptions-visibility""", alias="Visibility")
    InfoIconText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrolinfoiconlabeloptions.html#cfn-quicksight-template-sheetcontrolinfoiconlabeloptions-infoicontext""", alias="InfoIconText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlInfoIconLabelOptions:
        from troposphere.quicksight import SheetControlInfoIconLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayout(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayout.html
    Properties:
        - Name: Configuration
    
    """
    
    Configuration_: 'SheetControlLayoutConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayout.html#cfn-quicksight-template-sheetcontrollayout-configuration""", alias="Configuration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayout:
        from troposphere.quicksight import SheetControlLayout as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetControlLayoutConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayoutconfiguration.html
    Properties:
        - Name: GridLayout
    
    """
    
    GridLayout_: Optional['GridLayoutConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetcontrollayoutconfiguration.html#cfn-quicksight-template-sheetcontrollayoutconfiguration-gridlayout""", alias="GridLayout")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetControlLayoutConfiguration:
        from troposphere.quicksight import SheetControlLayoutConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html
    Properties:
        - Name: Description
        - Name: ParameterControls
        - Name: TextBoxes
        - Name: Layouts
        - Name: ContentType
        - Name: SheetId
        - Name: FilterControls
        - Name: SheetControlLayouts
        - Name: Title
        - Name: Visuals
        - Name: Name
    
    """
    
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-description""", alias="Description")
    ParameterControls_: Optional[List['ParameterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-parametercontrols""", alias="ParameterControls")
    TextBoxes_: Optional[List['SheetTextBox']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-textboxes""", alias="TextBoxes")
    Layouts_: Optional[List['Layout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-layouts""", alias="Layouts")
    ContentType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-contenttype""", alias="ContentType")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-sheetid""", alias="SheetId")
    FilterControls_: Optional[List['FilterControl']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-filtercontrols""", alias="FilterControls")
    SheetControlLayouts_: Optional[List['SheetControlLayout']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-sheetcontrollayouts""", alias="SheetControlLayouts")
    Title_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-title""", alias="Title")
    Visuals_: Optional[List['Visual']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-visuals""", alias="Visuals")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetdefinition.html#cfn-quicksight-template-sheetdefinition-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetDefinition:
        from troposphere.quicksight import SheetDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementConfigurationOverrides(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementconfigurationoverrides.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementconfigurationoverrides.html#cfn-quicksight-template-sheetelementconfigurationoverrides-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementConfigurationOverrides:
        from troposphere.quicksight import SheetElementConfigurationOverrides as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetElementRenderingRule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementrenderingrule.html
    Properties:
        - Name: Expression
        - Name: ConfigurationOverrides
    
    """
    
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementrenderingrule.html#cfn-quicksight-template-sheetelementrenderingrule-expression""", alias="Expression")
    ConfigurationOverrides_: 'SheetElementConfigurationOverrides' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetelementrenderingrule.html#cfn-quicksight-template-sheetelementrenderingrule-configurationoverrides""", alias="ConfigurationOverrides")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetElementRenderingRule:
        from troposphere.quicksight import SheetElementRenderingRule as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetTextBox(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheettextbox.html
    Properties:
        - Name: SheetTextBoxId
        - Name: Content
    
    """
    
    SheetTextBoxId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheettextbox.html#cfn-quicksight-template-sheettextbox-sheettextboxid""", alias="SheetTextBoxId")
    Content_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheettextbox.html#cfn-quicksight-template-sheettextbox-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetTextBox:
        from troposphere.quicksight import SheetTextBox as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetVisualScopingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetvisualscopingconfiguration.html
    Properties:
        - Name: Scope
        - Name: SheetId
        - Name: VisualIds
    
    """
    
    Scope_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetvisualscopingconfiguration.html#cfn-quicksight-template-sheetvisualscopingconfiguration-scope""", alias="Scope")
    SheetId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetvisualscopingconfiguration.html#cfn-quicksight-template-sheetvisualscopingconfiguration-sheetid""", alias="SheetId")
    VisualIds_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-sheetvisualscopingconfiguration.html#cfn-quicksight-template-sheetvisualscopingconfiguration-visualids""", alias="VisualIds")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetVisualScopingConfiguration:
        from troposphere.quicksight import SheetVisualScopingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ShortFormatText(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shortformattext.html
    Properties:
        - Name: RichText
        - Name: PlainText
    
    """
    
    RichText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shortformattext.html#cfn-quicksight-template-shortformattext-richtext""", alias="RichText")
    PlainText_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-shortformattext.html#cfn-quicksight-template-shortformattext-plaintext""", alias="PlainText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ShortFormatText:
        from troposphere.quicksight import ShortFormatText as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SimpleClusterMarker(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-simpleclustermarker.html
    Properties:
        - Name: Color
    
    """
    
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-simpleclustermarker.html#cfn-quicksight-template-simpleclustermarker-color""", alias="Color")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SimpleClusterMarker:
        from troposphere.quicksight import SimpleClusterMarker as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SliderControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-slidercontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-slidercontroldisplayoptions.html#cfn-quicksight-template-slidercontroldisplayoptions-titleoptions""", alias="TitleOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-slidercontroldisplayoptions.html#cfn-quicksight-template-slidercontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SliderControlDisplayOptions:
        from troposphere.quicksight import SliderControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesAxisProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesaxisproperties.html
    Properties:
        - Name: Placement
        - Name: Scale
    
    """
    
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesaxisproperties.html#cfn-quicksight-template-smallmultiplesaxisproperties-placement""", alias="Placement")
    Scale_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesaxisproperties.html#cfn-quicksight-template-smallmultiplesaxisproperties-scale""", alias="Scale")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesAxisProperties:
        from troposphere.quicksight import SmallMultiplesAxisProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SmallMultiplesOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html
    Properties:
        - Name: MaxVisibleRows
        - Name: PanelConfiguration
        - Name: MaxVisibleColumns
        - Name: XAxis
        - Name: YAxis
    
    """
    
    MaxVisibleRows_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html#cfn-quicksight-template-smallmultiplesoptions-maxvisiblerows""", alias="MaxVisibleRows")
    PanelConfiguration_: Optional['PanelConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html#cfn-quicksight-template-smallmultiplesoptions-panelconfiguration""", alias="PanelConfiguration")
    MaxVisibleColumns_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html#cfn-quicksight-template-smallmultiplesoptions-maxvisiblecolumns""", alias="MaxVisibleColumns")
    XAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html#cfn-quicksight-template-smallmultiplesoptions-xaxis""", alias="XAxis")
    YAxis_: Optional['SmallMultiplesAxisProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-smallmultiplesoptions.html#cfn-quicksight-template-smallmultiplesoptions-yaxis""", alias="YAxis")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SmallMultiplesOptions:
        from troposphere.quicksight import SmallMultiplesOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Spacing(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: Right
        - Name: Bottom
    
    """
    
    Left_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html#cfn-quicksight-template-spacing-left""", alias="Left")
    Top_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html#cfn-quicksight-template-spacing-top""", alias="Top")
    Right_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html#cfn-quicksight-template-spacing-right""", alias="Right")
    Bottom_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-spacing.html#cfn-quicksight-template-spacing-bottom""", alias="Bottom")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Spacing:
        from troposphere.quicksight import Spacing as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringDefaultValues(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringdefaultvalues.html
    Properties:
        - Name: DynamicValue
        - Name: StaticValues
    
    """
    
    DynamicValue_: Optional['DynamicDefaultValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringdefaultvalues.html#cfn-quicksight-template-stringdefaultvalues-dynamicvalue""", alias="DynamicValue")
    StaticValues_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringdefaultvalues.html#cfn-quicksight-template-stringdefaultvalues-staticvalues""", alias="StaticValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringDefaultValues:
        from troposphere.quicksight import StringDefaultValues as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringFormatConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringformatconfiguration.html
    Properties:
        - Name: NumericFormatConfiguration
        - Name: NullValueFormatConfiguration
    
    """
    
    NumericFormatConfiguration_: Optional['NumericFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringformatconfiguration.html#cfn-quicksight-template-stringformatconfiguration-numericformatconfiguration""", alias="NumericFormatConfiguration")
    NullValueFormatConfiguration_: Optional['NullValueFormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringformatconfiguration.html#cfn-quicksight-template-stringformatconfiguration-nullvalueformatconfiguration""", alias="NullValueFormatConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringFormatConfiguration:
        from troposphere.quicksight import StringFormatConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringParameterDeclaration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html
    Properties:
        - Name: MappedDataSetParameters
        - Name: DefaultValues
        - Name: ParameterValueType
        - Name: ValueWhenUnset
        - Name: Name
    
    """
    
    MappedDataSetParameters_: Optional[List['MappedDataSetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html#cfn-quicksight-template-stringparameterdeclaration-mappeddatasetparameters""", alias="MappedDataSetParameters")
    DefaultValues_: Optional['StringDefaultValues'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html#cfn-quicksight-template-stringparameterdeclaration-defaultvalues""", alias="DefaultValues")
    ParameterValueType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html#cfn-quicksight-template-stringparameterdeclaration-parametervaluetype""", alias="ParameterValueType")
    ValueWhenUnset_: Optional['StringValueWhenUnsetConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html#cfn-quicksight-template-stringparameterdeclaration-valuewhenunset""", alias="ValueWhenUnset")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringparameterdeclaration.html#cfn-quicksight-template-stringparameterdeclaration-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringParameterDeclaration:
        from troposphere.quicksight import StringParameterDeclaration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class StringValueWhenUnsetConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringvaluewhenunsetconfiguration.html
    Properties:
        - Name: ValueWhenUnsetOption
        - Name: CustomValue
    
    """
    
    ValueWhenUnsetOption_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringvaluewhenunsetconfiguration.html#cfn-quicksight-template-stringvaluewhenunsetconfiguration-valuewhenunsetoption""", alias="ValueWhenUnsetOption")
    CustomValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-stringvaluewhenunsetconfiguration.html#cfn-quicksight-template-stringvaluewhenunsetconfiguration-customvalue""", alias="CustomValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.StringValueWhenUnsetConfiguration:
        from troposphere.quicksight import StringValueWhenUnsetConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SubtotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: FieldLevelOptions
        - Name: ValueCellStyle
        - Name: TotalCellStyle
        - Name: TotalsVisibility
        - Name: FieldLevel
        - Name: MetricHeaderCellStyle
        - Name: StyleTargets
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-customlabel""", alias="CustomLabel")
    FieldLevelOptions_: Optional[List['PivotTableFieldSubtotalOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-fieldleveloptions""", alias="FieldLevelOptions")
    ValueCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-valuecellstyle""", alias="ValueCellStyle")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-totalsvisibility""", alias="TotalsVisibility")
    FieldLevel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-fieldlevel""", alias="FieldLevel")
    MetricHeaderCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-metricheadercellstyle""", alias="MetricHeaderCellStyle")
    StyleTargets_: Optional[List['TableStyleTarget']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-subtotaloptions.html#cfn-quicksight-template-subtotaloptions-styletargets""", alias="StyleTargets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SubtotalOptions:
        from troposphere.quicksight import SubtotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Values
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableaggregatedfieldwells.html#cfn-quicksight-template-tableaggregatedfieldwells-groupby""", alias="GroupBy")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableaggregatedfieldwells.html#cfn-quicksight-template-tableaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableAggregatedFieldWells:
        from troposphere.quicksight import TableAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableborderoptions.html
    Properties:
        - Name: Thickness
        - Name: Color
        - Name: Style
    
    """
    
    Thickness_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableborderoptions.html#cfn-quicksight-template-tableborderoptions-thickness""", alias="Thickness")
    Color_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableborderoptions.html#cfn-quicksight-template-tableborderoptions-color""", alias="Color")
    Style_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableborderoptions.html#cfn-quicksight-template-tableborderoptions-style""", alias="Style")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableBorderOptions:
        from troposphere.quicksight import TableBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellconditionalformatting.html
    Properties:
        - Name: FieldId
        - Name: TextFormat
    
    """
    
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellconditionalformatting.html#cfn-quicksight-template-tablecellconditionalformatting-fieldid""", alias="FieldId")
    TextFormat_: Optional['TextConditionalFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellconditionalformatting.html#cfn-quicksight-template-tablecellconditionalformatting-textformat""", alias="TextFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellConditionalFormatting:
        from troposphere.quicksight import TableCellConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellImageSizingConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellimagesizingconfiguration.html
    Properties:
        - Name: TableCellImageScalingConfiguration
    
    """
    
    TableCellImageScalingConfiguration_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellimagesizingconfiguration.html#cfn-quicksight-template-tablecellimagesizingconfiguration-tablecellimagescalingconfiguration""", alias="TableCellImageScalingConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellImageSizingConfiguration:
        from troposphere.quicksight import TableCellImageSizingConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableCellStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html
    Properties:
        - Name: VerticalTextAlignment
        - Name: Visibility
        - Name: Height
        - Name: FontConfiguration
        - Name: Border
        - Name: TextWrap
        - Name: HorizontalTextAlignment
        - Name: BackgroundColor
    
    """
    
    VerticalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-verticaltextalignment""", alias="VerticalTextAlignment")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-visibility""", alias="Visibility")
    Height_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-height""", alias="Height")
    FontConfiguration_: Optional['FontConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-fontconfiguration""", alias="FontConfiguration")
    Border_: Optional['GlobalTableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-border""", alias="Border")
    TextWrap_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-textwrap""", alias="TextWrap")
    HorizontalTextAlignment_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-horizontaltextalignment""", alias="HorizontalTextAlignment")
    BackgroundColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablecellstyle.html#cfn-quicksight-template-tablecellstyle-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableCellStyle:
        from troposphere.quicksight import TableCellStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformatting.html
    Properties:
        - Name: ConditionalFormattingOptions
    
    """
    
    ConditionalFormattingOptions_: Optional[List['TableConditionalFormattingOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformatting.html#cfn-quicksight-template-tableconditionalformatting-conditionalformattingoptions""", alias="ConditionalFormattingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormatting:
        from troposphere.quicksight import TableConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConditionalFormattingOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformattingoption.html
    Properties:
        - Name: Row
        - Name: Cell
    
    """
    
    Row_: Optional['TableRowConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformattingoption.html#cfn-quicksight-template-tableconditionalformattingoption-row""", alias="Row")
    Cell_: Optional['TableCellConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconditionalformattingoption.html#cfn-quicksight-template-tableconditionalformattingoption-cell""", alias="Cell")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConditionalFormattingOption:
        from troposphere.quicksight import TableConditionalFormattingOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: PaginatedReportOptions
        - Name: TableOptions
        - Name: TableInlineVisualizations
        - Name: FieldWells
        - Name: FieldOptions
        - Name: TotalOptions
    
    """
    
    SortConfiguration_: Optional['TableSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-sortconfiguration""", alias="SortConfiguration")
    PaginatedReportOptions_: Optional['TablePaginatedReportOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-paginatedreportoptions""", alias="PaginatedReportOptions")
    TableOptions_: Optional['TableOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-tableoptions""", alias="TableOptions")
    TableInlineVisualizations_: Optional[List['TableInlineVisualization']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-tableinlinevisualizations""", alias="TableInlineVisualizations")
    FieldWells_: Optional['TableFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-fieldwells""", alias="FieldWells")
    FieldOptions_: Optional['TableFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-fieldoptions""", alias="FieldOptions")
    TotalOptions_: Optional['TotalOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableconfiguration.html#cfn-quicksight-template-tableconfiguration-totaloptions""", alias="TotalOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableConfiguration:
        from troposphere.quicksight import TableConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomIconContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomiconcontent.html
    Properties:
        - Name: Icon
    
    """
    
    Icon_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomiconcontent.html#cfn-quicksight-template-tablefieldcustomiconcontent-icon""", alias="Icon")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomIconContent:
        from troposphere.quicksight import TableFieldCustomIconContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldCustomTextContent(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomtextcontent.html
    Properties:
        - Name: Value
        - Name: FontConfiguration
    
    """
    
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomtextcontent.html#cfn-quicksight-template-tablefieldcustomtextcontent-value""", alias="Value")
    FontConfiguration_: 'FontConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldcustomtextcontent.html#cfn-quicksight-template-tablefieldcustomtextcontent-fontconfiguration""", alias="FontConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldCustomTextContent:
        from troposphere.quicksight import TableFieldCustomTextContent as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldImageConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldimageconfiguration.html
    Properties:
        - Name: SizingOptions
    
    """
    
    SizingOptions_: Optional['TableCellImageSizingConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldimageconfiguration.html#cfn-quicksight-template-tablefieldimageconfiguration-sizingoptions""", alias="SizingOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldImageConfiguration:
        from troposphere.quicksight import TableFieldImageConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkconfiguration.html
    Properties:
        - Name: Target
        - Name: Content
    
    """
    
    Target_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkconfiguration.html#cfn-quicksight-template-tablefieldlinkconfiguration-target""", alias="Target")
    Content_: 'TableFieldLinkContentConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkconfiguration.html#cfn-quicksight-template-tablefieldlinkconfiguration-content""", alias="Content")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkConfiguration:
        from troposphere.quicksight import TableFieldLinkConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldLinkContentConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkcontentconfiguration.html
    Properties:
        - Name: CustomIconContent
        - Name: CustomTextContent
    
    """
    
    CustomIconContent_: Optional['TableFieldCustomIconContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkcontentconfiguration.html#cfn-quicksight-template-tablefieldlinkcontentconfiguration-customiconcontent""", alias="CustomIconContent")
    CustomTextContent_: Optional['TableFieldCustomTextContent'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldlinkcontentconfiguration.html#cfn-quicksight-template-tablefieldlinkcontentconfiguration-customtextcontent""", alias="CustomTextContent")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldLinkContentConfiguration:
        from troposphere.quicksight import TableFieldLinkContentConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html
    Properties:
        - Name: CustomLabel
        - Name: URLStyling
        - Name: FieldId
        - Name: Visibility
        - Name: Width
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html#cfn-quicksight-template-tablefieldoption-customlabel""", alias="CustomLabel")
    URLStyling_: Optional['TableFieldURLConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html#cfn-quicksight-template-tablefieldoption-urlstyling""", alias="URLStyling")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html#cfn-quicksight-template-tablefieldoption-fieldid""", alias="FieldId")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html#cfn-quicksight-template-tablefieldoption-visibility""", alias="Visibility")
    Width_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoption.html#cfn-quicksight-template-tablefieldoption-width""", alias="Width")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOption:
        from troposphere.quicksight import TableFieldOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoptions.html
    Properties:
        - Name: Order
        - Name: PinnedFieldOptions
        - Name: SelectedFieldOptions
    
    """
    
    Order_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoptions.html#cfn-quicksight-template-tablefieldoptions-order""", alias="Order")
    PinnedFieldOptions_: Optional['TablePinnedFieldOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoptions.html#cfn-quicksight-template-tablefieldoptions-pinnedfieldoptions""", alias="PinnedFieldOptions")
    SelectedFieldOptions_: Optional[List['TableFieldOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldoptions.html#cfn-quicksight-template-tablefieldoptions-selectedfieldoptions""", alias="SelectedFieldOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldOptions:
        from troposphere.quicksight import TableFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldURLConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldurlconfiguration.html
    Properties:
        - Name: LinkConfiguration
        - Name: ImageConfiguration
    
    """
    
    LinkConfiguration_: Optional['TableFieldLinkConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldurlconfiguration.html#cfn-quicksight-template-tablefieldurlconfiguration-linkconfiguration""", alias="LinkConfiguration")
    ImageConfiguration_: Optional['TableFieldImageConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldurlconfiguration.html#cfn-quicksight-template-tablefieldurlconfiguration-imageconfiguration""", alias="ImageConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldURLConfiguration:
        from troposphere.quicksight import TableFieldURLConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldwells.html
    Properties:
        - Name: TableUnaggregatedFieldWells
        - Name: TableAggregatedFieldWells
    
    """
    
    TableUnaggregatedFieldWells_: Optional['TableUnaggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldwells.html#cfn-quicksight-template-tablefieldwells-tableunaggregatedfieldwells""", alias="TableUnaggregatedFieldWells")
    TableAggregatedFieldWells_: Optional['TableAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablefieldwells.html#cfn-quicksight-template-tablefieldwells-tableaggregatedfieldwells""", alias="TableAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableFieldWells:
        from troposphere.quicksight import TableFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableInlineVisualization(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableinlinevisualization.html
    Properties:
        - Name: DataBars
    
    """
    
    DataBars_: Optional['DataBarsOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableinlinevisualization.html#cfn-quicksight-template-tableinlinevisualization-databars""", alias="DataBars")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableInlineVisualization:
        from troposphere.quicksight import TableInlineVisualization as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html
    Properties:
        - Name: HeaderStyle
        - Name: CellStyle
        - Name: Orientation
        - Name: RowAlternateColorOptions
    
    """
    
    HeaderStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html#cfn-quicksight-template-tableoptions-headerstyle""", alias="HeaderStyle")
    CellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html#cfn-quicksight-template-tableoptions-cellstyle""", alias="CellStyle")
    Orientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html#cfn-quicksight-template-tableoptions-orientation""", alias="Orientation")
    RowAlternateColorOptions_: Optional['RowAlternateColorOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableoptions.html#cfn-quicksight-template-tableoptions-rowalternatecoloroptions""", alias="RowAlternateColorOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableOptions:
        from troposphere.quicksight import TableOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePaginatedReportOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepaginatedreportoptions.html
    Properties:
        - Name: OverflowColumnHeaderVisibility
        - Name: VerticalOverflowVisibility
    
    """
    
    OverflowColumnHeaderVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepaginatedreportoptions.html#cfn-quicksight-template-tablepaginatedreportoptions-overflowcolumnheadervisibility""", alias="OverflowColumnHeaderVisibility")
    VerticalOverflowVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepaginatedreportoptions.html#cfn-quicksight-template-tablepaginatedreportoptions-verticaloverflowvisibility""", alias="VerticalOverflowVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePaginatedReportOptions:
        from troposphere.quicksight import TablePaginatedReportOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TablePinnedFieldOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepinnedfieldoptions.html
    Properties:
        - Name: PinnedLeftFields
    
    """
    
    PinnedLeftFields_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablepinnedfieldoptions.html#cfn-quicksight-template-tablepinnedfieldoptions-pinnedleftfields""", alias="PinnedLeftFields")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TablePinnedFieldOptions:
        from troposphere.quicksight import TablePinnedFieldOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableRowConditionalFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablerowconditionalformatting.html
    Properties:
        - Name: TextColor
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablerowconditionalformatting.html#cfn-quicksight-template-tablerowconditionalformatting-textcolor""", alias="TextColor")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablerowconditionalformatting.html#cfn-quicksight-template-tablerowconditionalformatting-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableRowConditionalFormatting:
        from troposphere.quicksight import TableRowConditionalFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSideBorderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html
    Properties:
        - Name: Left
        - Name: Top
        - Name: InnerHorizontal
        - Name: Right
        - Name: Bottom
        - Name: InnerVertical
    
    """
    
    Left_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-left""", alias="Left")
    Top_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-top""", alias="Top")
    InnerHorizontal_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-innerhorizontal""", alias="InnerHorizontal")
    Right_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-right""", alias="Right")
    Bottom_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-bottom""", alias="Bottom")
    InnerVertical_: Optional['TableBorderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesideborderoptions.html#cfn-quicksight-template-tablesideborderoptions-innervertical""", alias="InnerVertical")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSideBorderOptions:
        from troposphere.quicksight import TableSideBorderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesortconfiguration.html
    Properties:
        - Name: RowSort
        - Name: PaginationConfiguration
    
    """
    
    RowSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesortconfiguration.html#cfn-quicksight-template-tablesortconfiguration-rowsort""", alias="RowSort")
    PaginationConfiguration_: Optional['PaginationConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablesortconfiguration.html#cfn-quicksight-template-tablesortconfiguration-paginationconfiguration""", alias="PaginationConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableSortConfiguration:
        from troposphere.quicksight import TableSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableStyleTarget(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablestyletarget.html
    Properties:
        - Name: CellType
    
    """
    
    CellType_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablestyletarget.html#cfn-quicksight-template-tablestyletarget-celltype""", alias="CellType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableStyleTarget:
        from troposphere.quicksight import TableStyleTarget as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableUnaggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableunaggregatedfieldwells.html
    Properties:
        - Name: Values
    
    """
    
    Values_: Optional[List['UnaggregatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tableunaggregatedfieldwells.html#cfn-quicksight-template-tableunaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableUnaggregatedFieldWells:
        from troposphere.quicksight import TableUnaggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TableVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html
    Properties:
        - Name: Subtitle
        - Name: ConditionalFormatting
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-subtitle""", alias="Subtitle")
    ConditionalFormatting_: Optional['TableConditionalFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-conditionalformatting""", alias="ConditionalFormatting")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TableConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tablevisual.html#cfn-quicksight-template-tablevisual-title""", alias="Title")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TableVisual:
        from troposphere.quicksight import TableVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateError(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateerror.html
    Properties:
        - Name: Type
        - Name: Message
        - Name: ViolatedEntities
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateerror.html#cfn-quicksight-template-templateerror-type""", alias="Type")
    Message_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateerror.html#cfn-quicksight-template-templateerror-message""", alias="Message")
    ViolatedEntities_: Optional[List['Entity']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateerror.html#cfn-quicksight-template-templateerror-violatedentities""", alias="ViolatedEntities")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateError:
        from troposphere.quicksight import TemplateError as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateSourceAnalysis(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceanalysis.html
    Properties:
        - Name: DataSetReferences
        - Name: Arn
    
    """
    
    DataSetReferences_: List['DataSetReference'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceanalysis.html#cfn-quicksight-template-templatesourceanalysis-datasetreferences""", alias="DataSetReferences")
    Arn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceanalysis.html#cfn-quicksight-template-templatesourceanalysis-arn""", alias="Arn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateSourceAnalysis:
        from troposphere.quicksight import TemplateSourceAnalysis as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateSourceEntity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceentity.html
    Properties:
        - Name: SourceAnalysis
        - Name: SourceTemplate
    
    """
    
    SourceAnalysis_: Optional['TemplateSourceAnalysis'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceentity.html#cfn-quicksight-template-templatesourceentity-sourceanalysis""", alias="SourceAnalysis")
    SourceTemplate_: Optional['TemplateSourceTemplate'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourceentity.html#cfn-quicksight-template-templatesourceentity-sourcetemplate""", alias="SourceTemplate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateSourceEntity:
        from troposphere.quicksight import TemplateSourceEntity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateSourceTemplate(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourcetemplate.html
    Properties:
        - Name: Arn
    
    """
    
    Arn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templatesourcetemplate.html#cfn-quicksight-template-templatesourcetemplate-arn""", alias="Arn")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateSourceTemplate:
        from troposphere.quicksight import TemplateSourceTemplate as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateVersion(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html
    Properties:
        - Name: Status
        - Name: Errors
        - Name: CreatedTime
        - Name: Description
        - Name: ThemeArn
        - Name: DataSetConfigurations
        - Name: SourceEntityArn
        - Name: VersionNumber
        - Name: Sheets
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-status""", alias="Status")
    Errors_: Optional[List['TemplateError']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-errors""", alias="Errors")
    CreatedTime_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-createdtime""", alias="CreatedTime")
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-description""", alias="Description")
    ThemeArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-themearn""", alias="ThemeArn")
    DataSetConfigurations_: Optional[List['DataSetConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-datasetconfigurations""", alias="DataSetConfigurations")
    SourceEntityArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-sourceentityarn""", alias="SourceEntityArn")
    VersionNumber_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-versionnumber""", alias="VersionNumber")
    Sheets_: Optional[List['Sheet']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversion.html#cfn-quicksight-template-templateversion-sheets""", alias="Sheets")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateVersion:
        from troposphere.quicksight import TemplateVersion as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TemplateVersionDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html
    Properties:
        - Name: Options
        - Name: FilterGroups
        - Name: CalculatedFields
        - Name: DataSetConfigurations
        - Name: ColumnConfigurations
        - Name: AnalysisDefaults
        - Name: Sheets
        - Name: ParameterDeclarations
    
    """
    
    Options_: Optional['AssetOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-options""", alias="Options")
    FilterGroups_: Optional[List['FilterGroup']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-filtergroups""", alias="FilterGroups")
    CalculatedFields_: Optional[List['CalculatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-calculatedfields""", alias="CalculatedFields")
    DataSetConfigurations_: List['DataSetConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-datasetconfigurations""", alias="DataSetConfigurations")
    ColumnConfigurations_: Optional[List['ColumnConfiguration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-columnconfigurations""", alias="ColumnConfigurations")
    AnalysisDefaults_: Optional['AnalysisDefaults'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-analysisdefaults""", alias="AnalysisDefaults")
    Sheets_: Optional[List['SheetDefinition']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-sheets""", alias="Sheets")
    ParameterDeclarations_: Optional[List['ParameterDeclaration']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-templateversiondefinition.html#cfn-quicksight-template-templateversiondefinition-parameterdeclarations""", alias="ParameterDeclarations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TemplateVersionDefinition:
        from troposphere.quicksight import TemplateVersionDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextAreaControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textareacontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textareacontroldisplayoptions.html#cfn-quicksight-template-textareacontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textareacontroldisplayoptions.html#cfn-quicksight-template-textareacontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textareacontroldisplayoptions.html#cfn-quicksight-template-textareacontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextAreaControlDisplayOptions:
        from troposphere.quicksight import TextAreaControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextConditionalFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textconditionalformat.html
    Properties:
        - Name: TextColor
        - Name: Icon
        - Name: BackgroundColor
    
    """
    
    TextColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textconditionalformat.html#cfn-quicksight-template-textconditionalformat-textcolor""", alias="TextColor")
    Icon_: Optional['ConditionalFormattingIcon'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textconditionalformat.html#cfn-quicksight-template-textconditionalformat-icon""", alias="Icon")
    BackgroundColor_: Optional['ConditionalFormattingColor'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textconditionalformat.html#cfn-quicksight-template-textconditionalformat-backgroundcolor""", alias="BackgroundColor")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextConditionalFormat:
        from troposphere.quicksight import TextConditionalFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextControlPlaceholderOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textcontrolplaceholderoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textcontrolplaceholderoptions.html#cfn-quicksight-template-textcontrolplaceholderoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextControlPlaceholderOptions:
        from troposphere.quicksight import TextControlPlaceholderOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TextFieldControlDisplayOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textfieldcontroldisplayoptions.html
    Properties:
        - Name: TitleOptions
        - Name: PlaceholderOptions
        - Name: InfoIconLabelOptions
    
    """
    
    TitleOptions_: Optional['LabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textfieldcontroldisplayoptions.html#cfn-quicksight-template-textfieldcontroldisplayoptions-titleoptions""", alias="TitleOptions")
    PlaceholderOptions_: Optional['TextControlPlaceholderOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textfieldcontroldisplayoptions.html#cfn-quicksight-template-textfieldcontroldisplayoptions-placeholderoptions""", alias="PlaceholderOptions")
    InfoIconLabelOptions_: Optional['SheetControlInfoIconLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-textfieldcontroldisplayoptions.html#cfn-quicksight-template-textfieldcontroldisplayoptions-infoiconlabeloptions""", alias="InfoIconLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TextFieldControlDisplayOptions:
        from troposphere.quicksight import TextFieldControlDisplayOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThousandSeparatorOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-thousandseparatoroptions.html
    Properties:
        - Name: Symbol
        - Name: Visibility
    
    """
    
    Symbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-thousandseparatoroptions.html#cfn-quicksight-template-thousandseparatoroptions-symbol""", alias="Symbol")
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-thousandseparatoroptions.html#cfn-quicksight-template-thousandseparatoroptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThousandSeparatorOptions:
        from troposphere.quicksight import ThousandSeparatorOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeBasedForecastProperties(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html
    Properties:
        - Name: PeriodsBackward
        - Name: PeriodsForward
        - Name: PredictionInterval
        - Name: Seasonality
        - Name: UpperBoundary
        - Name: LowerBoundary
    
    """
    
    PeriodsBackward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-periodsbackward""", alias="PeriodsBackward")
    PeriodsForward_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-periodsforward""", alias="PeriodsForward")
    PredictionInterval_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-predictioninterval""", alias="PredictionInterval")
    Seasonality_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-seasonality""", alias="Seasonality")
    UpperBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-upperboundary""", alias="UpperBoundary")
    LowerBoundary_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timebasedforecastproperties.html#cfn-quicksight-template-timebasedforecastproperties-lowerboundary""", alias="LowerBoundary")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeBasedForecastProperties:
        from troposphere.quicksight import TimeBasedForecastProperties as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html
    Properties:
        - Name: Column
        - Name: RollingDate
        - Name: Value
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: FilterId
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-column""", alias="Column")
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-rollingdate""", alias="RollingDate")
    Value_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-value""", alias="Value")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-parametername""", alias="ParameterName")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timeequalityfilter.html#cfn-quicksight-template-timeequalityfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeEqualityFilter:
        from troposphere.quicksight import TimeEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeDrillDownFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html
    Properties:
        - Name: Column
        - Name: RangeMinimum
        - Name: TimeGranularity
        - Name: RangeMaximum
    
    """
    
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html#cfn-quicksight-template-timerangedrilldownfilter-column""", alias="Column")
    RangeMinimum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html#cfn-quicksight-template-timerangedrilldownfilter-rangeminimum""", alias="RangeMinimum")
    TimeGranularity_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html#cfn-quicksight-template-timerangedrilldownfilter-timegranularity""", alias="TimeGranularity")
    RangeMaximum_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangedrilldownfilter.html#cfn-quicksight-template-timerangedrilldownfilter-rangemaximum""", alias="RangeMaximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeDrillDownFilter:
        from troposphere.quicksight import TimeRangeDrillDownFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html
    Properties:
        - Name: RangeMinimumValue
        - Name: Column
        - Name: RangeMaximumValue
        - Name: IncludeMaximum
        - Name: TimeGranularity
        - Name: NullOption
        - Name: FilterId
        - Name: IncludeMinimum
        - Name: ExcludePeriodConfiguration
    
    """
    
    RangeMinimumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-rangeminimumvalue""", alias="RangeMinimumValue")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-column""", alias="Column")
    RangeMaximumValue_: Optional['TimeRangeFilterValue'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-rangemaximumvalue""", alias="RangeMaximumValue")
    IncludeMaximum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-includemaximum""", alias="IncludeMaximum")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-timegranularity""", alias="TimeGranularity")
    NullOption_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-nulloption""", alias="NullOption")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-filterid""", alias="FilterId")
    IncludeMinimum_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-includeminimum""", alias="IncludeMinimum")
    ExcludePeriodConfiguration_: Optional['ExcludePeriodConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefilter.html#cfn-quicksight-template-timerangefilter-excludeperiodconfiguration""", alias="ExcludePeriodConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilter:
        from troposphere.quicksight import TimeRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TimeRangeFilterValue(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefiltervalue.html
    Properties:
        - Name: RollingDate
        - Name: StaticValue
        - Name: Parameter
    
    """
    
    RollingDate_: Optional['RollingDateConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefiltervalue.html#cfn-quicksight-template-timerangefiltervalue-rollingdate""", alias="RollingDate")
    StaticValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefiltervalue.html#cfn-quicksight-template-timerangefiltervalue-staticvalue""", alias="StaticValue")
    Parameter_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-timerangefiltervalue.html#cfn-quicksight-template-timerangefiltervalue-parameter""", alias="Parameter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TimeRangeFilterValue:
        from troposphere.quicksight import TimeRangeFilterValue as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipItem(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipitem.html
    Properties:
        - Name: FieldTooltipItem
        - Name: ColumnTooltipItem
    
    """
    
    FieldTooltipItem_: Optional['FieldTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipitem.html#cfn-quicksight-template-tooltipitem-fieldtooltipitem""", alias="FieldTooltipItem")
    ColumnTooltipItem_: Optional['ColumnTooltipItem'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipitem.html#cfn-quicksight-template-tooltipitem-columntooltipitem""", alias="ColumnTooltipItem")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipItem:
        from troposphere.quicksight import TooltipItem as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TooltipOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipoptions.html
    Properties:
        - Name: SelectedTooltipType
        - Name: TooltipVisibility
        - Name: FieldBasedTooltip
    
    """
    
    SelectedTooltipType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipoptions.html#cfn-quicksight-template-tooltipoptions-selectedtooltiptype""", alias="SelectedTooltipType")
    TooltipVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipoptions.html#cfn-quicksight-template-tooltipoptions-tooltipvisibility""", alias="TooltipVisibility")
    FieldBasedTooltip_: Optional['FieldBasedTooltip'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-tooltipoptions.html#cfn-quicksight-template-tooltipoptions-fieldbasedtooltip""", alias="FieldBasedTooltip")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TooltipOptions:
        from troposphere.quicksight import TooltipOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html
    Properties:
        - Name: AggregationSortConfigurations
        - Name: Column
        - Name: TimeGranularity
        - Name: ParameterName
        - Name: Limit
        - Name: FilterId
    
    """
    
    AggregationSortConfigurations_: List['AggregationSortConfiguration'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-aggregationsortconfigurations""", alias="AggregationSortConfigurations")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-column""", alias="Column")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-timegranularity""", alias="TimeGranularity")
    ParameterName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-parametername""", alias="ParameterName")
    Limit_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-limit""", alias="Limit")
    FilterId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomfilter.html#cfn-quicksight-template-topbottomfilter-filterid""", alias="FilterId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomFilter:
        from troposphere.quicksight import TopBottomFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomMoversComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: Value
        - Name: SortOrder
        - Name: Time
        - Name: MoverSize
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-category""", alias="Category")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-value""", alias="Value")
    SortOrder_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-sortorder""", alias="SortOrder")
    Time_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-time""", alias="Time")
    MoverSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-moversize""", alias="MoverSize")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottommoverscomputation.html#cfn-quicksight-template-topbottommoverscomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomMoversComputation:
        from troposphere.quicksight import TopBottomMoversComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopBottomRankedComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html
    Properties:
        - Name: Type
        - Name: Category
        - Name: ResultSize
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Type_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-type""", alias="Type")
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-category""", alias="Category")
    ResultSize_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-resultsize""", alias="ResultSize")
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-topbottomrankedcomputation.html#cfn-quicksight-template-topbottomrankedcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopBottomRankedComputation:
        from troposphere.quicksight import TopBottomRankedComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationcomputation.html
    Properties:
        - Name: Value
        - Name: ComputationId
        - Name: Name
    
    """
    
    Value_: Optional['MeasureField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationcomputation.html#cfn-quicksight-template-totalaggregationcomputation-value""", alias="Value")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationcomputation.html#cfn-quicksight-template-totalaggregationcomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationcomputation.html#cfn-quicksight-template-totalaggregationcomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationComputation:
        from troposphere.quicksight import TotalAggregationComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationFunction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationfunction.html
    Properties:
        - Name: SimpleTotalAggregationFunction
    
    """
    
    SimpleTotalAggregationFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationfunction.html#cfn-quicksight-template-totalaggregationfunction-simpletotalaggregationfunction""", alias="SimpleTotalAggregationFunction")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationFunction:
        from troposphere.quicksight import TotalAggregationFunction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalAggregationOption(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationoption.html
    Properties:
        - Name: TotalAggregationFunction
        - Name: FieldId
    
    """
    
    TotalAggregationFunction_: 'TotalAggregationFunction' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationoption.html#cfn-quicksight-template-totalaggregationoption-totalaggregationfunction""", alias="TotalAggregationFunction")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totalaggregationoption.html#cfn-quicksight-template-totalaggregationoption-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalAggregationOption:
        from troposphere.quicksight import TotalAggregationOption as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TotalOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html
    Properties:
        - Name: CustomLabel
        - Name: TotalAggregationOptions
        - Name: ScrollStatus
        - Name: Placement
        - Name: TotalCellStyle
        - Name: TotalsVisibility
    
    """
    
    CustomLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-customlabel""", alias="CustomLabel")
    TotalAggregationOptions_: Optional[List['TotalAggregationOption']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-totalaggregationoptions""", alias="TotalAggregationOptions")
    ScrollStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-scrollstatus""", alias="ScrollStatus")
    Placement_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-placement""", alias="Placement")
    TotalCellStyle_: Optional['TableCellStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-totalcellstyle""", alias="TotalCellStyle")
    TotalsVisibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-totaloptions.html#cfn-quicksight-template-totaloptions-totalsvisibility""", alias="TotalsVisibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TotalOptions:
        from troposphere.quicksight import TotalOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapaggregatedfieldwells.html
    Properties:
        - Name: Sizes
        - Name: Colors
        - Name: Groups
    
    """
    
    Sizes_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapaggregatedfieldwells.html#cfn-quicksight-template-treemapaggregatedfieldwells-sizes""", alias="Sizes")
    Colors_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapaggregatedfieldwells.html#cfn-quicksight-template-treemapaggregatedfieldwells-colors""", alias="Colors")
    Groups_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapaggregatedfieldwells.html#cfn-quicksight-template-treemapaggregatedfieldwells-groups""", alias="Groups")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapAggregatedFieldWells:
        from troposphere.quicksight import TreeMapAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: ColorLabelOptions
        - Name: SizeLabelOptions
        - Name: FieldWells
        - Name: Tooltip
        - Name: ColorScale
        - Name: GroupLabelOptions
    
    """
    
    SortConfiguration_: Optional['TreeMapSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-datalabels""", alias="DataLabels")
    ColorLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-colorlabeloptions""", alias="ColorLabelOptions")
    SizeLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-sizelabeloptions""", alias="SizeLabelOptions")
    FieldWells_: Optional['TreeMapFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-fieldwells""", alias="FieldWells")
    Tooltip_: Optional['TooltipOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-tooltip""", alias="Tooltip")
    ColorScale_: Optional['ColorScale'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-colorscale""", alias="ColorScale")
    GroupLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapconfiguration.html#cfn-quicksight-template-treemapconfiguration-grouplabeloptions""", alias="GroupLabelOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapConfiguration:
        from troposphere.quicksight import TreeMapConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapfieldwells.html
    Properties:
        - Name: TreeMapAggregatedFieldWells
    
    """
    
    TreeMapAggregatedFieldWells_: Optional['TreeMapAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapfieldwells.html#cfn-quicksight-template-treemapfieldwells-treemapaggregatedfieldwells""", alias="TreeMapAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapFieldWells:
        from troposphere.quicksight import TreeMapFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapsortconfiguration.html
    Properties:
        - Name: TreeMapSort
        - Name: TreeMapGroupItemsLimitConfiguration
    
    """
    
    TreeMapSort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapsortconfiguration.html#cfn-quicksight-template-treemapsortconfiguration-treemapsort""", alias="TreeMapSort")
    TreeMapGroupItemsLimitConfiguration_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapsortconfiguration.html#cfn-quicksight-template-treemapsortconfiguration-treemapgroupitemslimitconfiguration""", alias="TreeMapGroupItemsLimitConfiguration")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapSortConfiguration:
        from troposphere.quicksight import TreeMapSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TreeMapVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['TreeMapConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-treemapvisual.html#cfn-quicksight-template-treemapvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TreeMapVisual:
        from troposphere.quicksight import TreeMapVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TrendArrowOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-trendarrowoptions.html
    Properties:
        - Name: Visibility
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-trendarrowoptions.html#cfn-quicksight-template-trendarrowoptions-visibility""", alias="Visibility")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TrendArrowOptions:
        from troposphere.quicksight import TrendArrowOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UnaggregatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-unaggregatedfield.html
    Properties:
        - Name: FormatConfiguration
        - Name: Column
        - Name: FieldId
    
    """
    
    FormatConfiguration_: Optional['FormatConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-unaggregatedfield.html#cfn-quicksight-template-unaggregatedfield-formatconfiguration""", alias="FormatConfiguration")
    Column_: 'ColumnIdentifier' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-unaggregatedfield.html#cfn-quicksight-template-unaggregatedfield-column""", alias="Column")
    FieldId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-unaggregatedfield.html#cfn-quicksight-template-unaggregatedfield-fieldid""", alias="FieldId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UnaggregatedField:
        from troposphere.quicksight import UnaggregatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UniqueValuesComputation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-uniquevaluescomputation.html
    Properties:
        - Name: Category
        - Name: ComputationId
        - Name: Name
    
    """
    
    Category_: Optional['DimensionField'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-uniquevaluescomputation.html#cfn-quicksight-template-uniquevaluescomputation-category""", alias="Category")
    ComputationId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-uniquevaluescomputation.html#cfn-quicksight-template-uniquevaluescomputation-computationid""", alias="ComputationId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-uniquevaluescomputation.html#cfn-quicksight-template-uniquevaluescomputation-name""", alias="Name")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UniqueValuesComputation:
        from troposphere.quicksight import UniqueValuesComputation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ValidationStrategy(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-validationstrategy.html
    Properties:
        - Name: Mode
    
    """
    
    Mode_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-validationstrategy.html#cfn-quicksight-template-validationstrategy-mode""", alias="Mode")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ValidationStrategy:
        from troposphere.quicksight import ValidationStrategy as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisibleRangeOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visiblerangeoptions.html
    Properties:
        - Name: PercentRange
    
    """
    
    PercentRange_: Optional['PercentVisibleRange'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visiblerangeoptions.html#cfn-quicksight-template-visiblerangeoptions-percentrange""", alias="PercentRange")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisibleRangeOptions:
        from troposphere.quicksight import VisibleRangeOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Visual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html
    Properties:
        - Name: FunnelChartVisual
        - Name: FilledMapVisual
        - Name: BoxPlotVisual
        - Name: WaterfallVisual
        - Name: CustomContentVisual
        - Name: PieChartVisual
        - Name: KPIVisual
        - Name: HistogramVisual
        - Name: TableVisual
        - Name: PivotTableVisual
        - Name: GeospatialMapVisual
        - Name: BarChartVisual
        - Name: ScatterPlotVisual
        - Name: RadarChartVisual
        - Name: HeatMapVisual
        - Name: TreeMapVisual
        - Name: ComboChartVisual
        - Name: WordCloudVisual
        - Name: InsightVisual
        - Name: SankeyDiagramVisual
        - Name: GaugeChartVisual
        - Name: LineChartVisual
        - Name: EmptyVisual
    
    """
    
    FunnelChartVisual_: Optional['FunnelChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-funnelchartvisual""", alias="FunnelChartVisual")
    FilledMapVisual_: Optional['FilledMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-filledmapvisual""", alias="FilledMapVisual")
    BoxPlotVisual_: Optional['BoxPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-boxplotvisual""", alias="BoxPlotVisual")
    WaterfallVisual_: Optional['WaterfallVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-waterfallvisual""", alias="WaterfallVisual")
    CustomContentVisual_: Optional['CustomContentVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-customcontentvisual""", alias="CustomContentVisual")
    PieChartVisual_: Optional['PieChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-piechartvisual""", alias="PieChartVisual")
    KPIVisual_: Optional['KPIVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-kpivisual""", alias="KPIVisual")
    HistogramVisual_: Optional['HistogramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-histogramvisual""", alias="HistogramVisual")
    TableVisual_: Optional['TableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-tablevisual""", alias="TableVisual")
    PivotTableVisual_: Optional['PivotTableVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-pivottablevisual""", alias="PivotTableVisual")
    GeospatialMapVisual_: Optional['GeospatialMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-geospatialmapvisual""", alias="GeospatialMapVisual")
    BarChartVisual_: Optional['BarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-barchartvisual""", alias="BarChartVisual")
    ScatterPlotVisual_: Optional['ScatterPlotVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-scatterplotvisual""", alias="ScatterPlotVisual")
    RadarChartVisual_: Optional['RadarChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-radarchartvisual""", alias="RadarChartVisual")
    HeatMapVisual_: Optional['HeatMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-heatmapvisual""", alias="HeatMapVisual")
    TreeMapVisual_: Optional['TreeMapVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-treemapvisual""", alias="TreeMapVisual")
    ComboChartVisual_: Optional['ComboChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-combochartvisual""", alias="ComboChartVisual")
    WordCloudVisual_: Optional['WordCloudVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-wordcloudvisual""", alias="WordCloudVisual")
    InsightVisual_: Optional['InsightVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-insightvisual""", alias="InsightVisual")
    SankeyDiagramVisual_: Optional['SankeyDiagramVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-sankeydiagramvisual""", alias="SankeyDiagramVisual")
    GaugeChartVisual_: Optional['GaugeChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-gaugechartvisual""", alias="GaugeChartVisual")
    LineChartVisual_: Optional['LineChartVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-linechartvisual""", alias="LineChartVisual")
    EmptyVisual_: Optional['EmptyVisual'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visual.html#cfn-quicksight-template-visual-emptyvisual""", alias="EmptyVisual")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Visual:
        from troposphere.quicksight import Visual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomAction(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html
    Properties:
        - Name: Status
        - Name: Trigger
        - Name: CustomActionId
        - Name: Name
        - Name: ActionOperations
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html#cfn-quicksight-template-visualcustomaction-status""", alias="Status")
    Trigger_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html#cfn-quicksight-template-visualcustomaction-trigger""", alias="Trigger")
    CustomActionId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html#cfn-quicksight-template-visualcustomaction-customactionid""", alias="CustomActionId")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html#cfn-quicksight-template-visualcustomaction-name""", alias="Name")
    ActionOperations_: List['VisualCustomActionOperation'] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomaction.html#cfn-quicksight-template-visualcustomaction-actionoperations""", alias="ActionOperations")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomAction:
        from troposphere.quicksight import VisualCustomAction as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualCustomActionOperation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html
    Properties:
        - Name: NavigationOperation
        - Name: SetParametersOperation
        - Name: FilterOperation
        - Name: URLOperation
    
    """
    
    NavigationOperation_: Optional['CustomActionNavigationOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html#cfn-quicksight-template-visualcustomactionoperation-navigationoperation""", alias="NavigationOperation")
    SetParametersOperation_: Optional['CustomActionSetParametersOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html#cfn-quicksight-template-visualcustomactionoperation-setparametersoperation""", alias="SetParametersOperation")
    FilterOperation_: Optional['CustomActionFilterOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html#cfn-quicksight-template-visualcustomactionoperation-filteroperation""", alias="FilterOperation")
    URLOperation_: Optional['CustomActionURLOperation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualcustomactionoperation.html#cfn-quicksight-template-visualcustomactionoperation-urloperation""", alias="URLOperation")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualCustomActionOperation:
        from troposphere.quicksight import VisualCustomActionOperation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualPalette(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualpalette.html
    Properties:
        - Name: ChartColor
        - Name: ColorMap
    
    """
    
    ChartColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualpalette.html#cfn-quicksight-template-visualpalette-chartcolor""", alias="ChartColor")
    ColorMap_: Optional[List['DataPathColor']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualpalette.html#cfn-quicksight-template-visualpalette-colormap""", alias="ColorMap")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualPalette:
        from troposphere.quicksight import VisualPalette as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualSubtitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualsubtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualsubtitlelabeloptions.html#cfn-quicksight-template-visualsubtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['LongFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualsubtitlelabeloptions.html#cfn-quicksight-template-visualsubtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualSubtitleLabelOptions:
        from troposphere.quicksight import VisualSubtitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class VisualTitleLabelOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualtitlelabeloptions.html
    Properties:
        - Name: Visibility
        - Name: FormatText
    
    """
    
    Visibility_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualtitlelabeloptions.html#cfn-quicksight-template-visualtitlelabeloptions-visibility""", alias="Visibility")
    FormatText_: Optional['ShortFormatText'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-visualtitlelabeloptions.html#cfn-quicksight-template-visualtitlelabeloptions-formattext""", alias="FormatText")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.VisualTitleLabelOptions:
        from troposphere.quicksight import VisualTitleLabelOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartaggregatedfieldwells.html
    Properties:
        - Name: Categories
        - Name: Breakdowns
        - Name: Values
    
    """
    
    Categories_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartaggregatedfieldwells.html#cfn-quicksight-template-waterfallchartaggregatedfieldwells-categories""", alias="Categories")
    Breakdowns_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartaggregatedfieldwells.html#cfn-quicksight-template-waterfallchartaggregatedfieldwells-breakdowns""", alias="Breakdowns")
    Values_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartaggregatedfieldwells.html#cfn-quicksight-template-waterfallchartaggregatedfieldwells-values""", alias="Values")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartAggregatedFieldWells:
        from troposphere.quicksight import WaterfallChartAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html
    Properties:
        - Name: CategoryAxisLabelOptions
        - Name: SortConfiguration
        - Name: Legend
        - Name: DataLabels
        - Name: PrimaryYAxisLabelOptions
        - Name: FieldWells
        - Name: WaterfallChartOptions
        - Name: CategoryAxisDisplayOptions
        - Name: PrimaryYAxisDisplayOptions
        - Name: VisualPalette
    
    """
    
    CategoryAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-categoryaxislabeloptions""", alias="CategoryAxisLabelOptions")
    SortConfiguration_: Optional['WaterfallChartSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    Legend_: Optional['LegendOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-legend""", alias="Legend")
    DataLabels_: Optional['DataLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-datalabels""", alias="DataLabels")
    PrimaryYAxisLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-primaryyaxislabeloptions""", alias="PrimaryYAxisLabelOptions")
    FieldWells_: Optional['WaterfallChartFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-fieldwells""", alias="FieldWells")
    WaterfallChartOptions_: Optional['WaterfallChartOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-waterfallchartoptions""", alias="WaterfallChartOptions")
    CategoryAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-categoryaxisdisplayoptions""", alias="CategoryAxisDisplayOptions")
    PrimaryYAxisDisplayOptions_: Optional['AxisDisplayOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-primaryyaxisdisplayoptions""", alias="PrimaryYAxisDisplayOptions")
    VisualPalette_: Optional['VisualPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartconfiguration.html#cfn-quicksight-template-waterfallchartconfiguration-visualpalette""", alias="VisualPalette")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartConfiguration:
        from troposphere.quicksight import WaterfallChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartfieldwells.html
    Properties:
        - Name: WaterfallChartAggregatedFieldWells
    
    """
    
    WaterfallChartAggregatedFieldWells_: Optional['WaterfallChartAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartfieldwells.html#cfn-quicksight-template-waterfallchartfieldwells-waterfallchartaggregatedfieldwells""", alias="WaterfallChartAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartFieldWells:
        from troposphere.quicksight import WaterfallChartFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartoptions.html
    Properties:
        - Name: TotalBarLabel
    
    """
    
    TotalBarLabel_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartoptions.html#cfn-quicksight-template-waterfallchartoptions-totalbarlabel""", alias="TotalBarLabel")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartOptions:
        from troposphere.quicksight import WaterfallChartOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallChartSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartsortconfiguration.html
    Properties:
        - Name: BreakdownItemsLimit
        - Name: CategorySort
    
    """
    
    BreakdownItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartsortconfiguration.html#cfn-quicksight-template-waterfallchartsortconfiguration-breakdownitemslimit""", alias="BreakdownItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallchartsortconfiguration.html#cfn-quicksight-template-waterfallchartsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallChartSortConfiguration:
        from troposphere.quicksight import WaterfallChartSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WaterfallVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WaterfallChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-waterfallvisual.html#cfn-quicksight-template-waterfallvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WaterfallVisual:
        from troposphere.quicksight import WaterfallVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfPointScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifpointscenario.html
    Properties:
        - Name: Value
        - Name: Date
    
    """
    
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifpointscenario.html#cfn-quicksight-template-whatifpointscenario-value""", alias="Value")
    Date_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifpointscenario.html#cfn-quicksight-template-whatifpointscenario-date""", alias="Date")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfPointScenario:
        from troposphere.quicksight import WhatIfPointScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WhatIfRangeScenario(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifrangescenario.html
    Properties:
        - Name: StartDate
        - Name: Value
        - Name: EndDate
    
    """
    
    StartDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifrangescenario.html#cfn-quicksight-template-whatifrangescenario-startdate""", alias="StartDate")
    Value_: float =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifrangescenario.html#cfn-quicksight-template-whatifrangescenario-value""", alias="Value")
    EndDate_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-whatifrangescenario.html#cfn-quicksight-template-whatifrangescenario-enddate""", alias="EndDate")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WhatIfRangeScenario:
        from troposphere.quicksight import WhatIfRangeScenario as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudAggregatedFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudaggregatedfieldwells.html
    Properties:
        - Name: GroupBy
        - Name: Size
    
    """
    
    GroupBy_: Optional[List['DimensionField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudaggregatedfieldwells.html#cfn-quicksight-template-wordcloudaggregatedfieldwells-groupby""", alias="GroupBy")
    Size_: Optional[List['MeasureField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudaggregatedfieldwells.html#cfn-quicksight-template-wordcloudaggregatedfieldwells-size""", alias="Size")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudAggregatedFieldWells:
        from troposphere.quicksight import WordCloudAggregatedFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudChartConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html
    Properties:
        - Name: SortConfiguration
        - Name: CategoryLabelOptions
        - Name: FieldWells
        - Name: WordCloudOptions
    
    """
    
    SortConfiguration_: Optional['WordCloudSortConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html#cfn-quicksight-template-wordcloudchartconfiguration-sortconfiguration""", alias="SortConfiguration")
    CategoryLabelOptions_: Optional['ChartAxisLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html#cfn-quicksight-template-wordcloudchartconfiguration-categorylabeloptions""", alias="CategoryLabelOptions")
    FieldWells_: Optional['WordCloudFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html#cfn-quicksight-template-wordcloudchartconfiguration-fieldwells""", alias="FieldWells")
    WordCloudOptions_: Optional['WordCloudOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudchartconfiguration.html#cfn-quicksight-template-wordcloudchartconfiguration-wordcloudoptions""", alias="WordCloudOptions")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudChartConfiguration:
        from troposphere.quicksight import WordCloudChartConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudFieldWells(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudfieldwells.html
    Properties:
        - Name: WordCloudAggregatedFieldWells
    
    """
    
    WordCloudAggregatedFieldWells_: Optional['WordCloudAggregatedFieldWells'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudfieldwells.html#cfn-quicksight-template-wordcloudfieldwells-wordcloudaggregatedfieldwells""", alias="WordCloudAggregatedFieldWells")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudFieldWells:
        from troposphere.quicksight import WordCloudFieldWells as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html
    Properties:
        - Name: WordOrientation
        - Name: WordScaling
        - Name: CloudLayout
        - Name: MaximumStringLength
        - Name: WordCasing
        - Name: WordPadding
    
    """
    
    WordOrientation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-wordorientation""", alias="WordOrientation")
    WordScaling_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-wordscaling""", alias="WordScaling")
    CloudLayout_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-cloudlayout""", alias="CloudLayout")
    MaximumStringLength_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-maximumstringlength""", alias="MaximumStringLength")
    WordCasing_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-wordcasing""", alias="WordCasing")
    WordPadding_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudoptions.html#cfn-quicksight-template-wordcloudoptions-wordpadding""", alias="WordPadding")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudOptions:
        from troposphere.quicksight import WordCloudOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudSortConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudsortconfiguration.html
    Properties:
        - Name: CategoryItemsLimit
        - Name: CategorySort
    
    """
    
    CategoryItemsLimit_: Optional['ItemsLimitConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudsortconfiguration.html#cfn-quicksight-template-wordcloudsortconfiguration-categoryitemslimit""", alias="CategoryItemsLimit")
    CategorySort_: Optional[List['FieldSortOptions']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudsortconfiguration.html#cfn-quicksight-template-wordcloudsortconfiguration-categorysort""", alias="CategorySort")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudSortConfiguration:
        from troposphere.quicksight import WordCloudSortConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class WordCloudVisual(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html
    Properties:
        - Name: Subtitle
        - Name: VisualId
        - Name: ChartConfiguration
        - Name: Actions
        - Name: Title
        - Name: ColumnHierarchies
    
    """
    
    Subtitle_: Optional['VisualSubtitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-subtitle""", alias="Subtitle")
    VisualId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-visualid""", alias="VisualId")
    ChartConfiguration_: Optional['WordCloudChartConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-chartconfiguration""", alias="ChartConfiguration")
    Actions_: Optional[List['VisualCustomAction']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-actions""", alias="Actions")
    Title_: Optional['VisualTitleLabelOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-title""", alias="Title")
    ColumnHierarchies_: Optional[List['ColumnHierarchy']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-template-wordcloudvisual.html#cfn-quicksight-template-wordcloudvisual-columnhierarchies""", alias="ColumnHierarchies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.WordCloudVisual:
        from troposphere.quicksight import WordCloudVisual as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class BorderStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-borderstyle.html
    Properties:
        - Name: Show
    
    """
    
    Show_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-borderstyle.html#cfn-quicksight-theme-borderstyle-show""", alias="Show")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.BorderStyle:
        from troposphere.quicksight import BorderStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataColorPalette(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-datacolorpalette.html
    Properties:
        - Name: EmptyFillColor
        - Name: Colors
        - Name: MinMaxGradient
    
    """
    
    EmptyFillColor_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-datacolorpalette.html#cfn-quicksight-theme-datacolorpalette-emptyfillcolor""", alias="EmptyFillColor")
    Colors_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-datacolorpalette.html#cfn-quicksight-theme-datacolorpalette-colors""", alias="Colors")
    MinMaxGradient_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-datacolorpalette.html#cfn-quicksight-theme-datacolorpalette-minmaxgradient""", alias="MinMaxGradient")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataColorPalette:
        from troposphere.quicksight import DataColorPalette as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Font(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-font.html
    Properties:
        - Name: FontFamily
    
    """
    
    FontFamily_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-font.html#cfn-quicksight-theme-font-fontfamily""", alias="FontFamily")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Font:
        from troposphere.quicksight import Font as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class GutterStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-gutterstyle.html
    Properties:
        - Name: Show
    
    """
    
    Show_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-gutterstyle.html#cfn-quicksight-theme-gutterstyle-show""", alias="Show")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.GutterStyle:
        from troposphere.quicksight import GutterStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class MarginStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-marginstyle.html
    Properties:
        - Name: Show
    
    """
    
    Show_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-marginstyle.html#cfn-quicksight-theme-marginstyle-show""", alias="Show")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.MarginStyle:
        from troposphere.quicksight import MarginStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ResourcePermission(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-resourcepermission.html
    Properties:
        - Name: Actions
        - Name: Resource
        - Name: Principal
    
    """
    
    Actions_: List[str] =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-resourcepermission.html#cfn-quicksight-theme-resourcepermission-actions""", alias="Actions")
    Resource_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-resourcepermission.html#cfn-quicksight-theme-resourcepermission-resource""", alias="Resource")
    Principal_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-resourcepermission.html#cfn-quicksight-theme-resourcepermission-principal""", alias="Principal")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ResourcePermission:
        from troposphere.quicksight import ResourcePermission as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SheetStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-sheetstyle.html
    Properties:
        - Name: TileLayout
        - Name: Tile
    
    """
    
    TileLayout_: Optional['TileLayoutStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-sheetstyle.html#cfn-quicksight-theme-sheetstyle-tilelayout""", alias="TileLayout")
    Tile_: Optional['TileStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-sheetstyle.html#cfn-quicksight-theme-sheetstyle-tile""", alias="Tile")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SheetStyle:
        from troposphere.quicksight import SheetStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThemeConfiguration(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html
    Properties:
        - Name: DataColorPalette
        - Name: UIColorPalette
        - Name: Sheet
        - Name: Typography
    
    """
    
    DataColorPalette_: Optional['DataColorPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html#cfn-quicksight-theme-themeconfiguration-datacolorpalette""", alias="DataColorPalette")
    UIColorPalette_: Optional['UIColorPalette'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html#cfn-quicksight-theme-themeconfiguration-uicolorpalette""", alias="UIColorPalette")
    Sheet_: Optional['SheetStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html#cfn-quicksight-theme-themeconfiguration-sheet""", alias="Sheet")
    Typography_: Optional['Typography'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeconfiguration.html#cfn-quicksight-theme-themeconfiguration-typography""", alias="Typography")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThemeConfiguration:
        from troposphere.quicksight import ThemeConfiguration as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThemeError(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeerror.html
    Properties:
        - Name: Type
        - Name: Message
    
    """
    
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeerror.html#cfn-quicksight-theme-themeerror-type""", alias="Type")
    Message_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeerror.html#cfn-quicksight-theme-themeerror-message""", alias="Message")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThemeError:
        from troposphere.quicksight import ThemeError as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ThemeVersion(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html
    Properties:
        - Name: Status
        - Name: Errors
        - Name: Description
        - Name: CreatedTime
        - Name: Configuration
        - Name: BaseThemeId
        - Name: Arn
        - Name: VersionNumber
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-status""", alias="Status")
    Errors_: Optional[List['ThemeError']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-errors""", alias="Errors")
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-description""", alias="Description")
    CreatedTime_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-createdtime""", alias="CreatedTime")
    Configuration_: Optional['ThemeConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-configuration""", alias="Configuration")
    BaseThemeId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-basethemeid""", alias="BaseThemeId")
    Arn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-arn""", alias="Arn")
    VersionNumber_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-themeversion.html#cfn-quicksight-theme-themeversion-versionnumber""", alias="VersionNumber")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ThemeVersion:
        from troposphere.quicksight import ThemeVersion as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TileLayoutStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilelayoutstyle.html
    Properties:
        - Name: Gutter
        - Name: Margin
    
    """
    
    Gutter_: Optional['GutterStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilelayoutstyle.html#cfn-quicksight-theme-tilelayoutstyle-gutter""", alias="Gutter")
    Margin_: Optional['MarginStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilelayoutstyle.html#cfn-quicksight-theme-tilelayoutstyle-margin""", alias="Margin")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TileLayoutStyle:
        from troposphere.quicksight import TileLayoutStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TileStyle(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilestyle.html
    Properties:
        - Name: Border
    
    """
    
    Border_: Optional['BorderStyle'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-tilestyle.html#cfn-quicksight-theme-tilestyle-border""", alias="Border")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TileStyle:
        from troposphere.quicksight import TileStyle as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class Typography(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-typography.html
    Properties:
        - Name: FontFamilies
    
    """
    
    FontFamilies_: Optional[List['Font']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-typography.html#cfn-quicksight-theme-typography-fontfamilies""", alias="FontFamilies")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.Typography:
        from troposphere.quicksight import Typography as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class UIColorPalette(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html
    Properties:
        - Name: Warning
        - Name: Accent
        - Name: AccentForeground
        - Name: SecondaryBackground
        - Name: DangerForeground
        - Name: PrimaryBackground
        - Name: Dimension
        - Name: SecondaryForeground
        - Name: WarningForeground
        - Name: DimensionForeground
        - Name: PrimaryForeground
        - Name: Success
        - Name: Danger
        - Name: SuccessForeground
        - Name: Measure
        - Name: MeasureForeground
    
    """
    
    Warning_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-warning""", alias="Warning")
    Accent_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-accent""", alias="Accent")
    AccentForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-accentforeground""", alias="AccentForeground")
    SecondaryBackground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-secondarybackground""", alias="SecondaryBackground")
    DangerForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-dangerforeground""", alias="DangerForeground")
    PrimaryBackground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-primarybackground""", alias="PrimaryBackground")
    Dimension_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-dimension""", alias="Dimension")
    SecondaryForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-secondaryforeground""", alias="SecondaryForeground")
    WarningForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-warningforeground""", alias="WarningForeground")
    DimensionForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-dimensionforeground""", alias="DimensionForeground")
    PrimaryForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-primaryforeground""", alias="PrimaryForeground")
    Success_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-success""", alias="Success")
    Danger_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-danger""", alias="Danger")
    SuccessForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-successforeground""", alias="SuccessForeground")
    Measure_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-measure""", alias="Measure")
    MeasureForeground_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-theme-uicolorpalette.html#cfn-quicksight-theme-uicolorpalette-measureforeground""", alias="MeasureForeground")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.UIColorPalette:
        from troposphere.quicksight import UIColorPalette as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CellValueSynonym(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-cellvaluesynonym.html
    Properties:
        - Name: Synonyms
        - Name: CellValue
    
    """
    
    Synonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-cellvaluesynonym.html#cfn-quicksight-topic-cellvaluesynonym-synonyms""", alias="Synonyms")
    CellValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-cellvaluesynonym.html#cfn-quicksight-topic-cellvaluesynonym-cellvalue""", alias="CellValue")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CellValueSynonym:
        from troposphere.quicksight import CellValueSynonym as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class CollectiveConstant(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-collectiveconstant.html
    Properties:
        - Name: ValueList
    
    """
    
    ValueList_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-collectiveconstant.html#cfn-quicksight-topic-collectiveconstant-valuelist""", alias="ValueList")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.CollectiveConstant:
        from troposphere.quicksight import CollectiveConstant as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class ComparativeOrder(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-comparativeorder.html
    Properties:
        - Name: SpecifedOrder
        - Name: UseOrdering
        - Name: TreatUndefinedSpecifiedValues
    
    """
    
    SpecifedOrder_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-comparativeorder.html#cfn-quicksight-topic-comparativeorder-specifedorder""", alias="SpecifedOrder")
    UseOrdering_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-comparativeorder.html#cfn-quicksight-topic-comparativeorder-useordering""", alias="UseOrdering")
    TreatUndefinedSpecifiedValues_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-comparativeorder.html#cfn-quicksight-topic-comparativeorder-treatundefinedspecifiedvalues""", alias="TreatUndefinedSpecifiedValues")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.ComparativeOrder:
        from troposphere.quicksight import ComparativeOrder as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DataAggregation(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-dataaggregation.html
    Properties:
        - Name: DatasetRowDateGranularity
        - Name: DefaultDateColumnName
    
    """
    
    DatasetRowDateGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-dataaggregation.html#cfn-quicksight-topic-dataaggregation-datasetrowdategranularity""", alias="DatasetRowDateGranularity")
    DefaultDateColumnName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-dataaggregation.html#cfn-quicksight-topic-dataaggregation-defaultdatecolumnname""", alias="DefaultDateColumnName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DataAggregation:
        from troposphere.quicksight import DataAggregation as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DatasetMetadata(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html
    Properties:
        - Name: DatasetArn
        - Name: Filters
        - Name: NamedEntities
        - Name: DatasetName
        - Name: CalculatedFields
        - Name: Columns
        - Name: DataAggregation
        - Name: DatasetDescription
    
    """
    
    DatasetArn_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-datasetarn""", alias="DatasetArn")
    Filters_: Optional[List['TopicFilter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-filters""", alias="Filters")
    NamedEntities_: Optional[List['TopicNamedEntity']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-namedentities""", alias="NamedEntities")
    DatasetName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-datasetname""", alias="DatasetName")
    CalculatedFields_: Optional[List['TopicCalculatedField']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-calculatedfields""", alias="CalculatedFields")
    Columns_: Optional[List['TopicColumn']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-columns""", alias="Columns")
    DataAggregation_: Optional['DataAggregation'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-dataaggregation""", alias="DataAggregation")
    DatasetDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-datasetmetadata.html#cfn-quicksight-topic-datasetmetadata-datasetdescription""", alias="DatasetDescription")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DatasetMetadata:
        from troposphere.quicksight import DatasetMetadata as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DefaultFormatting(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-defaultformatting.html
    Properties:
        - Name: DisplayFormatOptions
        - Name: DisplayFormat
    
    """
    
    DisplayFormatOptions_: Optional['DisplayFormatOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-defaultformatting.html#cfn-quicksight-topic-defaultformatting-displayformatoptions""", alias="DisplayFormatOptions")
    DisplayFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-defaultformatting.html#cfn-quicksight-topic-defaultformatting-displayformat""", alias="DisplayFormat")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DefaultFormatting:
        from troposphere.quicksight import DefaultFormatting as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class DisplayFormatOptions(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html
    Properties:
        - Name: DecimalSeparator
        - Name: FractionDigits
        - Name: Suffix
        - Name: DateFormat
        - Name: UnitScaler
        - Name: NegativeFormat
        - Name: UseBlankCellFormat
        - Name: Prefix
        - Name: BlankCellFormat
        - Name: CurrencySymbol
        - Name: GroupingSeparator
        - Name: UseGrouping
    
    """
    
    DecimalSeparator_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-decimalseparator""", alias="DecimalSeparator")
    FractionDigits_: Optional[float] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-fractiondigits""", alias="FractionDigits")
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-suffix""", alias="Suffix")
    DateFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-dateformat""", alias="DateFormat")
    UnitScaler_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-unitscaler""", alias="UnitScaler")
    NegativeFormat_: Optional['NegativeFormat'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-negativeformat""", alias="NegativeFormat")
    UseBlankCellFormat_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-useblankcellformat""", alias="UseBlankCellFormat")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-prefix""", alias="Prefix")
    BlankCellFormat_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-blankcellformat""", alias="BlankCellFormat")
    CurrencySymbol_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-currencysymbol""", alias="CurrencySymbol")
    GroupingSeparator_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-groupingseparator""", alias="GroupingSeparator")
    UseGrouping_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-displayformatoptions.html#cfn-quicksight-topic-displayformatoptions-usegrouping""", alias="UseGrouping")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.DisplayFormatOptions:
        from troposphere.quicksight import DisplayFormatOptions as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NamedEntityDefinition(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html
    Properties:
        - Name: PropertyName
        - Name: PropertyUsage
        - Name: PropertyRole
        - Name: Metric
        - Name: FieldName
    
    """
    
    PropertyName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html#cfn-quicksight-topic-namedentitydefinition-propertyname""", alias="PropertyName")
    PropertyUsage_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html#cfn-quicksight-topic-namedentitydefinition-propertyusage""", alias="PropertyUsage")
    PropertyRole_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html#cfn-quicksight-topic-namedentitydefinition-propertyrole""", alias="PropertyRole")
    Metric_: Optional['NamedEntityDefinitionMetric'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html#cfn-quicksight-topic-namedentitydefinition-metric""", alias="Metric")
    FieldName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinition.html#cfn-quicksight-topic-namedentitydefinition-fieldname""", alias="FieldName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NamedEntityDefinition:
        from troposphere.quicksight import NamedEntityDefinition as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NamedEntityDefinitionMetric(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinitionmetric.html
    Properties:
        - Name: Aggregation
        - Name: AggregationFunctionParameters
    
    """
    
    Aggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinitionmetric.html#cfn-quicksight-topic-namedentitydefinitionmetric-aggregation""", alias="Aggregation")
    AggregationFunctionParameters_: Optional[Dict[str, str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-namedentitydefinitionmetric.html#cfn-quicksight-topic-namedentitydefinitionmetric-aggregationfunctionparameters""", alias="AggregationFunctionParameters")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NamedEntityDefinitionMetric:
        from troposphere.quicksight import NamedEntityDefinitionMetric as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NegativeFormat(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-negativeformat.html
    Properties:
        - Name: Suffix
        - Name: Prefix
    
    """
    
    Suffix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-negativeformat.html#cfn-quicksight-topic-negativeformat-suffix""", alias="Suffix")
    Prefix_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-negativeformat.html#cfn-quicksight-topic-negativeformat-prefix""", alias="Prefix")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NegativeFormat:
        from troposphere.quicksight import NegativeFormat as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class RangeConstant(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-rangeconstant.html
    Properties:
        - Name: Minimum
        - Name: Maximum
    
    """
    
    Minimum_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-rangeconstant.html#cfn-quicksight-topic-rangeconstant-minimum""", alias="Minimum")
    Maximum_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-rangeconstant.html#cfn-quicksight-topic-rangeconstant-maximum""", alias="Maximum")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.RangeConstant:
        from troposphere.quicksight import RangeConstant as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SemanticEntityType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semanticentitytype.html
    Properties:
        - Name: TypeName
        - Name: TypeParameters
        - Name: SubTypeName
    
    """
    
    TypeName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semanticentitytype.html#cfn-quicksight-topic-semanticentitytype-typename""", alias="TypeName")
    TypeParameters_: Optional[Dict[str, str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semanticentitytype.html#cfn-quicksight-topic-semanticentitytype-typeparameters""", alias="TypeParameters")
    SubTypeName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semanticentitytype.html#cfn-quicksight-topic-semanticentitytype-subtypename""", alias="SubTypeName")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SemanticEntityType:
        from troposphere.quicksight import SemanticEntityType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class SemanticType(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html
    Properties:
        - Name: TruthyCellValueSynonyms
        - Name: TypeName
        - Name: TypeParameters
        - Name: SubTypeName
        - Name: TruthyCellValue
        - Name: FalseyCellValue
        - Name: FalseyCellValueSynonyms
    
    """
    
    TruthyCellValueSynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-truthycellvaluesynonyms""", alias="TruthyCellValueSynonyms")
    TypeName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-typename""", alias="TypeName")
    TypeParameters_: Optional[Dict[str, str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-typeparameters""", alias="TypeParameters")
    SubTypeName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-subtypename""", alias="SubTypeName")
    TruthyCellValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-truthycellvalue""", alias="TruthyCellValue")
    FalseyCellValue_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-falseycellvalue""", alias="FalseyCellValue")
    FalseyCellValueSynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-semantictype.html#cfn-quicksight-topic-semantictype-falseycellvaluesynonyms""", alias="FalseyCellValueSynonyms")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.SemanticType:
        from troposphere.quicksight import SemanticType as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicCalculatedField(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html
    Properties:
        - Name: SemanticType
        - Name: NotAllowedAggregations
        - Name: DefaultFormatting
        - Name: AllowedAggregations
        - Name: CalculatedFieldDescription
        - Name: CalculatedFieldSynonyms
        - Name: IsIncludedInTopic
        - Name: ColumnDataRole
        - Name: Aggregation
        - Name: Expression
        - Name: NonAdditive
        - Name: CalculatedFieldName
        - Name: NeverAggregateInFilter
        - Name: TimeGranularity
        - Name: ComparativeOrder
        - Name: CellValueSynonyms
    
    """
    
    SemanticType_: Optional['SemanticType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-semantictype""", alias="SemanticType")
    NotAllowedAggregations_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-notallowedaggregations""", alias="NotAllowedAggregations")
    DefaultFormatting_: Optional['DefaultFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-defaultformatting""", alias="DefaultFormatting")
    AllowedAggregations_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-allowedaggregations""", alias="AllowedAggregations")
    CalculatedFieldDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-calculatedfielddescription""", alias="CalculatedFieldDescription")
    CalculatedFieldSynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-calculatedfieldsynonyms""", alias="CalculatedFieldSynonyms")
    IsIncludedInTopic_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-isincludedintopic""", alias="IsIncludedInTopic")
    ColumnDataRole_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-columndatarole""", alias="ColumnDataRole")
    Aggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-aggregation""", alias="Aggregation")
    Expression_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-expression""", alias="Expression")
    NonAdditive_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-nonadditive""", alias="NonAdditive")
    CalculatedFieldName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-calculatedfieldname""", alias="CalculatedFieldName")
    NeverAggregateInFilter_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-neveraggregateinfilter""", alias="NeverAggregateInFilter")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-timegranularity""", alias="TimeGranularity")
    ComparativeOrder_: Optional['ComparativeOrder'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-comparativeorder""", alias="ComparativeOrder")
    CellValueSynonyms_: Optional[List['CellValueSynonym']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccalculatedfield.html#cfn-quicksight-topic-topiccalculatedfield-cellvaluesynonyms""", alias="CellValueSynonyms")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicCalculatedField:
        from troposphere.quicksight import TopicCalculatedField as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicCategoryFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html
    Properties:
        - Name: CategoryFilterType
        - Name: CategoryFilterFunction
        - Name: Constant
        - Name: Inverse
    
    """
    
    CategoryFilterType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html#cfn-quicksight-topic-topiccategoryfilter-categoryfiltertype""", alias="CategoryFilterType")
    CategoryFilterFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html#cfn-quicksight-topic-topiccategoryfilter-categoryfilterfunction""", alias="CategoryFilterFunction")
    Constant_: Optional['TopicCategoryFilterConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html#cfn-quicksight-topic-topiccategoryfilter-constant""", alias="Constant")
    Inverse_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilter.html#cfn-quicksight-topic-topiccategoryfilter-inverse""", alias="Inverse")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicCategoryFilter:
        from troposphere.quicksight import TopicCategoryFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicCategoryFilterConstant(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilterconstant.html
    Properties:
        - Name: SingularConstant
        - Name: ConstantType
        - Name: CollectiveConstant
    
    """
    
    SingularConstant_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilterconstant.html#cfn-quicksight-topic-topiccategoryfilterconstant-singularconstant""", alias="SingularConstant")
    ConstantType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilterconstant.html#cfn-quicksight-topic-topiccategoryfilterconstant-constanttype""", alias="ConstantType")
    CollectiveConstant_: Optional['CollectiveConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccategoryfilterconstant.html#cfn-quicksight-topic-topiccategoryfilterconstant-collectiveconstant""", alias="CollectiveConstant")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicCategoryFilterConstant:
        from troposphere.quicksight import TopicCategoryFilterConstant as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicColumn(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html
    Properties:
        - Name: SemanticType
        - Name: NotAllowedAggregations
        - Name: AllowedAggregations
        - Name: DefaultFormatting
        - Name: ColumnDescription
        - Name: IsIncludedInTopic
        - Name: ColumnDataRole
        - Name: Aggregation
        - Name: ColumnName
        - Name: NonAdditive
        - Name: ColumnSynonyms
        - Name: NeverAggregateInFilter
        - Name: TimeGranularity
        - Name: ColumnFriendlyName
        - Name: ComparativeOrder
        - Name: CellValueSynonyms
    
    """
    
    SemanticType_: Optional['SemanticType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-semantictype""", alias="SemanticType")
    NotAllowedAggregations_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-notallowedaggregations""", alias="NotAllowedAggregations")
    AllowedAggregations_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-allowedaggregations""", alias="AllowedAggregations")
    DefaultFormatting_: Optional['DefaultFormatting'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-defaultformatting""", alias="DefaultFormatting")
    ColumnDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-columndescription""", alias="ColumnDescription")
    IsIncludedInTopic_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-isincludedintopic""", alias="IsIncludedInTopic")
    ColumnDataRole_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-columndatarole""", alias="ColumnDataRole")
    Aggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-aggregation""", alias="Aggregation")
    ColumnName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-columnname""", alias="ColumnName")
    NonAdditive_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-nonadditive""", alias="NonAdditive")
    ColumnSynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-columnsynonyms""", alias="ColumnSynonyms")
    NeverAggregateInFilter_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-neveraggregateinfilter""", alias="NeverAggregateInFilter")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-timegranularity""", alias="TimeGranularity")
    ColumnFriendlyName_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-columnfriendlyname""", alias="ColumnFriendlyName")
    ComparativeOrder_: Optional['ComparativeOrder'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-comparativeorder""", alias="ComparativeOrder")
    CellValueSynonyms_: Optional[List['CellValueSynonym']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topiccolumn.html#cfn-quicksight-topic-topiccolumn-cellvaluesynonyms""", alias="CellValueSynonyms")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicColumn:
        from troposphere.quicksight import TopicColumn as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicDateRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicdaterangefilter.html
    Properties:
        - Name: Inclusive
        - Name: Constant
    
    """
    
    Inclusive_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicdaterangefilter.html#cfn-quicksight-topic-topicdaterangefilter-inclusive""", alias="Inclusive")
    Constant_: Optional['TopicRangeFilterConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicdaterangefilter.html#cfn-quicksight-topic-topicdaterangefilter-constant""", alias="Constant")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicDateRangeFilter:
        from troposphere.quicksight import TopicDateRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html
    Properties:
        - Name: FilterClass
        - Name: FilterSynonyms
        - Name: FilterType
        - Name: RelativeDateFilter
        - Name: OperandFieldName
        - Name: NumericEqualityFilter
        - Name: FilterDescription
        - Name: NumericRangeFilter
        - Name: DateRangeFilter
        - Name: FilterName
        - Name: CategoryFilter
    
    """
    
    FilterClass_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-filterclass""", alias="FilterClass")
    FilterSynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-filtersynonyms""", alias="FilterSynonyms")
    FilterType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-filtertype""", alias="FilterType")
    RelativeDateFilter_: Optional['TopicRelativeDateFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-relativedatefilter""", alias="RelativeDateFilter")
    OperandFieldName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-operandfieldname""", alias="OperandFieldName")
    NumericEqualityFilter_: Optional['TopicNumericEqualityFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-numericequalityfilter""", alias="NumericEqualityFilter")
    FilterDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-filterdescription""", alias="FilterDescription")
    NumericRangeFilter_: Optional['TopicNumericRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-numericrangefilter""", alias="NumericRangeFilter")
    DateRangeFilter_: Optional['TopicDateRangeFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-daterangefilter""", alias="DateRangeFilter")
    FilterName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-filtername""", alias="FilterName")
    CategoryFilter_: Optional['TopicCategoryFilter'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicfilter.html#cfn-quicksight-topic-topicfilter-categoryfilter""", alias="CategoryFilter")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicFilter:
        from troposphere.quicksight import TopicFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicNamedEntity(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html
    Properties:
        - Name: EntitySynonyms
        - Name: EntityName
        - Name: SemanticEntityType
        - Name: EntityDescription
        - Name: Definition
    
    """
    
    EntitySynonyms_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html#cfn-quicksight-topic-topicnamedentity-entitysynonyms""", alias="EntitySynonyms")
    EntityName_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html#cfn-quicksight-topic-topicnamedentity-entityname""", alias="EntityName")
    SemanticEntityType_: Optional['SemanticEntityType'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html#cfn-quicksight-topic-topicnamedentity-semanticentitytype""", alias="SemanticEntityType")
    EntityDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html#cfn-quicksight-topic-topicnamedentity-entitydescription""", alias="EntityDescription")
    Definition_: Optional[List['NamedEntityDefinition']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnamedentity.html#cfn-quicksight-topic-topicnamedentity-definition""", alias="Definition")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicNamedEntity:
        from troposphere.quicksight import TopicNamedEntity as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicNumericEqualityFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericequalityfilter.html
    Properties:
        - Name: Aggregation
        - Name: Constant
    
    """
    
    Aggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericequalityfilter.html#cfn-quicksight-topic-topicnumericequalityfilter-aggregation""", alias="Aggregation")
    Constant_: Optional['TopicSingularFilterConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericequalityfilter.html#cfn-quicksight-topic-topicnumericequalityfilter-constant""", alias="Constant")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicNumericEqualityFilter:
        from troposphere.quicksight import TopicNumericEqualityFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicNumericRangeFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericrangefilter.html
    Properties:
        - Name: Aggregation
        - Name: Inclusive
        - Name: Constant
    
    """
    
    Aggregation_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericrangefilter.html#cfn-quicksight-topic-topicnumericrangefilter-aggregation""", alias="Aggregation")
    Inclusive_: Optional[bool] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericrangefilter.html#cfn-quicksight-topic-topicnumericrangefilter-inclusive""", alias="Inclusive")
    Constant_: Optional['TopicRangeFilterConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicnumericrangefilter.html#cfn-quicksight-topic-topicnumericrangefilter-constant""", alias="Constant")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicNumericRangeFilter:
        from troposphere.quicksight import TopicNumericRangeFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicRangeFilterConstant(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrangefilterconstant.html
    Properties:
        - Name: ConstantType
        - Name: RangeConstant
    
    """
    
    ConstantType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrangefilterconstant.html#cfn-quicksight-topic-topicrangefilterconstant-constanttype""", alias="ConstantType")
    RangeConstant_: Optional['RangeConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrangefilterconstant.html#cfn-quicksight-topic-topicrangefilterconstant-rangeconstant""", alias="RangeConstant")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicRangeFilterConstant:
        from troposphere.quicksight import TopicRangeFilterConstant as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicRelativeDateFilter(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrelativedatefilter.html
    Properties:
        - Name: RelativeDateFilterFunction
        - Name: Constant
        - Name: TimeGranularity
    
    """
    
    RelativeDateFilterFunction_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrelativedatefilter.html#cfn-quicksight-topic-topicrelativedatefilter-relativedatefilterfunction""", alias="RelativeDateFilterFunction")
    Constant_: Optional['TopicSingularFilterConstant'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrelativedatefilter.html#cfn-quicksight-topic-topicrelativedatefilter-constant""", alias="Constant")
    TimeGranularity_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicrelativedatefilter.html#cfn-quicksight-topic-topicrelativedatefilter-timegranularity""", alias="TimeGranularity")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicRelativeDateFilter:
        from troposphere.quicksight import TopicRelativeDateFilter as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class TopicSingularFilterConstant(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicsingularfilterconstant.html
    Properties:
        - Name: SingularConstant
        - Name: ConstantType
    
    """
    
    SingularConstant_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicsingularfilterconstant.html#cfn-quicksight-topic-topicsingularfilterconstant-singularconstant""", alias="SingularConstant")
    ConstantType_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-topic-topicsingularfilterconstant.html#cfn-quicksight-topic-topicsingularfilterconstant-constanttype""", alias="ConstantType")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.TopicSingularFilterConstant:
        from troposphere.quicksight import TopicSingularFilterConstant as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    

class NetworkInterface(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html
    Properties:
        - Name: Status
        - Name: AvailabilityZone
        - Name: SubnetId
        - Name: ErrorMessage
        - Name: NetworkInterfaceId
    
    """
    
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html#cfn-quicksight-vpcconnection-networkinterface-status""", alias="Status")
    AvailabilityZone_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html#cfn-quicksight-vpcconnection-networkinterface-availabilityzone""", alias="AvailabilityZone")
    SubnetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html#cfn-quicksight-vpcconnection-networkinterface-subnetid""", alias="SubnetId")
    ErrorMessage_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html#cfn-quicksight-vpcconnection-networkinterface-errormessage""", alias="ErrorMessage")
    NetworkInterfaceId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-quicksight-vpcconnection-networkinterface.html#cfn-quicksight-vpcconnection-networkinterface-networkinterfaceid""", alias="NetworkInterfaceId")
    


    @property
    def tropo_type(self) -> troposphere.quicksight.NetworkInterface:
        from troposphere.quicksight import NetworkInterface as TropoT
        return TropoT

    def to_troposphere(self):
        property_to_troposphere(self)

    


######################################################################
# AWS Resource
######################################################################


class Analysis(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html
    Properties:
        - Name: Status
        - Name: Parameters
        - Name: SourceEntity
        - Name: ThemeArn
        - Name: AnalysisId
        - Name: Definition
        - Name: AwsAccountId
        - Name: Permissions
        - Name: ValidationStrategy
        - Name: Tags
        - Name: Name
    Attributes:
        - Name: Errors
        - Name: CreatedTime
        - Name: DataSetArns
        - Name: LastUpdatedTime
        - Name: Arn
        - Name: Sheets
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    Status_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-status""", alias="Status")
    Parameters_: Optional['Parameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-parameters""", alias="Parameters")
    SourceEntity_: Optional['AnalysisSourceEntity'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-sourceentity""", alias="SourceEntity")
    ThemeArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-themearn""", alias="ThemeArn")
    AnalysisId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-analysisid""", alias="AnalysisId")
    Definition_: Optional['AnalysisDefinition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-definition""", alias="Definition")
    AwsAccountId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-permissions""", alias="Permissions")
    ValidationStrategy_: Optional['ValidationStrategy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-validationstrategy""", alias="ValidationStrategy")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-tags""", alias="Tags")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-analysis.html#cfn-quicksight-analysis-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.Analysis:
        from troposphere.quicksight import Analysis as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import Analysis as TropoT
        return resource_to_troposphere(self, TropoT)


class Dashboard(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html
    Properties:
        - Name: Parameters
        - Name: VersionDescription
        - Name: SourceEntity
        - Name: ThemeArn
        - Name: Definition
        - Name: ValidationStrategy
        - Name: DashboardId
        - Name: LinkSharingConfiguration
        - Name: Name
        - Name: DashboardPublishOptions
        - Name: AwsAccountId
        - Name: Permissions
        - Name: Tags
    Attributes:
        - Name: Version.Status
        - Name: CreatedTime
        - Name: LastUpdatedTime
        - Name: Version.VersionNumber
        - Name: Version.Sheets
        - Name: Version.Arn
        - Name: Version.ThemeArn
        - Name: Version.Errors
        - Name: Version.CreatedTime
        - Name: Version.Description
        - Name: LastPublishedTime
        - Name: Version
        - Name: Version.DataSetArns
        - Name: Arn
        - Name: Version.SourceEntityArn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    Parameters_: Optional['Parameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-parameters""", alias="Parameters")
    VersionDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-versiondescription""", alias="VersionDescription")
    SourceEntity_: Optional['DashboardSourceEntity'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-sourceentity""", alias="SourceEntity")
    ThemeArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-themearn""", alias="ThemeArn")
    Definition_: Optional['DashboardVersionDefinition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-definition""", alias="Definition")
    ValidationStrategy_: Optional['ValidationStrategy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-validationstrategy""", alias="ValidationStrategy")
    DashboardId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-dashboardid""", alias="DashboardId")
    LinkSharingConfiguration_: Optional['LinkSharingConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-linksharingconfiguration""", alias="LinkSharingConfiguration")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-name""", alias="Name")
    DashboardPublishOptions_: Optional['DashboardPublishOptions'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-dashboardpublishoptions""", alias="DashboardPublishOptions")
    AwsAccountId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-permissions""", alias="Permissions")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dashboard.html#cfn-quicksight-dashboard-tags""", alias="Tags")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.Dashboard:
        from troposphere.quicksight import Dashboard as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import Dashboard as TropoT
        return resource_to_troposphere(self, TropoT)


class DataSet(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html
    Properties:
        - Name: PhysicalTableMap
        - Name: FieldFolders
        - Name: DataSetId
        - Name: RowLevelPermissionDataSet
        - Name: RowLevelPermissionTagConfiguration
        - Name: IngestionWaitPolicy
        - Name: DataSetRefreshProperties
        - Name: ColumnLevelPermissionRules
        - Name: Name
        - Name: ColumnGroups
        - Name: ImportMode
        - Name: DatasetParameters
        - Name: LogicalTableMap
        - Name: AwsAccountId
        - Name: Permissions
        - Name: DataSetUsageConfiguration
        - Name: Tags
    Attributes:
        - Name: CreatedTime
        - Name: LastUpdatedTime
        - Name: OutputColumns
        - Name: ConsumedSpiceCapacityInBytes
        - Name: Arn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    PhysicalTableMap_: Optional[Dict[str, 'PhysicalTable']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-physicaltablemap""", alias="PhysicalTableMap")
    FieldFolders_: Optional[Dict[str, 'FieldFolder']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-fieldfolders""", alias="FieldFolders")
    DataSetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetid""", alias="DataSetId")
    RowLevelPermissionDataSet_: Optional['RowLevelPermissionDataSet'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-rowlevelpermissiondataset""", alias="RowLevelPermissionDataSet")
    RowLevelPermissionTagConfiguration_: Optional['RowLevelPermissionTagConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-rowlevelpermissiontagconfiguration""", alias="RowLevelPermissionTagConfiguration")
    IngestionWaitPolicy_: Optional['IngestionWaitPolicy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-ingestionwaitpolicy""", alias="IngestionWaitPolicy")
    DataSetRefreshProperties_: Optional['DataSetRefreshProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetrefreshproperties""", alias="DataSetRefreshProperties")
    ColumnLevelPermissionRules_: Optional[List['ColumnLevelPermissionRule']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-columnlevelpermissionrules""", alias="ColumnLevelPermissionRules")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-name""", alias="Name")
    ColumnGroups_: Optional[List['ColumnGroup']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-columngroups""", alias="ColumnGroups")
    ImportMode_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-importmode""", alias="ImportMode")
    DatasetParameters_: Optional[List['DatasetParameter']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetparameters""", alias="DatasetParameters")
    LogicalTableMap_: Optional[Dict[str, 'LogicalTable']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-logicaltablemap""", alias="LogicalTableMap")
    AwsAccountId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-permissions""", alias="Permissions")
    DataSetUsageConfiguration_: Optional['DataSetUsageConfiguration'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-datasetusageconfiguration""", alias="DataSetUsageConfiguration")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-dataset.html#cfn-quicksight-dataset-tags""", alias="Tags")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.DataSet:
        from troposphere.quicksight import DataSet as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import DataSet as TropoT
        return resource_to_troposphere(self, TropoT)


class DataSource(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html
    Properties:
        - Name: DataSourceParameters
        - Name: Type
        - Name: VpcConnectionProperties
        - Name: AlternateDataSourceParameters
        - Name: ErrorInfo
        - Name: AwsAccountId
        - Name: Permissions
        - Name: SslProperties
        - Name: Credentials
        - Name: DataSourceId
        - Name: Tags
        - Name: Name
    Attributes:
        - Name: Status
        - Name: CreatedTime
        - Name: LastUpdatedTime
        - Name: Arn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    DataSourceParameters_: Optional['DataSourceParameters'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-datasourceparameters""", alias="DataSourceParameters")
    Type_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-type""", alias="Type")
    VpcConnectionProperties_: Optional['VpcConnectionProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-vpcconnectionproperties""", alias="VpcConnectionProperties")
    AlternateDataSourceParameters_: Optional[List['DataSourceParameters']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-alternatedatasourceparameters""", alias="AlternateDataSourceParameters")
    ErrorInfo_: Optional['DataSourceErrorInfo'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-errorinfo""", alias="ErrorInfo")
    AwsAccountId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-permissions""", alias="Permissions")
    SslProperties_: Optional['SslProperties'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-sslproperties""", alias="SslProperties")
    Credentials_: Optional['DataSourceCredentials'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-credentials""", alias="Credentials")
    DataSourceId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-datasourceid""", alias="DataSourceId")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-tags""", alias="Tags")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-datasource.html#cfn-quicksight-datasource-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.DataSource:
        from troposphere.quicksight import DataSource as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import DataSource as TropoT
        return resource_to_troposphere(self, TropoT)


class RefreshSchedule(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html
    Properties:
        - Name: Schedule
        - Name: AwsAccountId
        - Name: DataSetId
    Attributes:
        - Name: Arn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    Schedule_: Optional['RefreshScheduleMap'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html#cfn-quicksight-refreshschedule-schedule""", alias="Schedule")
    AwsAccountId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html#cfn-quicksight-refreshschedule-awsaccountid""", alias="AwsAccountId")
    DataSetId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-refreshschedule.html#cfn-quicksight-refreshschedule-datasetid""", alias="DataSetId")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.RefreshSchedule:
        from troposphere.quicksight import RefreshSchedule as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import RefreshSchedule as TropoT
        return resource_to_troposphere(self, TropoT)


class Template(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html
    Properties:
        - Name: VersionDescription
        - Name: SourceEntity
        - Name: Definition
        - Name: AwsAccountId
        - Name: Permissions
        - Name: ValidationStrategy
        - Name: Tags
        - Name: TemplateId
        - Name: Name
    Attributes:
        - Name: Version.Status
        - Name: CreatedTime
        - Name: Version.DataSetConfigurations
        - Name: LastUpdatedTime
        - Name: Version.VersionNumber
        - Name: Version.Sheets
        - Name: Version.ThemeArn
        - Name: Version.Errors
        - Name: Version.CreatedTime
        - Name: Version.Description
        - Name: Version
        - Name: Arn
        - Name: Version.SourceEntityArn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    VersionDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-versiondescription""", alias="VersionDescription")
    SourceEntity_: Optional['TemplateSourceEntity'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-sourceentity""", alias="SourceEntity")
    Definition_: Optional['TemplateVersionDefinition'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-definition""", alias="Definition")
    AwsAccountId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-permissions""", alias="Permissions")
    ValidationStrategy_: Optional['ValidationStrategy'] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-validationstrategy""", alias="ValidationStrategy")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-tags""", alias="Tags")
    TemplateId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-templateid""", alias="TemplateId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-template.html#cfn-quicksight-template-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.Template:
        from troposphere.quicksight import Template as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import Template as TropoT
        return resource_to_troposphere(self, TropoT)


class Theme(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html
    Properties:
        - Name: ThemeId
        - Name: VersionDescription
        - Name: Configuration
        - Name: BaseThemeId
        - Name: AwsAccountId
        - Name: Permissions
        - Name: Tags
        - Name: Name
    Attributes:
        - Name: Version.Configuration.Typography
        - Name: Version.Status
        - Name: Version.BaseThemeId
        - Name: CreatedTime
        - Name: Version.Configuration
        - Name: Version.Configuration.DataColorPalette
        - Name: LastUpdatedTime
        - Name: Version.Configuration.UIColorPalette
        - Name: Version.VersionNumber
        - Name: Version.Arn
        - Name: Version.Errors
        - Name: Version.Description
        - Name: Version.CreatedTime
        - Name: Type
        - Name: Version
        - Name: Arn
        - Name: Version.Configuration.Sheet
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    ThemeId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-themeid""", alias="ThemeId")
    VersionDescription_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-versiondescription""", alias="VersionDescription")
    Configuration_: 'ThemeConfiguration' =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-configuration""", alias="Configuration")
    BaseThemeId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-basethemeid""", alias="BaseThemeId")
    AwsAccountId_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-awsaccountid""", alias="AwsAccountId")
    Permissions_: Optional[List['ResourcePermission']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-permissions""", alias="Permissions")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-tags""", alias="Tags")
    Name_: str =  Field(description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-theme.html#cfn-quicksight-theme-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.Theme:
        from troposphere.quicksight import Theme as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import Theme as TropoT
        return resource_to_troposphere(self, TropoT)


class Topic(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html
    Properties:
        - Name: Description
        - Name: DataSets
        - Name: AwsAccountId
        - Name: TopicId
        - Name: Name
    Attributes:
        - Name: Arn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    Description_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html#cfn-quicksight-topic-description""", alias="Description")
    DataSets_: Optional[List['DatasetMetadata']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html#cfn-quicksight-topic-datasets""", alias="DataSets")
    AwsAccountId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html#cfn-quicksight-topic-awsaccountid""", alias="AwsAccountId")
    TopicId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html#cfn-quicksight-topic-topicid""", alias="TopicId")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-topic.html#cfn-quicksight-topic-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.Topic:
        from troposphere.quicksight import Topic as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import Topic as TropoT
        return resource_to_troposphere(self, TropoT)


class VPCConnection(BaseModel):
    """http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html
    Properties:
        - Name: DnsResolvers
        - Name: AvailabilityStatus
        - Name: AwsAccountId
        - Name: VPCConnectionId
        - Name: SecurityGroupIds
        - Name: SubnetIds
        - Name: RoleArn
        - Name: Tags
        - Name: Name
    Attributes:
        - Name: Status
        - Name: CreatedTime
        - Name: VPCId
        - Name: NetworkInterfaces
        - Name: LastUpdatedTime
        - Name: Arn
    """
    
    title: str = Field(description="Title of cloudformation resource.", alias="title")
    DnsResolvers_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-dnsresolvers""", alias="DnsResolvers")
    AvailabilityStatus_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-availabilitystatus""", alias="AvailabilityStatus")
    AwsAccountId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-awsaccountid""", alias="AwsAccountId")
    VPCConnectionId_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-vpcconnectionid""", alias="VPCConnectionId")
    SecurityGroupIds_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-securitygroupids""", alias="SecurityGroupIds")
    SubnetIds_: Optional[List[str]] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-subnetids""", alias="SubnetIds")
    RoleArn_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-rolearn""", alias="RoleArn")
    Tags_: Optional[List['Tag']] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-tags""", alias="Tags")
    Name_: Optional[str] = Field(None, description="""http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-quicksight-vpcconnection.html#cfn-quicksight-vpcconnection-name""", alias="Name")
    

    @property
    def tropo_type(self) -> troposphere.quicksight.VPCConnection:
        from troposphere.quicksight import VPCConnection as TropoT
        return TropoT

    def to_troposphere(self):
        from troposphere.quicksight import VPCConnection as TropoT
        return resource_to_troposphere(self, TropoT)

